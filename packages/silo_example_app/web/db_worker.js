// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.6.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    getDispatchProperty(object) {
      return object[init.dispatchPropertyName];
    },
    setDispatchProperty(object, value) {
      A.defineProperty(object, init.dispatchPropertyName, value);
    },
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    dispatchRecordInterceptor(record) {
      return record.i;
    },
    dispatchRecordProto(record) {
      return record.p;
    },
    dispatchRecordExtension(record) {
      return record.e;
    },
    dispatchRecordIndexability(record) {
      return record.x;
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor,
        record = J.getDispatchProperty(object);
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = J.getDispatchProperty(object);
        }
      if (record != null) {
        proto = J.dispatchRecordProto(record);
        if (false === proto)
          return J.dispatchRecordInterceptor(record);
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return J.dispatchRecordInterceptor(record);
        if (J.dispatchRecordExtension(record) === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = J.lookupInterceptorByConstructor($constructor);
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        J.cacheInterceptorOnConstructor($constructor, B.UnknownJavaScriptObject_methods);
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JS_INTEROP_INTERCEPTOR_TAG() {
      var t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
      return t1 == null ? $._JS_INTEROP_INTERCEPTOR_TAG = A.getIsolateAffinityTag("_$dart_js") : t1;
    },
    lookupInterceptorByConstructor($constructor) {
      return $constructor == null ? null : $constructor[J.JS_INTEROP_INTERCEPTOR_TAG()];
    },
    cacheInterceptorOnConstructor($constructor, interceptor) {
      A.defineProperty($constructor, A._asString(J.JS_INTEROP_INTERCEPTOR_TAG()), interceptor);
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + A.S($length), null));
      return J.JSArray_JSArray$markGrowable(new Array($length), $E);
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + A.S($length), null));
      return J.JSArray_JSArray$markGrowable(new Array($length), $E);
    },
    JSArray_JSArray$typed(allocation, $E) {
      return allocation;
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(J.JSArray_JSArray$typed(allocation, $E), $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_JSArray$markGrowable(allocation, $E) {
      return A._setArrayType(J.JSArray_JSArray$typed(allocation, $E), $E._eval$1("JSArray<0>"));
    },
    JSArray_markFixedList(list, $T) {
      list.$flags = 1;
      return list;
    },
    JSArray_markUnmodifiableList(list, $T) {
      list.$flags = 3;
      return list;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return A.Comparable_compare(t1._as(a), t1._as(b));
    },
    ArrayIterator$(iterable, $E) {
      return new J.ArrayIterator(iterable, iterable.length, $E._eval$1("ArrayIterator<0>"));
    },
    JSNumber__handleIEtoString(result) {
      var t1, exponent,
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        throw A.wrapException(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return B.JSString_methods.$add(result, B.JSString_methods.$mul("0", exponent));
    },
    JSInt__clz32(uint32) {
      return Math.clz32(uint32);
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$i(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$in(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$add$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$add(receiver);
    },
    get$buffer$x(receiver) {
      return J.getInterceptor$x(receiver).get$buffer(receiver);
    },
    get$codeUnits$s(receiver) {
      return J.getInterceptor$s(receiver).get$codeUnits(receiver);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$last$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$lengthInBytes$x(receiver) {
      return J.getInterceptor$x(receiver).get$lengthInBytes(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $add$ns(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ns(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $negate$in(receiver) {
      if (typeof receiver == "number")
        return -receiver;
      return J.getInterceptor$in(receiver).$negate(receiver);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    asByteData$0$x(receiver) {
      return J.getInterceptor$x(receiver).asByteData$0(receiver);
    },
    asByteData$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asByteData$2(receiver, a0, a1);
    },
    asInt32List$0$x(receiver) {
      return J.getInterceptor$x(receiver).asInt32List$0(receiver);
    },
    asInt32List$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asInt32List$2(receiver, a0, a1);
    },
    asUint8List$0$x(receiver) {
      return J.getInterceptor$x(receiver).asUint8List$0(receiver);
    },
    asUint8List$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).asUint8List$1(receiver, a0);
    },
    asUint8List$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asUint8List$2(receiver, a0, a1);
    },
    clear$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).clear$0(receiver);
    },
    codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    firstWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).firstWhere$1(receiver, a0);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getInt32$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).getInt32$1(receiver, a0);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    insert$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
    },
    insertAll$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insertAll$2(receiver, a0, a1);
    },
    join$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).join$0(receiver);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    padLeft$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).padLeft$2(receiver, a0, a1);
    },
    remove$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    removeAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
    },
    removeLast$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).removeLast$0(receiver);
    },
    replaceAll$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
    },
    setAll$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).setAll$2(receiver, a0, a1);
    },
    setInt32$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).setInt32$2(receiver, a0, a1);
    },
    setRange$3$ax(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    startsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    startsWith$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
    },
    sublist$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    substring$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toList$1$growable$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
    },
    toLowerCase$0$s(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toUpperCase$0$s(receiver) {
      return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
    },
    truncate$2$z(receiver, a0, a1) {
      return J.getInterceptor$z(receiver).truncate$2(receiver, a0, a1);
    },
    where$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    typeAcceptsNull($T) {
      return $T._is(null);
    },
    printToConsole(line) {
      A.printString(line);
    },
    makeListFixedLength(growableList, $T) {
      return J.JSArray_markFixedList(growableList, $T);
    },
    makeFixedListUnmodifiable(fixedLengthList, $T) {
      return J.JSArray_markUnmodifiableList(fixedLengthList, $T);
    },
    createSentinel($T) {
      return $;
    },
    isSentinel(value) {
      return false;
    },
    unsafeCast(v, $T) {
      return $T._as(v);
    },
    CastIterator$(_source, $S, $T) {
      return new A.CastIterator(_source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterator<1,2>"));
    },
    CastIterable$_(_source, $S, $T) {
      return new A.CastIterable(_source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return A._EfficientLengthCastIterable$(source, $S, $T);
      return A.CastIterable$_(source, $S, $T);
    },
    _EfficientLengthCastIterable$(source, $S, $T) {
      return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
    },
    CastList$(_source, $S, $T) {
      return new A.CastList(_source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastList<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    CodeUnits$(_string) {
      return new A.CodeUnits(_string);
    },
    hexDigitValue(char) {
      var letter,
        digit = (char ^ 48) >>> 0;
      if (digit <= 9)
        return digit;
      letter = (char | 32) >>> 0;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    parseHexByte(source, index) {
      var digit1, t2, digit2,
        t1 = source.length;
      if (index >>> 0 !== index || index >= t1)
        return A.ioore(source, index);
      digit1 = A.hexDigitValue(source.charCodeAt(index));
      t2 = index + 1;
      if (!(t2 < t1))
        return A.ioore(source, t2);
      digit2 = A.hexDigitValue(source.charCodeAt(t2));
      return digit1 * 16 + digit2 - (digit2 & 256);
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    SystemHash_hash2(v1, v2, seed) {
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(seed, v1), v2));
    },
    SystemHash_hash3(v1, v2, v3, seed) {
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(seed, v1), v2), v3));
    },
    SystemHash_hash4(v1, v2, v3, v4, seed) {
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(seed, v1), v2), v3), v4));
    },
    checkNotNullable(value, $name, $T) {
      if (value == null)
        throw A.wrapException(A.NotNullableError$($name, $T));
      return value;
    },
    NotNullableError$(_name, $T) {
      return new A.NotNullableError(_name, $T._eval$1("NotNullableError<0>"));
    },
    isToStringVisiting(object) {
      var t2,
        t1 = J.getInterceptor$asx($.toStringVisiting),
        i = 0;
      while (true) {
        t2 = t1.get$length($.toStringVisiting);
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(i < t2))
          break;
        if (object === t1.$index($.toStringVisiting, i))
          return true;
        ++i;
      }
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      var t1 = new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
      t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
      return t1;
    },
    ListIterator$(iterable, $E) {
      return new A.ListIterator(iterable, J.get$length$asx(iterable), $E._eval$1("ListIterator<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return A.EfficientLengthMappedIterable$(iterable, $function, $S, $T);
      return A.MappedIterable$_(iterable, $function, $S, $T);
    },
    MappedIterable$_(_iterable, _f, $S, $T) {
      return new A.MappedIterable(_iterable, _f, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    EfficientLengthMappedIterable$(iterable, $function, $S, $T) {
      return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    MappedIterator$(_iterator, _f, $S, $T) {
      return new A.MappedIterator(_iterator, _f, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterator<1,2>"));
    },
    MappedListIterable$(_source, _f, $S, $T) {
      return new A.MappedListIterable(_source, _f, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    WhereIterable$(_iterable, _f, $E) {
      return new A.WhereIterable(_iterable, _f, $E._eval$1("WhereIterable<0>"));
    },
    WhereIterator$(_iterator, _f, $E) {
      return new A.WhereIterator(_iterator, _f, $E._eval$1("WhereIterator<0>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return A.EfficientLengthTakeIterable$(iterable, takeCount, $E);
      return A.TakeIterable$_(iterable, takeCount, $E);
    },
    TakeIterable$_(_iterable, _takeCount, $E) {
      return new A.TakeIterable(_iterable, _takeCount, $E._eval$1("TakeIterable<0>"));
    },
    EfficientLengthTakeIterable$(iterable, takeCount, $E) {
      return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
    },
    TakeIterator$(_iterator, _remaining, $E) {
      return new A.TakeIterator(_iterator, _remaining, $E._eval$1("TakeIterator<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return A.EfficientLengthSkipIterable_EfficientLengthSkipIterable(iterable, count, $E);
      return A.SkipIterable$_(iterable, A._checkCount(count), $E);
    },
    SkipIterable$_(_iterable, _skipCount, $E) {
      return new A.SkipIterable(_iterable, _skipCount, $E._eval$1("SkipIterable<0>"));
    },
    EfficientLengthSkipIterable_EfficientLengthSkipIterable(iterable, count, $E) {
      return A.EfficientLengthSkipIterable$_(iterable, A._checkCount(count), $E);
    },
    EfficientLengthSkipIterable$_(iterable, count, $E) {
      return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
    },
    _checkCount(count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return count;
    },
    SkipIterator$(_iterator, _skipCount, $E) {
      return new A.SkipIterator(_iterator, _skipCount, $E._eval$1("SkipIterator<0>"));
    },
    EmptyIterable$($E) {
      return new A.EmptyIterable($E._eval$1("EmptyIterable<0>"));
    },
    WhereTypeIterable$(_source, $T) {
      return new A.WhereTypeIterable(_source, $T._eval$1("WhereTypeIterable<0>"));
    },
    WhereTypeIterator$(_source, $T) {
      return new A.WhereTypeIterator(_source, $T._eval$1("WhereTypeIterator<0>"));
    },
    IterableElementError_noElement() {
      return A.StateError$("No element");
    },
    IterableElementError_tooFew() {
      return A.StateError$("Too few elements");
    },
    ReversedListIterable$(_source, $E) {
      return new A.ReversedListIterable(_source, $E._eval$1("ReversedListIterable<0>"));
    },
    Sort_sort(a, compare, $E) {
      var t1 = J.get$length$asx(a);
      if (typeof t1 !== "number")
        return t1.$sub();
      A.Sort__doSort(a, 0, t1 - 1, compare, $E);
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, pivots_are_equal, k, ak, comp, great0, less0,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      pivots_are_equal = J.$eq$(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; A.boolConversionCheck(J.$eq$(compare.call$2(t1.$index(a, less), el2), 0));)
          ++less;
        for (; A.boolConversionCheck(J.$eq$(compare.call$2(t1.$index(a, great), el4), 0));)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    NotNullableError: function NotNullableError(t0, t1) {
      this.__internal$_name = t0;
      this.$ti = t1;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    _keysFromIndex(index) {
      return Object.keys(index);
    },
    _KeysOrValues$(_elements, $E) {
      return new A._KeysOrValues(_elements, $E._eval$1("_KeysOrValues<0>"));
    },
    _KeysOrValuesOrElementsIterator$(_elements, $E) {
      return new A._KeysOrValuesOrElementsIterator(_elements, _elements.length, $E._eval$1("_KeysOrValuesOrElementsIterator<0>"));
    },
    unminifyOrTag(rawClassName) {
      var preserved = A.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    requiresPreamble() {
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = J.dispatchRecordIndexability(record);
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = A.Primitives__computeIdentityHashCodeProperty();
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives__computeIdentityHashCodeProperty() {
      return Symbol("identityHashCode");
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A.instanceTypeName(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = A.constructorNameFallback(object);
        if (A.boolConversionCheck(A.Primitives__saneNativeClassName(dispatchName)))
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && A.boolConversionCheck(A.Primitives__saneNativeClassName(constructorName)))
            return constructorName;
        }
      }
      return A.instanceTypeName(object);
    },
    Primitives__saneNativeClassName($name) {
      var t1;
      if ($name != null) {
        t1 = J.getInterceptor$($name);
        t1 = !A.boolConversionCheck(t1.$eq($name, "Object")) && !A.boolConversionCheck(t1.$eq($name, ""));
      } else
        t1 = false;
      return t1;
    },
    Primitives_objectToHumanReadableString(object) {
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_stringSafeToString(string) {
      return A.jsonEncodeNative(string);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return A.Primitives_stringSafeToString(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return A.Primitives_objectToHumanReadableString(object);
    },
    Primitives_dateNow() {
      return Date.now();
    },
    Primitives_currentUri() {
      A.requiresPreamble();
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = J.get$length$asx(array);
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(codePoints)); A.boolConversionCheck(t1.moveNext$0());) {
        i = t1.get$current();
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, i;
      for (type$.Iterable_dynamic._as(charCodes), t1 = J.get$iterator$ax(charCodes); A.boolConversionCheck(t1.moveNext$0());) {
        i = t1.get$current();
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(type$.List_dynamic._as(charCodes));
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_stringConcatUnchecked(string1, string2) {
      return string1 + string2;
    },
    Primitives_flattenString(str) {
      return str.charCodeAt(0) == 0 ? str : str;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver.get$millisecondsSinceEpoch());
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return A.boolConversionCheck(receiver.isUtc) ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return A.boolConversionCheck(receiver.isUtc) ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return A.boolConversionCheck(receiver.isUtc) ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return A.boolConversionCheck(receiver.isUtc) ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return A.boolConversionCheck(receiver.isUtc) ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return A.boolConversionCheck(receiver.isUtc) ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return A.boolConversionCheck(receiver.isUtc) ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    Primitives_trySetStackTrace(error, stackTrace) {
      var jsError;
      if (error.$thrownJsError == null) {
        jsError = A.wrapException(error);
        error.$thrownJsError = jsError;
        jsError.stack = stackTrace.toString$0(0);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return A.ArgumentError$value(index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      var _null = null;
      if (!A._isInt(start))
        return A.ArgumentError$value(start, "start", _null);
      if (start < 0 || start > A._asNum($length))
        return A.RangeError$range(start, 0, A._asIntQ($length), "start", _null);
      if (end != null) {
        if (!A._isInt(end))
          return A.ArgumentError$value(end, "end", _null);
        if (end < start || end > A._asNum($length))
          return A.RangeError$range(end, start, A._asIntQ($length), "end", _null);
      }
      return A.ArgumentError$value(end, "end", _null);
    },
    stringLastIndexOfUnchecked(receiver, element, start) {
      return receiver.lastIndexOf(element, start);
    },
    argumentErrorValue(object) {
      return A.ArgumentError$value(object, null, null);
    },
    checkNull(object) {
      if (object == null)
        throw A.wrapException(A.argumentErrorValue(object));
      return object;
    },
    checkNum(value) {
      if (typeof value != "number")
        throw A.wrapException(A.argumentErrorValue(value));
      return value;
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = A.TypeError$();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpressionWithWrapper(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return A.UnsupportedError$("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder$(_arguments, _argumentsExpr, _expr, _method, _receiver, _pattern) {
      return new A.TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver);
    },
    TypeErrorDecoder_buildJavaScriptObject() {
      return {
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_buildJavaScriptObjectWithNonClosure() {
      return {$method$: null,
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_extractPattern(message) {
      var match;
      message = A._asString(A.quoteStringForRegExp(message.replace(String({}), "$receiver$")));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      return A.TypeErrorDecoder$(match.indexOf("\\$arguments\\$"), match.indexOf("\\$argumentsExpr\\$"), match.indexOf("\\$expr\\$"), match.indexOf("\\$method\\$"), match.indexOf("\\$receiver\\$"), message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"));
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokeCallErrorOnNull() {
      return function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokeCallErrorOnUndefined() {
      return function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOnNull() {
      return function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOnUndefined() {
      return function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    NullError$(_message) {
      return new A.NullError();
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    UnknownJsTypeError$(_message) {
      return new A.UnknownJsTypeError(_message);
    },
    NullThrownFromJavaScriptException$(_irritant) {
      return new A.NullThrownFromJavaScriptException(_irritant);
    },
    ExceptionAndStackTrace$(dartException, stackTrace) {
      return new A.ExceptionAndStackTrace(dartException, stackTrace);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return A.NullThrownFromJavaScriptException$(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return A.saveStackTrace(ex, A.NullError$(A.S(message) + " (Error " + ieErrorCode + ")"));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null)
            return A.saveStackTrace(ex, A.NullError$(A._asString(message)));
        }
        return A.saveStackTrace(ex, A.UnknownJsTypeError$(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && A.boolConversionCheck(A.contains(message, "call stack")))
          return A.StackOverflowError$();
        message = A.tryStringifyException(ex);
        return A.saveStackTrace(ex, A.ArgumentError$(typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message, null));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return A.StackOverflowError$();
      return ex;
    },
    tryStringifyException(ex) {
      return function(ex) {
        try {
          return String(ex);
        } catch (e) {
        }
        return null;
      }(ex);
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return A._StackTrace$(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = A._StackTrace$(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    _StackTrace$(_exception) {
      return new A._StackTrace(_exception);
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = A.getLength(keyValuePairs);
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, A.getIndex(keyValuePairs, index), A.getIndex(keyValuePairs, index0));
      }
      return result;
    },
    getIndex(array, index) {
      return array[index];
    },
    getLength(array) {
      return array.length;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(A.StaticClosure$().constructor.prototype) : Object.create(A.BoundClosure$(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(A.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      A.BoundClosure_interceptorFieldName();
      A.BoundClosure_receiverFieldName();
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    StaticClosure$() {
      return new A.StaticClosure();
    },
    BoundClosure$(_receiver, _interceptor) {
      return new A.BoundClosure(_receiver, _interceptor);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A.evalInInstance(closure._receiver, recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure_receiverFieldName() {
      var t1 = $.BoundClosure__receiverFieldNameCache;
      return t1 == null ? $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver") : t1;
    },
    BoundClosure_interceptorFieldName() {
      var t1 = $.BoundClosure__interceptorFieldNameCache;
      return t1 == null ? $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor") : t1;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t2, $name,
        template = A.BoundClosure$("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object),
        t1 = J.getInterceptor$asx(names),
        i = 0;
      while (true) {
        t2 = t1.get$length(names);
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(i < t2))
          break;
        $name = t1.$index(names, i);
        if (template[$name] === fieldName)
          return $name;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    jsHasOwnProperty(jsObject, property) {
      return jsObject.hasOwnProperty(property);
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(A._AssertionError$(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(A._CyclicInitializationError$(staticName));
    },
    _CyclicInitializationError$(variableName) {
      return new A._CyclicInitializationError(variableName);
    },
    RuntimeError$(message) {
      return new A.RuntimeError(message);
    },
    jsonEncodeNative(string) {
      return JSON.stringify(string);
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    _AssertionError$(message) {
      return new A._AssertionError(message);
    },
    isJSFunction(f) {
      return typeof f == "function";
    },
    assertInteropArgs(args) {
    },
    wrapZoneUnaryCallback(callback, $T) {
      if (A.boolConversionCheck(J.$eq$(A.Zone_current(), B.C__RootZone)))
        return callback;
      if (callback == null)
        return null;
      return A.Zone_current().bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    staticInteropGlobalContext() {
      return self;
    },
    createObjectLiteral($T) {
      return {};
    },
    JsLinkedHashMap$($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    JsLinkedHashMap__isStringKey(key) {
      return typeof key == "string";
    },
    JsLinkedHashMap__isNumericKey(key) {
      return typeof key == "number" && (key & 0x3fffffff) === key;
    },
    LinkedHashMapCell$(hashMapCellKey, hashMapCellValue) {
      return new A.LinkedHashMapCell(hashMapCellKey, hashMapCellValue);
    },
    LinkedHashMapKeyIterable$(_map, $E) {
      return new A.LinkedHashMapKeyIterable(_map, $E._eval$1("LinkedHashMapKeyIterable<0>"));
    },
    LinkedHashMapKeyIterator$(_map, _modifications, $E) {
      var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
      t1.LinkedHashMapKeyIterator$2(_map, _modifications, $E);
      return t1;
    },
    contains(userAgent, $name) {
      return userAgent.indexOf($name) !== -1;
    },
    propertyGet(object, property) {
      return object[property];
    },
    propertySet(object, property, value) {
      object[property] = value;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    interceptorsByTag() {
      return init.interceptorsByTag;
    },
    leafTags() {
      return init.leafTags;
    },
    lookupInterceptor(tag) {
      return A.propertyGet(A.interceptorsByTag(), tag);
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = A.propertyGet($.dispatchRecordsForInstanceTags, tag);
      if (record != null)
        return A.patchInstance(obj, record);
      interceptor = A.propertyGet($.interceptorsForUncacheableTags, tag);
      if (interceptor != null)
        return interceptor;
      interceptorClass = A.lookupInterceptor(tag);
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = A.propertyGet($.dispatchRecordsForInstanceTags, altTag);
          if (record != null)
            return A.patchInstance(obj, record);
          interceptor = A.propertyGet($.interceptorsForUncacheableTags, altTag);
          if (interceptor != null)
            return interceptor;
          interceptorClass = A.lookupInterceptor(altTag);
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        A.propertySet($.dispatchRecordsForInstanceTags, tag, record);
        return A.patchInstance(obj, record);
      }
      if (mark === "~") {
        A.propertySet($.interceptorsForUncacheableTags, tag, interceptor);
        return interceptor;
      }
      if (mark === "-")
        return A.patchProto(obj, A.makeLeafDispatchRecord(interceptor));
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (A.leafTags()[tag] === true)
        return A.patchProto(obj, A.makeLeafDispatchRecord(interceptor));
      else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInstance(obj, record) {
      J.setDispatchProperty(obj, record);
      return J.dispatchRecordInterceptor(record);
    },
    patchProto(obj, record) {
      J.setDispatchProperty(Object.getPrototypeOf(obj), record);
      return J.dispatchRecordInterceptor(record);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      J.setDispatchProperty(proto, J.makeDispatchRecord(interceptor, proto, null, null));
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (A.leafTags()[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    constructorNameFallback(object) {
      return B.C_JS_CONST(object);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = A.interceptorsByTag();
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              J.setDispatchProperty(proto, record);
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = A.propertyGet(map, tag);
          A.propertySet(map, "!" + tag, interceptorClass);
          A.propertySet(map, "~" + tag, interceptorClass);
          A.propertySet(map, "-" + tag, interceptorClass);
          A.propertySet(map, "+" + tag, interceptorClass);
          A.propertySet(map, "*" + tag, interceptorClass);
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = A.applyHooksTransformer(transformer, hooks);
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    getRtiForRecord(record) {
      return record._getRti$0();
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    regExpGetGlobalNative(regexp) {
      var nativeRegexp = regexp.get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      return nativeRegexp;
    },
    JSSyntaxRegExp$(source, caseSensitive, dotAll, multiLine, unicode) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, false));
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    _MatchImplementation$(pattern, _match) {
      return new A._MatchImplementation(_match);
    },
    _AllMatchesIterable$(_re, _string, _start) {
      return new A._AllMatchesIterable(_re, _string, _start);
    },
    _AllMatchesIterator$(_regExp, _string, _nextIndex) {
      return new A._AllMatchesIterator(_regExp, _string, _nextIndex);
    },
    _AllMatchesIterator__isLeadSurrogate(c) {
      return c >= 55296 && c <= 56319;
    },
    _AllMatchesIterator__isTrailSurrogate(c) {
      return c >= 56320 && c <= 57343;
    },
    firstMatchAfter(regExp, string, start) {
      return regExp._execGlobal$2(string, start);
    },
    stringIndexOfStringUnchecked(receiver, other, startIndex) {
      return receiver.indexOf(other, startIndex);
    },
    substring1Unchecked(receiver, startIndex) {
      return receiver.substring(startIndex);
    },
    substring2Unchecked(receiver, startIndex, endIndex) {
      return receiver.substring(startIndex, endIndex);
    },
    stringContainsStringUnchecked(receiver, other, startIndex) {
      var t1 = A.stringIndexOfStringUnchecked(receiver, other, startIndex);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    StringMatch$(start, input, pattern) {
      return new A.StringMatch(start, pattern);
    },
    allMatchesInStringUnchecked(pattern, string, startIndex) {
      return A._StringAllMatchesIterable$(string, pattern, startIndex);
    },
    _StringAllMatchesIterable$(_input, _pattern, _index) {
      return new A._StringAllMatchesIterable(_input, _pattern, _index);
    },
    _StringAllMatchesIterator$(_input, _pattern, _index) {
      return new A._StringAllMatchesIterator(_input, _pattern, _index);
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      if (typeof other == "string")
        return A.stringContainsStringUnchecked(receiver, other, startIndex);
      else if (other instanceof A.JSSyntaxRegExp)
        return other.hasMatch$1(B.JSString_methods.substring$1(receiver, startIndex));
      else
        return J.get$isNotEmpty$asx(J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)));
    },
    stringReplaceJS(receiver, jsRegExp, replacement) {
      return receiver.replace(jsRegExp, A.escapeReplacement(replacement));
    },
    escapeReplacement(replacement) {
      if (A.boolConversionCheck(A.stringContainsStringUnchecked(replacement, "$", 0)))
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp)
        return A.stringReplaceJS(receiver, A.regExpGetGlobalNative(pattern), replacement);
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var result, t1, startIndex, t2;
      A.checkNull(pattern);
      result = A.StringBuffer$("");
      for (t1 = J.get$iterator$ax(J.allMatches$1$s(pattern, receiver)), startIndex = 0; A.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        result.write$1(A.substring2Unchecked(receiver, startIndex, t2.get$start()));
        result.write$1(replacement);
        startIndex = t2.get$end();
      }
      result.write$1(A.substring1Unchecked(receiver, startIndex));
      return result.toString$0(0);
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var result, $length, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        result = A.StringBuffer$("");
        $length = receiver.length;
        result.write$1(replacement);
        for (i = 0; i < $length; ++i) {
          result.write$1(receiver[i]);
          result.write$1(replacement);
        }
        return result.toString$0(0);
      }
      if (A.stringIndexOfStringUnchecked(receiver, pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || A.boolConversionCheck(A.stringContainsStringUnchecked(replacement, "$", 0)))
        return A.stringReplaceAllUsingSplitJoin(receiver, pattern, replacement);
      return A.stringReplaceJS(receiver, new RegExp(A.quoteStringForRegExp(pattern), "g"), replacement);
    },
    stringReplaceAllUsingSplitJoin(receiver, pattern, replacement) {
      return receiver.split(pattern).join(replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_file_outFlags: function _Record_2_file_outFlags(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _.__js_helper$_previous = _.__js_helper$_next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_current = _.__js_helper$_cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldAI(fieldName) {
      var wrapper = new Error();
      A.throwExpressionWithWrapper(A.LateError$fieldAI(fieldName), wrapper);
    },
    throwLateFieldADI(fieldName) {
      var wrapper = new Error();
      A.throwExpressionWithWrapper(A.LateError$fieldADI(fieldName), wrapper);
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      t1._Cell$named$1(_name);
      return t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    _UnmodifiableNativeByteBufferView$(_data) {
      return new A._UnmodifiableNativeByteBufferView(_data);
    },
    _checkLength($length) {
      if (!A._isInt($length))
        throw A.wrapException(A.ArgumentError$("Invalid length " + A.S($length), null));
      return $length;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
      if (!type$.NativeByteBuffer._is(buffer))
        throw A.wrapException(A.ArgumentError$("Invalid view buffer", null));
      if (!A._isInt(offsetInBytes))
        throw A.wrapException(A.ArgumentError$("Invalid view offsetInBytes " + A.S(offsetInBytes), null));
      if (!type$.nullable_int._is($length))
        throw A.wrapException(A.ArgumentError$("Invalid view length " + A.S($length), null));
    },
    _ensureNativeList(list) {
      var t1, result, t2, i, t3;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      t2 = J.getInterceptor$ax(result);
      i = 0;
      while (true) {
        t3 = t1.get$length(list);
        if (typeof t3 !== "number")
          return A.iae(t3);
        if (!(i < t3))
          break;
        t2.$indexSet(result, i, t1.$index(list, i));
        ++i;
      }
      return result;
    },
    NativeByteData_NativeByteData($length) {
      return A.NativeByteData__create1(A._checkLength($length));
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? A.NativeByteData__create2(buffer, offsetInBytes) : A.NativeByteData__create3(buffer, offsetInBytes, $length);
    },
    NativeByteData__create1(arg) {
      return new DataView(new ArrayBuffer(arg));
    },
    NativeByteData__create2(arg1, arg2) {
      return new DataView(arg1, arg2);
    },
    NativeByteData__create3(arg1, arg2, arg3) {
      return new DataView(arg1, arg2, arg3);
    },
    NativeFloat32List__create1(arg) {
      return new Float32Array(arg);
    },
    NativeFloat64List__create1(arg) {
      return new Float64Array(arg);
    },
    NativeInt16List__create1(arg) {
      return new Int16Array(arg);
    },
    NativeInt32List_NativeInt32List$view(buffer, offsetInBytes, $length) {
      var t1;
      A._checkViewArguments(buffer, offsetInBytes, $length);
      if ($length == null) {
        t1 = J.get$lengthInBytes$x(buffer);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = B.JSNumber_methods._tdivFast$1(t1 - offsetInBytes, 4);
      }
      return A.NativeInt32List__create3(buffer, offsetInBytes, $length);
    },
    NativeInt32List__create1(arg) {
      return new Int32Array(arg);
    },
    NativeInt32List__create3(arg1, arg2, arg3) {
      return new Int32Array(arg1, arg2, arg3);
    },
    NativeInt8List_NativeInt8List$fromList(elements) {
      return A.NativeInt8List__create1(A._ensureNativeList(elements));
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List_NativeUint16List($length) {
      return A.NativeUint16List__createLength(A._checkLength($length));
    },
    NativeUint16List__createLength(arg) {
      return new Uint16Array(arg);
    },
    NativeUint16List__create1(arg) {
      return new Uint16Array(arg);
    },
    NativeUint32List__create1(arg) {
      return new Uint32Array(arg);
    },
    NativeUint8ClampedList__create1(arg) {
      return new Uint8ClampedArray(arg);
    },
    NativeUint8List_NativeUint8List($length) {
      return A.NativeUint8List__createLength(A._checkLength($length));
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? A.NativeUint8List__create2(buffer, offsetInBytes) : A.NativeUint8List__create3(buffer, offsetInBytes, $length);
    },
    NativeUint8List__createLength(arg) {
      return new Uint8Array(arg);
    },
    NativeUint8List__create1(arg) {
      return new Uint8Array(arg);
    },
    NativeUint8List__create2(arg1, arg2) {
      return new Uint8Array(arg1, arg2);
    },
    NativeUint8List__create3(arg1, arg2, arg3) {
      return new Uint8Array(arg1, arg2, arg3);
    },
    _isInvalidArrayIndex(index) {
      return index >>> 0 !== index;
    },
    _checkValidIndex(index, list, $length) {
      if (A.boolConversionCheck(A._isInvalidArrayIndex(index)) || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!A.boolConversionCheck(A._isInvalidArrayIndex(start)))
        if (end == null)
          t1 = start > $length;
        else
          t1 = A.boolConversionCheck(A._isInvalidArrayIndex(end)) || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    _UnmodifiableNativeByteBufferView: function _UnmodifiableNativeByteBufferView(t0) {
      this._data = t0;
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti$() {
      return new A.Rti(null, null);
    },
    Rti__setAsCheckFunction(rti, fn) {
      rti._as = fn;
    },
    Rti__setIsTestFunction(rti, fn) {
      rti._is = fn;
    },
    Rti__asCheck(rti, object) {
      return rti._as(object);
    },
    Rti__isCheck(rti, object) {
      return rti._is(object);
    },
    Rti__getPrecomputed1(rti) {
      return rti._precomputed1;
    },
    Rti__setPrecomputed1(rti, precomputed) {
      rti._precomputed1 = precomputed;
    },
    Rti__unstar(rti) {
      return A.boolConversionCheck(J.$eq$(A.Rti__getKind(rti), 6)) ? A.Rti__getStarArgument(rti) : rti;
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = A._Utils_asRtiOrNull(A.Rti__getPrecomputed1(rti));
      if (question == null) {
        question = A._Universe__lookupQuestionRti(universe, A.Rti__getStarArgument(rti), true);
        A.Rti__setPrecomputed1(rti, question);
      }
      return question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = A._Utils_asRtiOrNull(A.Rti__getPrecomputed1(rti));
      if (future == null) {
        future = A._Universe__lookupFutureRti(universe, A.Rti__getFutureOrArgument(rti));
        A.Rti__setPrecomputed1(rti, future);
      }
      return future;
    },
    Rti__getIsSubtypeCache(rti) {
      var t1 = rti._isSubtypeCache;
      return t1 == null ? rti._isSubtypeCache = new Map() : t1;
    },
    Rti__getSpecializedTestResource(rti) {
      return rti._specializedTestResource;
    },
    Rti__setSpecializedTestResource(rti, value) {
      rti._specializedTestResource = value;
    },
    Rti__getCachedRuntimeType(rti) {
      return rti._cachedRuntimeType;
    },
    Rti__setCachedRuntimeType(rti, type) {
      rti._cachedRuntimeType = type;
    },
    Rti__getKind(rti) {
      return A._Utils_asInt(rti._kind);
    },
    Rti__setKind(rti, kind) {
      rti._kind = kind;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = A.Rti__getKind(rti);
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(A._Utils_asRti(A.Rti__getPrimary(rti)));
      return kind === 12 || kind === 13;
    },
    Rti__getPrimary(rti) {
      return rti._primary;
    },
    Rti__setPrimary(rti, value) {
      rti._primary = value;
    },
    Rti__getRest(rti) {
      return rti._rest;
    },
    Rti__setRest(rti, value) {
      rti._rest = value;
    },
    Rti__getInterfaceName(rti) {
      return A._Utils_asString(A.Rti__getPrimary(rti));
    },
    Rti__getInterfaceTypeArguments(rti) {
      return A.Rti__getRest(rti);
    },
    Rti__getBindingBase(rti) {
      return A._Utils_asRti(A.Rti__getPrimary(rti));
    },
    Rti__getBindingArguments(rti) {
      return A.Rti__getRest(rti);
    },
    Rti__getRecordPartialShapeTag(rti) {
      return A._Utils_asString(A.Rti__getPrimary(rti));
    },
    Rti__getRecordFields(rti) {
      return A.Rti__getRest(rti);
    },
    Rti__getStarArgument(rti) {
      return A._Utils_asRti(A.Rti__getPrimary(rti));
    },
    Rti__getQuestionArgument(rti) {
      return A._Utils_asRti(A.Rti__getPrimary(rti));
    },
    Rti__getFutureOrArgument(rti) {
      return A._Utils_asRti(A.Rti__getPrimary(rti));
    },
    Rti__getReturnType(rti) {
      return A._Utils_asRti(A.Rti__getPrimary(rti));
    },
    Rti__getFunctionParameters(rti) {
      return A.Rti__getRest(rti);
    },
    Rti__getGenericFunctionBase(rti) {
      return A._Utils_asRti(A.Rti__getPrimary(rti));
    },
    Rti__getGenericFunctionBounds(rti) {
      return A.Rti__getRest(rti);
    },
    Rti__getGenericFunctionParameterIndex(rti) {
      return A._Utils_asInt(A.Rti__getPrimary(rti));
    },
    Rti__getEvalCache(rti) {
      return rti._evalCache;
    },
    Rti__setEvalCache(rti, value) {
      rti._evalCache = value;
    },
    Rti__getBindCache(rti) {
      return rti._bindCache;
    },
    Rti__setBindCache(rti, value) {
      rti._bindCache = value;
    },
    Rti_allocate() {
      return A.Rti$();
    },
    Rti__getCanonicalRecipe(rti) {
      return A._Utils_asString(rti._canonicalRecipe);
    },
    Rti__setCanonicalRecipe(rti, s) {
      rti._canonicalRecipe = s;
    },
    Rti_getLegacyErasedRecipe(rti) {
      return A.Rti__getCanonicalRecipe(rti).replace(/\*/g, "");
    },
    _FunctionParameters$() {
      return new A._FunctionParameters();
    },
    _FunctionParameters_allocate() {
      return A._FunctionParameters$();
    },
    _FunctionParameters__getRequiredPositional(parameters) {
      return parameters._requiredPositional;
    },
    _FunctionParameters__setRequiredPositional(parameters, requiredPositional) {
      parameters._requiredPositional = requiredPositional;
    },
    _FunctionParameters__getOptionalPositional(parameters) {
      return parameters._optionalPositional;
    },
    _FunctionParameters__setOptionalPositional(parameters, optionalPositional) {
      parameters._optionalPositional = optionalPositional;
    },
    _FunctionParameters__getNamed(parameters) {
      return parameters._named;
    },
    _FunctionParameters__setNamed(parameters, named) {
      parameters._named = named;
    },
    _theUniverse() {
      return init.typeUniverse;
    },
    _rtiEval(environment, recipe) {
      return A._Universe_evalInEnvironment(A._theUniverse(), environment, recipe);
    },
    _rtiBind(environment, types) {
      return A._Universe_bind(A._theUniverse(), environment, types);
    },
    findType(recipe) {
      return A._Universe_eval(A._theUniverse(), recipe, false);
    },
    evalInInstance(instance, recipe) {
      return A._rtiEval(A.instanceType(instance), recipe);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, tag, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, t1, substitutedBounds, index, argument,
        kind = A.Rti__getKind(rti);
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = A._Utils_asRti(A.Rti__getPrimary(rti));
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = A._Utils_asRti(A.Rti__getPrimary(rti));
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = A._Utils_asRti(A.Rti__getPrimary(rti));
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = A.Rti__getInterfaceTypeArguments(rti);
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedInterfaceTypeArguments, interfaceTypeArguments)))
            return rti;
          return A._Universe__lookupInterfaceRti(universe, A.Rti__getInterfaceName(rti), substitutedInterfaceTypeArguments);
        case 10:
          base = A.Rti__getBindingBase(rti);
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = A.Rti__getBindingArguments(rti);
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedBase, base)) && A.boolConversionCheck(A._Utils_isIdentical(substitutedArguments, $arguments)))
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          tag = A.Rti__getRecordPartialShapeTag(rti);
          fields = A.Rti__getRecordFields(rti);
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedFields, fields)))
            return rti;
          return A._Universe__lookupRecordRti(universe, tag, substitutedFields);
        case 12:
          returnType = A.Rti__getReturnType(rti);
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = A.Rti__getFunctionParameters(rti);
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedReturnType, returnType)) && A.boolConversionCheck(A._Utils_isIdentical(substitutedFunctionParameters, functionParameters)))
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = A.Rti__getGenericFunctionBounds(rti);
          t1 = A._Utils_arrayLength(bounds);
          if (typeof t1 !== "number")
            return A.iae(t1);
          depth += t1;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = A.Rti__getGenericFunctionBase(rti);
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (A.boolConversionCheck(A._Utils_isIdentical(substitutedBounds, bounds)) && A.boolConversionCheck(A._Utils_isIdentical(substitutedBase, base)))
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = A.Rti__getGenericFunctionParameterIndex(rti);
          if (index < depth)
            return rti;
          argument = A._Utils_arrayAt(typeArguments, index - depth);
          if (argument == null)
            return rti;
          return A._Utils_asRti(argument);
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + A.S(kind)));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = A._Utils_arrayLength(rtiArray),
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = A._Utils_asRti(A._Utils_arrayAt(rtiArray, i));
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (A.boolConversionCheck(A._Utils_isNotIdentical(substitutedRti, rti)))
          changed = true;
        A._Utils_arraySetAt(result, i, substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, $name, isRequired, rti, substitutedRti,
        $length = A._Utils_arrayLength(namedArray),
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        $name = A._Utils_asString(A._Utils_arrayAt(namedArray, i));
        isRequired = A._Utils_asBool(A._Utils_arrayAt(namedArray, i + 1));
        rti = A._Utils_asRti(A._Utils_arrayAt(namedArray, i + 2));
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (A.boolConversionCheck(A._Utils_isNotIdentical(substitutedRti, rti)))
          changed = true;
        result.splice(i, 3, $name, isRequired, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = A._FunctionParameters__getRequiredPositional(functionParameters),
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = A._FunctionParameters__getOptionalPositional(functionParameters),
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = A._FunctionParameters__getNamed(functionParameters),
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (A.boolConversionCheck(A._Utils_isIdentical(substitutedRequiredPositional, requiredPositional)) && A.boolConversionCheck(A._Utils_isIdentical(substitutedOptionalPositional, optionalPositional)) && A.boolConversionCheck(A._Utils_isIdentical(substitutedNamed, named)))
        return functionParameters;
      result = A._FunctionParameters_allocate();
      A._FunctionParameters__setRequiredPositional(result, substitutedRequiredPositional);
      A._FunctionParameters__setOptionalPositional(result, substitutedOptionalPositional);
      A._FunctionParameters__setNamed(result, substitutedNamed);
      return result;
    },
    _isDartObject(object) {
      return A._Utils_instanceOf(object, A.Object);
    },
    _isClosure(object) {
      return A._Utils_instanceOf(object, A.Closure);
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(A._Utils_asInt(signature));
        return A._Utils_asRti(closure.$signature());
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.boolConversionCheck(A.Rti__isUnionOfFunctionType(testRti)))
        if (A.boolConversionCheck(A._isClosure(object))) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (A.boolConversionCheck(A._isDartObject(object)))
        return A._instanceType(object);
      if (A.boolConversionCheck(A._Utils_isArray(object)))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return A._Utils_asRti(defaultRti);
      if (rti.constructor !== defaultRti.constructor)
        return A._Utils_asRti(defaultRti);
      return A._Utils_asRti(rti);
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? A._Utils_asRti(rti) : A._instanceTypeFromConstructor(object);
    },
    instanceTypeName(object) {
      return A._rtiToString(A.instanceType(object), null);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = A.boolConversionCheck(A._isClosure(instance)) ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(A._theUniverse(), effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    _instanceFunctionType(object) {
      return A.boolConversionCheck(A._isClosure(object)) ? A.closureFunctionType(object) : null;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = A._Utils_arrayAt(table, index);
      if (A.boolConversionCheck(A._Utils_isString(type))) {
        rti = A.findType(A._Utils_asString(type));
        A._Utils_arraySetAt(table, index, rti);
        return rti;
      }
      return A._Utils_asRti(type);
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    _getRuntimeTypeOfArrayAsRti(array) {
      return A._arrayInstanceType(array);
    },
    getRuntimeTypeOfInterceptorNotArray(interceptor, object) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(interceptor));
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return A.getRtiForRecord(object);
      functionRti = A._instanceFunctionType(object);
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return A._Utils_as_Type(J.get$runtimeType$(object))._rti;
      if (A.boolConversionCheck(A._Utils_isArray(object)))
        return A._getRuntimeTypeOfArrayAsRti(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = A.Rti__getCachedRuntimeType(rti);
      return t1 == null ? A._createAndCacheRuntimeType(rti) : t1;
    },
    _createAndCacheRuntimeType(rti) {
      var type = A._createRuntimeType(rti);
      A.Rti__setCachedRuntimeType(rti, type);
      return type;
    },
    _createRuntimeType(rti) {
      var starErasedRti, t1,
        recipe = A.Rti__getCanonicalRecipe(rti),
        starErasedRecipe = A.Rti_getLegacyErasedRecipe(rti);
      if (starErasedRecipe === recipe)
        return A._Type$(rti);
      starErasedRti = A._Universe_eval(A._theUniverse(), starErasedRecipe, true);
      t1 = A.Rti__getCachedRuntimeType(starErasedRti);
      return t1 == null ? A._createAndCacheRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._rtiEval(A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i)
        bindings = A._rtiBind(bindings, A._structuralTypeOf(values[i]));
      return A._rtiEval(bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A.findType(recipe));
    },
    _Type$(_rti) {
      var t1 = new A._Type(_rti);
      t1._Type$1(_rti);
      return t1;
    },
    _installSpecializedIsTest(object) {
      var unstarred, unstarredKind, isFn, $name,
        testRti = A._Utils_asRti(this);
      if (A.boolConversionCheck(A.isObjectType(testRti)))
        return A._finishIsFn(testRti, object, A._isObject);
      if (A.boolConversionCheck(A.isDefinitelyTopType(testRti)))
        return A._finishIsFn(testRti, object, A._isTop);
      if (A.boolConversionCheck(J.$eq$(A.Rti__getKind(testRti), 7)))
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (A.boolConversionCheck(J.$eq$(A.Rti__getKind(testRti), 1)))
        return A._finishIsFn(testRti, object, A._isNever);
      unstarred = A.Rti__unstar(testRti);
      unstarredKind = A.Rti__getKind(unstarred);
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      isFn = A._simpleSpecializedIsTest(unstarred);
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        $name = A.Rti__getInterfaceName(unstarred);
        if (A.Rti__getInterfaceTypeArguments(unstarred).every(A.isDefinitelyTopType)) {
          A.Rti__setSpecializedTestResource(testRti, "$is" + $name);
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11)
        return A._finishIsFn(testRti, object, A._recordSpecializedIsTest(unstarred));
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      A.Rti__setIsTestFunction(testRti, isFn);
      return A.Rti__isCheck(testRti, object);
    },
    _simpleSpecializedIsTest(testRti) {
      var isFn;
      if (A.boolConversionCheck(A._Utils_isIdentical(testRti, type$.int)))
        isFn = A._isInt;
      else if (A.boolConversionCheck(A._Utils_isIdentical(testRti, type$.double)) || A.boolConversionCheck(A._Utils_isIdentical(testRti, type$.num)))
        isFn = A._isNum;
      else if (A.boolConversionCheck(A._Utils_isIdentical(testRti, type$.String)))
        isFn = A._isString;
      else
        isFn = A.boolConversionCheck(A._Utils_isIdentical(testRti, type$.bool)) ? A._isBool : null;
      return isFn;
    },
    _recordSpecializedIsTest(testRti) {
      var predicate = A.createRecordTypePredicate(A.Rti__getRecordPartialShapeTag(testRti), A.Rti__getRecordFields(testRti));
      return predicate == null ? A._isNever : predicate;
    },
    _installSpecializedAsCheck(object) {
      var t1,
        testRti = A._Utils_asRti(this),
        asFn = A._generalAsCheckImplementation;
      if (A.boolConversionCheck(A.isDefinitelyTopType(testRti)))
        asFn = A._asTop;
      else if (A.boolConversionCheck(A.isObjectType(testRti)))
        asFn = A._asObject;
      else {
        t1 = A.boolConversionCheck(A.isNullable(testRti));
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      A.Rti__setAsCheckFunction(testRti, asFn);
      return A.Rti__asCheck(testRti, object);
    },
    _nullIs(testRti) {
      var kind = A.Rti__getKind(testRti),
        t1 = true;
      if (!A.boolConversionCheck(A.isSoundTopType(testRti)))
        if (!A.boolConversionCheck(A.isLegacyObjectType(testRti)))
          if (!A.boolConversionCheck(A._Utils_isIdentical(testRti, type$.legacy_Never)))
            if (kind !== 7)
              if (!(kind === 6 && A.boolConversionCheck(A._nullIs(A.Rti__getStarArgument(testRti)))))
                t1 = kind === 8 && A.boolConversionCheck(A._nullIs(A.Rti__getFutureOrArgument(testRti))) || A.boolConversionCheck(A.isNullType(testRti));
      return t1;
    },
    _generalIsTestImplementation(object) {
      var objectRti,
        testRti = A._Utils_asRti(this);
      if (object == null)
        return A._nullIs(testRti);
      objectRti = A.instanceOrFunctionType(object, testRti);
      return A.isSubtype(A._theUniverse(), objectRti, testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return A.Rti__isCheck(A.Rti__getQuestionArgument(A._Utils_asRti(this)), object);
    },
    _isTestViaProperty(object) {
      var tag,
        testRti = A._Utils_asRti(this);
      if (object == null)
        return A._nullIs(testRti);
      tag = A.Rti__getSpecializedTestResource(testRti);
      if (A.boolConversionCheck(A._isDartObject(object)))
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag,
        testRti = A._Utils_asRti(this);
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (A.boolConversionCheck(A._Utils_isArray(object)))
        return true;
      tag = A.Rti__getSpecializedTestResource(testRti);
      if (A.boolConversionCheck(A._isDartObject(object)))
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = A._Utils_asRti(this);
      if (object == null) {
        if (A.boolConversionCheck(A.isNullable(testRti)))
          return object;
      } else if (A.boolConversionCheck(A.Rti__isCheck(testRti, object)))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = A._Utils_asRti(this);
      if (object == null)
        return object;
      else if (A.boolConversionCheck(A.Rti__isCheck(testRti, object)))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheckError(object, testRti) {
      return A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null)));
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._failedAsCheckError(object, testRti));
    },
    checkTypeBound(type, bound, variable, methodName) {
      if (A.boolConversionCheck(A.isSubtype(A._theUniverse(), type, bound)))
        return type;
      throw A.wrapException(A._TypeError$fromMessage("The type argument '" + A.S(A._rtiToString(type, null)) + "' is not a subtype of the type variable bound '" + A.S(A._rtiToString(bound, null)) + "' of type variable '" + variable + "' in '" + methodName + "'."));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return A._TypeError$fromMessage(A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var unstarred = A.Rti__unstar(A._Utils_asRti(this));
      return A.boolConversionCheck(A.Rti__isCheck(A.Rti__getFutureOrArgument(unstarred), object)) || A.boolConversionCheck(A.Rti__isCheck(A.Rti__getFutureFromFutureOr(A._theUniverse(), unstarred), object));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (A.boolConversionCheck(A._isNum(object)))
        return A._Utils_asDouble(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (A.boolConversionCheck(A._isNum(object)))
        return A._Utils_asDouble(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (A.boolConversionCheck(A._isNum(object)))
        return A._Utils_asDouble(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (A.boolConversionCheck(A._isInt(object)))
        return A._Utils_asInt(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (A.boolConversionCheck(A._isInt(object)))
        return A._Utils_asInt(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (A.boolConversionCheck(A._isInt(object)))
        return A._Utils_asInt(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (A.boolConversionCheck(A._isNum(object)))
        return A._Utils_asNum(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (A.boolConversionCheck(A._isNum(object)))
        return A._Utils_asNum(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (A.boolConversionCheck(A._isNum(object)))
        return A._Utils_asNum(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (A.boolConversionCheck(A._isString(object)))
        return A._Utils_asString(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (A.boolConversionCheck(A._isString(object)))
        return A._Utils_asString(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (A.boolConversionCheck(A._isString(object)))
        return A._Utils_asString(object);
      if (object == null)
        return A._Utils_asNull(object);
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var t1, s = "", sep = "", i = 0;
      while (true) {
        t1 = A._Utils_arrayLength(array);
        if (typeof t1 !== "number")
          return A.iae(t1);
        if (!(i < t1))
          break;
        s = B.JSString_methods.$add(s, B.JSString_methods.$add(sep, A._rtiToString(A._Utils_asRti(A._Utils_arrayAt(array, i)), genericContext)));
        ++i;
        sep = ", ";
      }
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, t1, namesIndex, s, comma, i,
        partialShape = A.Rti__getRecordPartialShapeTag(recordType),
        fields = A.Rti__getRecordFields(recordType);
      if ("" === partialShape)
        return J.$add$ns(B.JSString_methods.$add("(", A._rtiArrayToString(fields, genericContext)), ")");
      fieldCount = A._Utils_arrayLength(fields);
      names = A._Utils_stringSplit(partialShape, ",");
      t1 = A._Utils_arrayLength(names);
      if (typeof t1 !== "number")
        return t1.$sub();
      namesIndex = t1 - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s = B.JSString_methods.$add(s, A._rtiToString(A._Utils_asRti(A._Utils_arrayAt(fields, i)), genericContext));
        if (namesIndex >= 0)
          s = B.JSString_methods.$add(s, B.JSString_methods.$add(" ", A._Utils_asString(A._Utils_arrayAt(names, namesIndex))));
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, t1, offset, i, typeParametersText, typeSep, t2, boundRti, returnType, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = A._Utils_arrayLength(bounds);
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = J.get$length$asx(genericContext);
        t1 = J.getInterceptor$asx(genericContext);
        offset = t1.get$length(genericContext);
        for (i = boundsLength; i > 0; --i)
          t1.add$1(genericContext, "T" + (offset + i));
        for (typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t2 = t1.get$length(genericContext);
          if (typeof t2 !== "number")
            return t2.$sub();
          typeParametersText = typeParametersText + typeSep + t1.$index(genericContext, t2 - 1 - i);
          boundRti = A._Utils_asRti(A._Utils_arrayAt(bounds, i));
          if (!A.boolConversionCheck(A.isDefinitelyTopType(boundRti)))
            typeParametersText = B.JSString_methods.$add(typeParametersText, B.JSString_methods.$add(" extends ", A._rtiToString(boundRti, genericContext)));
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      returnType = A.Rti__getReturnType(functionType);
      parameters = A.Rti__getFunctionParameters(functionType);
      requiredPositional = A._FunctionParameters__getRequiredPositional(parameters);
      requiredPositionalLength = A._Utils_arrayLength(requiredPositional);
      optionalPositional = A._FunctionParameters__getOptionalPositional(parameters);
      optionalPositionalLength = A._Utils_arrayLength(optionalPositional);
      named = A._FunctionParameters__getNamed(parameters);
      namedLength = A._Utils_arrayLength(named);
      returnTypeText = A._rtiToString(returnType, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText = B.JSString_methods.$add(argumentsText, B.JSString_methods.$add(sep, A._rtiToString(A._Utils_asRti(A._Utils_arrayAt(requiredPositional, i)), genericContext)));
      if (optionalPositionalLength > 0) {
        argumentsText = B.JSString_methods.$add(argumentsText, sep + "[");
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText = B.JSString_methods.$add(argumentsText, B.JSString_methods.$add(sep, A._rtiToString(A._Utils_asRti(A._Utils_arrayAt(optionalPositional, i)), genericContext)));
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText = B.JSString_methods.$add(argumentsText, sep + "{");
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (A.boolConversionCheck(A._Utils_asBool(A._Utils_arrayAt(named, i + 1))))
            argumentsText += "required ";
          argumentsText = B.JSString_methods.$add(argumentsText, J.$add$ns(J.$add$ns(A._rtiToString(A._Utils_asRti(A._Utils_arrayAt(named, i + 2)), genericContext), " "), A._Utils_asString(A._Utils_arrayAt(named, i))));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, index, t1, t2,
        kind = A.Rti__getKind(rti);
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6)
        return A._rtiToString(A.Rti__getStarArgument(rti), genericContext);
      if (kind === 7) {
        questionArgument = A.Rti__getQuestionArgument(rti);
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = A.Rti__getKind(questionArgument);
        return (argumentKind === 12 || argumentKind === 13 ? J.$add$ns("(" + s, ")") : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A.S(A._rtiToString(A.Rti__getFutureOrArgument(rti), genericContext)) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(A.Rti__getInterfaceName(rti));
        $arguments = A.Rti__getInterfaceTypeArguments(rti);
        return $arguments.length > 0 ? B.JSString_methods.$add($name, J.$add$ns(B.JSString_methods.$add("<", A._rtiArrayToString($arguments, genericContext)), ">")) : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(A.Rti__getGenericFunctionBase(rti), genericContext, A.Rti__getGenericFunctionBounds(rti));
      if (kind === 14) {
        genericContext.toString;
        index = A.Rti__getGenericFunctionParameterIndex(rti);
        t1 = J.getInterceptor$asx(genericContext);
        t2 = t1.get$length(genericContext);
        if (typeof t2 !== "number")
          return t2.$sub();
        return t1.$index(genericContext, t2 - 1 - index);
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = A.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_evalCache(universe) {
      return universe.eC;
    },
    _Universe_typeRules(universe) {
      return universe.tR;
    },
    _Universe_erasedTypes(universe) {
      return universe.eT;
    },
    _Universe__findRule(universe, targetType) {
      return A._Universe_typeRules(universe)[targetType];
    },
    _Universe_findRule(universe, targetType) {
      var rule = A._Universe__findRule(universe, targetType);
      for (; A.boolConversionCheck(A._Utils_isString(rule));)
        rule = A._Universe__findRule(universe, A._Utils_asString(rule));
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = A._Universe_erasedTypes(universe),
        probe = metadata[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (A.boolConversionCheck(A._Utils_isNum(probe))) {
        $length = A._Utils_asInt(probe);
        erased = A._Universe__lookupErasedRti(universe);
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          A._Utils_arraySetAt($arguments, i, erased);
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return A._Utils_asRti(probe);
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(A._Universe_typeRules(universe), rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(A._Universe_erasedTypes(universe), types);
    },
    _Universe_sharedEmptyArray(universe) {
      return universe.sEA;
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        cache = A._Universe_evalCache(universe),
        probe = A._Utils_mapGet(cache, recipe);
      if (probe != null)
        return A._Utils_asRti(probe);
      rti = A._Universe__parseRecipe(universe, null, recipe, normalize);
      A._Utils_mapSet(cache, recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = A.Rti__getEvalCache(environment);
      if (cache == null) {
        cache = new Map();
        A.Rti__setEvalCache(environment, cache);
      }
      probe = A._Utils_mapGet(cache, recipe);
      if (probe != null)
        return A._Utils_asRti(probe);
      rti = A._Universe__parseRecipe(universe, environment, recipe, true);
      A._Utils_mapSet(cache, recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = A.Rti__getBindCache(environment);
      if (cache == null) {
        cache = new Map();
        A.Rti__setBindCache(environment, cache);
      }
      argumentsRecipe = A.Rti__getCanonicalRecipe(argumentsRti);
      probe = A._Utils_mapGet(cache, argumentsRecipe);
      if (probe != null)
        return A._Utils_asRti(probe);
      rti = A._Universe__lookupBindingRti(universe, environment, A.boolConversionCheck(J.$eq$(A.Rti__getKind(argumentsRti), 10)) ? A.Rti__getBindingArguments(argumentsRti) : [argumentsRti]);
      A._Utils_mapSet(cache, argumentsRecipe, rti);
      return rti;
    },
    _Universe_evalTypeVariable(universe, environment, $name) {
      var recipe;
      if (A.Rti__getKind(environment) === 10)
        environment = A.Rti__getBindingBase(environment);
      recipe = A.TypeRule_lookupTypeVariable(A._Universe_findRule(universe, A.Rti__getInterfaceName(environment)), $name);
      if (recipe == null)
        throw A.wrapException('No "' + $name + '" in "' + A.S(A.Rti__getCanonicalRecipe(environment)) + '"');
      return A._Universe_evalInEnvironment(universe, environment, recipe);
    },
    _Universe__parseRecipe(universe, environment, recipe, normalize) {
      return A._Parser_parse(A._Parser_create(universe, environment, recipe, normalize));
    },
    _Universe__installTypeTests(universe, rti) {
      A.Rti__setAsCheckFunction(rti, A._installSpecializedAsCheck);
      A.Rti__setIsTestFunction(rti, A._installSpecializedIsTest);
      return rti;
    },
    _Universe__installRti(universe, key, rti) {
      A._Utils_mapSet(A._Universe_evalCache(universe), key, rti);
      return rti;
    },
    _Universe__recipeJoin(s1, s2) {
      return s1 + s2;
    },
    _Universe__recipeJoin3(s1, s2, s3) {
      return s1 + (s2 + s3);
    },
    _Universe__recipeJoin4(s1, s2, s3, s4) {
      return s1 + (s2 + s3 + s4);
    },
    _Universe__recipeJoin5(s1, s2, s3, s4, s5) {
      return s1 + (s2 + s3 + s4 + s5);
    },
    _Universe__canonicalRecipeOfErased() {
      return "#";
    },
    _Universe__canonicalRecipeOfDynamic() {
      return "@";
    },
    _Universe__canonicalRecipeOfVoid() {
      return "~";
    },
    _Universe__canonicalRecipeOfNever() {
      return A._Universe__recipeJoin("0", "&");
    },
    _Universe__canonicalRecipeOfAny() {
      return A._Universe__recipeJoin("1", "&");
    },
    _Universe__canonicalRecipeOfStar(baseType) {
      return A._Universe__recipeJoin(A.Rti__getCanonicalRecipe(baseType), "*");
    },
    _Universe__canonicalRecipeOfQuestion(baseType) {
      return A._Universe__recipeJoin(A.Rti__getCanonicalRecipe(baseType), "?");
    },
    _Universe__canonicalRecipeOfFutureOr(baseType) {
      return A._Universe__recipeJoin(A.Rti__getCanonicalRecipe(baseType), "/");
    },
    _Universe__canonicalRecipeOfGenericFunctionParameter(index) {
      return A._Universe__recipeJoin(A.S(index), "^");
    },
    _Universe__lookupErasedRti(universe) {
      return A._Universe__lookupTerminalRti(universe, 5, A._Universe__canonicalRecipeOfErased());
    },
    _Universe__lookupDynamicRti(universe) {
      return A._Universe__lookupTerminalRti(universe, 2, A._Universe__canonicalRecipeOfDynamic());
    },
    _Universe__lookupVoidRti(universe) {
      return A._Universe__lookupTerminalRti(universe, 3, A._Universe__canonicalRecipeOfVoid());
    },
    _Universe__lookupNeverRti(universe) {
      return A._Universe__lookupTerminalRti(universe, 1, A._Universe__canonicalRecipeOfNever());
    },
    _Universe__lookupAnyRti(universe) {
      return A._Universe__lookupTerminalRti(universe, 4, A._Universe__canonicalRecipeOfAny());
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createTerminalRti(universe, kind, key));
    },
    _Universe__createTerminalRti(universe, kind, key) {
      var rti = A.Rti_allocate();
      A.Rti__setKind(rti, kind);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var key = A._Universe__canonicalRecipeOfStar(baseType),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createStarRti(universe, baseType, key, normalize));
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, rti;
      if (normalize) {
        baseKind = A.Rti__getKind(baseType);
        if (A.boolConversionCheck(A.isSoundTopType(baseType)) || A.boolConversionCheck(A.isNullType(baseType)) || baseKind === 7 || baseKind === 6)
          return baseType;
      }
      rti = A.Rti_allocate();
      A.Rti__setKind(rti, 6);
      A.Rti__setPrimary(rti, baseType);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var key = A._Universe__canonicalRecipeOfQuestion(baseType),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createQuestionRti(universe, baseType, key, normalize));
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = A.Rti__getKind(baseType);
        t1 = true;
        if (!A.boolConversionCheck(A.isSoundTopType(baseType)))
          if (!A.boolConversionCheck(A.isNullType(baseType)))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.boolConversionCheck(A.isNullable(A.Rti__getFutureOrArgument(baseType)));
        if (t1)
          return baseType;
        else if (baseKind === 1 || A.boolConversionCheck(A._Utils_isIdentical(baseType, type$.legacy_Never)))
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = A.Rti__getStarArgument(baseType);
          if (A.Rti__getKind(starArgument) === 8 && A.boolConversionCheck(A.isNullable(A.Rti__getFutureOrArgument(starArgument))))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = A.Rti_allocate();
      A.Rti__setKind(rti, 7);
      A.Rti__setPrimary(rti, baseType);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var key = A._Universe__canonicalRecipeOfFutureOr(baseType),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createFutureOrRti(universe, baseType, key, normalize));
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var baseKind, rti;
      if (normalize) {
        baseKind = A.Rti__getKind(baseType);
        if (A.boolConversionCheck(A.isSoundTopType(baseType)) || A.boolConversionCheck(A.isObjectType(baseType)) || A.boolConversionCheck(A.isLegacyObjectType(baseType)))
          return baseType;
        else if (baseKind === 1)
          return A._Universe__lookupFutureRti(universe, baseType);
        else if (A.boolConversionCheck(A.isNullType(baseType)))
          return type$.nullable_Future_Null;
      }
      rti = A.Rti_allocate();
      A.Rti__setKind(rti, 8);
      A.Rti__setPrimary(rti, baseType);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var key = A._Universe__canonicalRecipeOfGenericFunctionParameter(index),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createGenericFunctionParameterRti(universe, index, key));
    },
    _Universe__createGenericFunctionParameterRti(universe, index, key) {
      var rti = A.Rti_allocate();
      A.Rti__setKind(rti, 14);
      A.Rti__setPrimary(rti, index);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = A._Utils_arrayLength($arguments);
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s = A._Universe__recipeJoin3(s, sep, A.Rti__getCanonicalRecipe(A._Utils_asRti(A._Utils_arrayAt($arguments, i))));
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, $name, nameSep,
        $length = A._Utils_arrayLength($arguments);
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        $name = A._Utils_asString(A._Utils_arrayAt($arguments, i));
        nameSep = A._Utils_asBool(A._Utils_arrayAt($arguments, i + 1)) ? "!" : ":";
        s = A._Universe__recipeJoin5(s, sep, $name, nameSep, A.Rti__getCanonicalRecipe(A._Utils_asRti(A._Utils_arrayAt($arguments, i + 2))));
      }
      return s;
    },
    _Universe__canonicalRecipeOfInterface($name, $arguments) {
      var s = A._Utils_asString($name);
      return A._Utils_arrayLength($arguments) > 0 ? A._Universe__recipeJoin4(s, "<", A._Universe__canonicalRecipeJoin($arguments), ">") : s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var key = A._Universe__canonicalRecipeOfInterface($name, $arguments),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createInterfaceRti(universe, $name, $arguments, key));
    },
    _Universe__createInterfaceRti(universe, $name, typeArguments, key) {
      var rti = A.Rti_allocate();
      A.Rti__setKind(rti, 9);
      A.Rti__setPrimary(rti, $name);
      A.Rti__setRest(rti, typeArguments);
      if (A._Utils_arrayLength(typeArguments) > 0)
        A.Rti__setPrecomputed1(rti, A._Utils_arrayAt(typeArguments, 0));
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureRti(universe, base) {
      return A._Universe__lookupInterfaceRti(universe, "Future", [base]);
    },
    _Universe__canonicalRecipeOfBinding(base, $arguments) {
      return A._Universe__recipeJoin5(A.Rti__getCanonicalRecipe(base), ";", "<", A._Universe__canonicalRecipeJoin($arguments), ">");
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe;
      if (A.boolConversionCheck(J.$eq$(A.Rti__getKind(base), 10))) {
        newBase = A.Rti__getBindingBase(base);
        newArguments = A._Utils_arrayConcat(A.Rti__getBindingArguments(base), $arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = A._Universe__canonicalRecipeOfBinding(newBase, newArguments);
      probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createBindingRti(universe, newBase, newArguments, key));
    },
    _Universe__createBindingRti(universe, base, $arguments, key) {
      var rti = A.Rti_allocate();
      A.Rti__setKind(rti, 10);
      A.Rti__setPrimary(rti, base);
      A.Rti__setRest(rti, $arguments);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeOfRecord(partialShapeTag, fields) {
      return A._Universe__recipeJoin5("+", partialShapeTag, "(", A._Universe__canonicalRecipeJoin(fields), ")");
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var key = A._Universe__canonicalRecipeOfRecord(partialShapeTag, fields),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createRecordRti(universe, partialShapeTag, fields, key));
    },
    _Universe__createRecordRti(universe, partialShapeTag, fields, key) {
      var rti = A.Rti_allocate();
      A.Rti__setKind(rti, 11);
      A.Rti__setPrimary(rti, partialShapeTag);
      A.Rti__setRest(rti, fields);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeOfFunction(returnType, parameters) {
      return A._Universe__recipeJoin(A.Rti__getCanonicalRecipe(returnType), A._Universe__canonicalRecipeOfFunctionParameters(parameters));
    },
    _Universe__canonicalRecipeOfFunctionParameters(parameters) {
      var sep,
        requiredPositional = A._FunctionParameters__getRequiredPositional(parameters),
        requiredPositionalLength = A._Utils_arrayLength(requiredPositional),
        optionalPositional = A._FunctionParameters__getOptionalPositional(parameters),
        optionalPositionalLength = A._Utils_arrayLength(optionalPositional),
        named = A._FunctionParameters__getNamed(parameters),
        namedLength = A._Utils_arrayLength(named),
        recipe = A._Universe__recipeJoin("(", A._Universe__canonicalRecipeJoin(requiredPositional));
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe = A._Universe__recipeJoin5(recipe, sep, "[", A._Universe__canonicalRecipeJoin(optionalPositional), "]");
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe = A._Universe__recipeJoin5(recipe, sep, "{", A._Universe__canonicalRecipeJoinNamed(named), "}");
      }
      return A._Universe__recipeJoin(recipe, ")");
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var key = A._Universe__canonicalRecipeOfFunction(returnType, parameters),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createFunctionRti(universe, returnType, parameters, key));
    },
    _Universe__createFunctionRti(universe, returnType, parameters, key) {
      var rti = A.Rti_allocate();
      A.Rti__setKind(rti, 12);
      A.Rti__setPrimary(rti, returnType);
      A.Rti__setRest(rti, parameters);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeOfGenericFunction(baseFunctionType, bounds) {
      return A._Universe__recipeJoin4(A.Rti__getCanonicalRecipe(baseFunctionType), "<", A._Universe__canonicalRecipeJoin(bounds), ">");
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var key = A._Universe__canonicalRecipeOfGenericFunction(baseFunctionType, bounds),
        probe = A._Utils_mapGet(A._Universe_evalCache(universe), key);
      if (probe != null)
        return A._Utils_asRti(probe);
      return A._Universe__installRti(universe, key, A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize));
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = A._Utils_arrayLength(bounds);
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = A._Utils_asRti(A._Utils_arrayAt(bounds, i));
          if (A.boolConversionCheck(J.$eq$(A.Rti__getKind(bound), 1))) {
            A._Utils_arraySetAt(typeArguments, i, bound);
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, A._Utils_isNotIdentical(bounds, substitutedBounds));
        }
      }
      rti = A.Rti_allocate();
      A.Rti__setKind(rti, 13);
      A.Rti__setPrimary(rti, baseFunctionType);
      A.Rti__setRest(rti, bounds);
      A.Rti__setCanonicalRecipe(rti, key);
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_universe(parser) {
      return parser.u;
    },
    _Parser_environment(parser) {
      return parser.e;
    },
    _Parser_recipe(parser) {
      return parser.r;
    },
    _Parser_stack(parser) {
      return parser.s;
    },
    _Parser_position(parser) {
      return parser.p;
    },
    _Parser_setPosition(parser, p) {
      parser.p = p;
    },
    _Parser_normalize(parser) {
      return parser.n;
    },
    _Parser_charCodeAt(s, i) {
      return s.charCodeAt(i);
    },
    _Parser_push(stack, value) {
      stack.push(value);
    },
    _Parser_pop(stack) {
      return stack.pop();
    },
    _Parser_parse(parser) {
      var t1, i, ch, u, item,
        source = A._Parser_recipe(parser),
        stack = A._Parser_stack(parser);
      for (t1 = source.length, i = 0; i < t1;) {
        ch = A._Parser_charCodeAt(source, i);
        if (A.boolConversionCheck(A.Recipe_isDigit(ch)))
          i = A._Parser_handleDigit(i + 1, ch, source, stack);
        else if (A.boolConversionCheck(A.Recipe_isIdentifierStart(ch)))
          i = A._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              A._Parser_push(stack, false);
              break;
            case 33:
              A._Parser_push(stack, true);
              break;
            case 59:
              A._Parser_push(stack, A._Parser_toType(A._Parser_universe(parser), A._Parser_environment(parser), A._Parser_pop(stack)));
              break;
            case 94:
              A._Parser_push(stack, A._Parser_toGenericFunctionParameter(A._Parser_universe(parser), A._Parser_pop(stack)));
              break;
            case 35:
              A._Parser_push(stack, A._Universe__lookupErasedRti(A._Parser_universe(parser)));
              break;
            case 64:
              A._Parser_push(stack, A._Universe__lookupDynamicRti(A._Parser_universe(parser)));
              break;
            case 126:
              A._Parser_push(stack, A._Universe__lookupVoidRti(A._Parser_universe(parser)));
              break;
            case 60:
              A._Parser_pushStackFrame(parser, stack);
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, stack);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, stack);
              break;
            case 42:
              u = A._Parser_universe(parser);
              A._Parser_push(stack, A._Universe__lookupStarRti(u, A._Parser_toType(u, A._Parser_environment(parser), A._Parser_pop(stack)), A._Parser_normalize(parser)));
              break;
            case 63:
              u = A._Parser_universe(parser);
              A._Parser_push(stack, A._Universe__lookupQuestionRti(u, A._Parser_toType(u, A._Parser_environment(parser), A._Parser_pop(stack)), A._Parser_normalize(parser)));
              break;
            case 47:
              u = A._Parser_universe(parser);
              A._Parser_push(stack, A._Universe__lookupFutureOrRti(u, A._Parser_toType(u, A._Parser_environment(parser), A._Parser_pop(stack)), A._Parser_normalize(parser)));
              break;
            case 40:
              A._Parser_push(stack, -3);
              A._Parser_pushStackFrame(parser, stack);
              break;
            case 41:
              A._Parser_handleArguments(parser, stack);
              break;
            case 91:
              A._Parser_pushStackFrame(parser, stack);
              break;
            case 93:
              A._Parser_handleOptionalGroup(parser, stack);
              break;
            case 123:
              A._Parser_pushStackFrame(parser, stack);
              break;
            case 125:
              A._Parser_handleNamedGroup(parser, stack);
              break;
            case 43:
              i = A._Parser_handleStartRecord(parser, i, source, stack);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = A._Parser_pop(stack);
      return A._Parser_toType(A._Parser_universe(parser), A._Parser_environment(parser), item);
    },
    _Parser_pushStackFrame(parser, stack) {
      A._Parser_push(stack, A._Parser_position(parser));
      A._Parser_setPosition(parser, A._Utils_arrayLength(stack));
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch, t2,
        value = A.Recipe_digitValue(digit);
      for (t1 = source.length; i < t1; ++i) {
        ch = A._Parser_charCodeAt(source, i);
        if (!A.boolConversionCheck(A.Recipe_isDigit(ch)))
          break;
        t2 = A.Recipe_digitValue(ch);
        if (typeof t2 !== "number")
          return A.iae(t2);
        value = value * 10 + t2;
      }
      A._Parser_push(stack, value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, string, t2,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = A._Parser_charCodeAt(source, i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else if (!(A.boolConversionCheck(A.Recipe_isIdentifierStart(ch)) || A.boolConversionCheck(A.Recipe_isDigit(ch))))
          break;
      }
      string = A._Utils_substring(source, start, i);
      if (hasPeriod) {
        t1 = A._Parser_universe(parser);
        t2 = A._Parser_environment(parser);
        t2.toString;
        A._Parser_push(stack, A._Universe_evalTypeVariable(t1, t2, string));
      } else
        A._Parser_push(stack, string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        universe = A._Parser_universe(parser),
        $arguments = A._Parser_collectArray(parser, stack),
        head = A._Parser_pop(stack);
      if (A.boolConversionCheck(A._Utils_isString(head)))
        A._Parser_push(stack, A._Universe__lookupInterfaceRti(universe, A._Utils_asString(head), $arguments));
      else {
        base = A._Parser_toType(universe, A._Parser_environment(parser), head);
        switch (A.Rti__getKind(base)) {
          case 12:
            A._Parser_push(stack, A._Universe__lookupGenericFunctionRti(universe, base, $arguments, A._Parser_normalize(parser)));
            break;
          default:
            A._Parser_push(stack, A._Universe__lookupBindingRti(universe, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        universe = A._Parser_universe(parser),
        head = A._Parser_pop(stack),
        optionalPositional = null, named = null;
      if (A.boolConversionCheck(A._Utils_isNum(head)))
        switch (A._Utils_asInt(head)) {
          case -1:
            optionalPositional = A._Parser_pop(stack);
            break;
          case -2:
            named = A._Parser_pop(stack);
            break;
          default:
            A._Parser_push(stack, head);
            break;
        }
      else
        A._Parser_push(stack, head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = A._Parser_pop(stack);
      switch (head) {
        case -3:
          head = A._Parser_pop(stack);
          if (optionalPositional == null)
            optionalPositional = A._Universe_sharedEmptyArray(universe);
          if (named == null)
            named = A._Universe_sharedEmptyArray(universe);
          returnType = A._Parser_toType(universe, A._Parser_environment(parser), head);
          parameters = A._FunctionParameters_allocate();
          A._FunctionParameters__setRequiredPositional(parameters, requiredPositional);
          A._FunctionParameters__setOptionalPositional(parameters, optionalPositional);
          A._FunctionParameters__setNamed(parameters, named);
          A._Parser_push(stack, A._Universe__lookupFunctionRti(universe, returnType, parameters));
          return;
        case -4:
          A._Parser_push(stack, A._Universe__lookupRecordRti(universe, A._Utils_asString(A._Parser_pop(stack)), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleOptionalGroup(parser, stack) {
      A._Parser_push(stack, A._Parser_collectArray(parser, stack));
      A._Parser_push(stack, -1);
    },
    _Parser_handleNamedGroup(parser, stack) {
      A._Parser_push(stack, A._Parser_collectNamed(parser, stack));
      A._Parser_push(stack, -2);
    },
    _Parser_handleStartRecord(parser, start, source, stack) {
      var end = A._Utils_stringIndexOf(source, "(", start);
      A._Parser_push(stack, A._Utils_substring(source, start, end));
      A._Parser_push(stack, -4);
      A._Parser_pushStackFrame(parser, stack);
      return end + 1;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = A._Parser_pop(stack);
      if (0 === $top) {
        A._Parser_push(stack, A._Universe__lookupNeverRti(A._Parser_universe(parser)));
        return;
      }
      if (1 === $top) {
        A._Parser_push(stack, A._Universe__lookupAnyRti(A._Parser_universe(parser)));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = A._Utils_arraySplice(stack, A._Parser_position(parser));
      A._Parser_toTypes(A._Parser_universe(parser), A._Parser_environment(parser), array);
      A._Parser_setPosition(parser, A._Utils_asInt(A._Parser_pop(stack)));
      return array;
    },
    _Parser_collectNamed(parser, stack) {
      var array = A._Utils_arraySplice(stack, A._Parser_position(parser));
      A._Parser_toTypesNamed(A._Parser_universe(parser), A._Parser_environment(parser), array);
      A._Parser_setPosition(parser, A._Utils_asInt(A._Parser_pop(stack)));
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (A.boolConversionCheck(A._Utils_isString(item)))
        return A._Universe__lookupInterfaceRti(universe, A._Utils_asString(item), A._Universe_sharedEmptyArray(universe));
      else if (A.boolConversionCheck(A._Utils_isNum(item))) {
        environment.toString;
        return A._Parser_indexToType(universe, environment, A._Utils_asInt(item));
      } else
        return A._Utils_asRti(item);
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = A._Utils_arrayLength(items);
      for (i = 0; i < $length; ++i)
        A._Utils_arraySetAt(items, i, A._Parser_toType(universe, environment, A._Utils_arrayAt(items, i)));
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = A._Utils_arrayLength(items);
      for (i = 2; i < $length; i += 3)
        A._Utils_arraySetAt(items, i, A._Parser_toType(universe, environment, A._Utils_arrayAt(items, i)));
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = A.Rti__getKind(environment);
      if (kind === 10) {
        if (index === 0)
          return A.Rti__getBindingBase(environment);
        typeArguments = A.Rti__getBindingArguments(environment);
        len = A._Utils_arrayLength(typeArguments);
        if (index <= len)
          return A._Utils_asRti(A._Utils_arrayAt(typeArguments, index - 1));
        index -= len;
        environment = A.Rti__getBindingBase(environment);
        kind = A.Rti__getKind(environment);
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = A.Rti__getInterfaceTypeArguments(environment);
      if (index <= A._Utils_arrayLength(typeArguments))
        return A._Utils_asRti(A._Utils_arrayAt(typeArguments, index - 1));
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + A.S(environment)));
    },
    _Parser_toGenericFunctionParameter(universe, item) {
      return A._Universe__lookupGenericFunctionParameterRti(universe, A._Utils_asInt(item));
    },
    TypeRule_lookupTypeVariable(rule, typeVariable) {
      return rule[typeVariable];
    },
    TypeRule_lookupSupertype(rule, supertype) {
      return rule[supertype];
    },
    isSubtype(universe, s, t) {
      var sCache = A.Rti__getIsSubtypeCache(s),
        result = A._Utils_mapGet(sCache, t);
      if (result == null) {
        result = A._isSubtypeUncached(universe, s, t);
        A._Utils_mapSet(sCache, t, result);
      }
      if (0 === result)
        return false;
      if (1 === result)
        return true;
      return true;
    },
    _isSubtypeUncached(universe, s, t) {
      return A.boolConversionCheck(A._isSubtype(universe, s, null, t, null, false)) ? 1 : 0;
    },
    _isSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sKind, leftTypeVariable, tKind, t1, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (A.boolConversionCheck(A._Utils_isIdentical(s, t)))
        return true;
      if (A.boolConversionCheck(A.isTopType(t, isLegacy)))
        return true;
      sKind = A.Rti__getKind(s);
      if (sKind === 4)
        return true;
      if (A.boolConversionCheck(A.isSoundTopType(s)))
        return false;
      if (A.boolConversionCheck(A.isBottomType(s, isLegacy)))
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A.boolConversionCheck(A._isSubtype(universe, A._Utils_asRti(A._Utils_arrayAt(sEnv, A.Rti__getGenericFunctionParameterIndex(s))), sEnv, t, tEnv, isLegacy)))
          return true;
      tKind = A.Rti__getKind(t);
      t1 = !isLegacy;
      if (t1 && A.boolConversionCheck(A.isNullType(s))) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, A.Rti__getFutureOrArgument(t), tEnv, isLegacy);
        return A.boolConversionCheck(A.isNullType(t)) || tKind === 7 || tKind === 6;
      }
      if (t1 && A.boolConversionCheck(A.isObjectType(t))) {
        if (sKind === 8)
          return A._isSubtype(universe, A.Rti__getFutureOrArgument(s), sEnv, t, tEnv, isLegacy);
        if (sKind === 6)
          return A._isSubtype(universe, A.Rti__getStarArgument(s), sEnv, t, tEnv, isLegacy);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, A.Rti__getStarArgument(s), sEnv, t, tEnv, isLegacy);
      if (tKind === 6)
        return A._isSubtype(universe, s, sEnv, isLegacy ? A.Rti__getStarArgument(t) : A.Rti__getQuestionFromStar(universe, t), tEnv, isLegacy);
      if (sKind === 8) {
        if (!A.boolConversionCheck(A._isSubtype(universe, A.Rti__getFutureOrArgument(s), sEnv, t, tEnv, isLegacy)))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv, isLegacy);
      }
      if (sKind === 7)
        return (!t1 || A.boolConversionCheck(A._isSubtype(universe, type$.Null, sEnv, t, tEnv, false))) && A.boolConversionCheck(A._isSubtype(universe, A.Rti__getQuestionArgument(s), sEnv, t, tEnv, isLegacy));
      if (tKind === 8) {
        if (A.boolConversionCheck(A._isSubtype(universe, s, sEnv, A.Rti__getFutureOrArgument(t), tEnv, isLegacy)))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv, isLegacy);
      }
      if (tKind === 7)
        return t1 && A.boolConversionCheck(A._isSubtype(universe, s, sEnv, type$.Null, tEnv, false)) || A.boolConversionCheck(A._isSubtype(universe, s, sEnv, A.Rti__getQuestionArgument(t), tEnv, isLegacy));
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && A.boolConversionCheck(A.isFunctionType(t)))
        return true;
      t2 = sKind === 11;
      if (t2 && A.boolConversionCheck(A.isRecordInterfaceType(t)))
        return true;
      if (tKind === 13) {
        if (A.boolConversionCheck(A.isJsFunctionType(s)))
          return true;
        if (sKind !== 13)
          return false;
        sBounds = A.Rti__getGenericFunctionBounds(s);
        tBounds = A.Rti__getGenericFunctionBounds(t);
        sLength = A._Utils_arrayLength(sBounds);
        if (sLength !== A._Utils_arrayLength(tBounds))
          return false;
        sEnv = sEnv == null ? sBounds : A._Utils_arrayConcat(sBounds, sEnv);
        tEnv = tEnv == null ? tBounds : A._Utils_arrayConcat(tBounds, tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = A._Utils_asRti(A._Utils_arrayAt(sBounds, i));
          tBound = A._Utils_asRti(A._Utils_arrayAt(tBounds, i));
          if (!A.boolConversionCheck(A._isSubtype(universe, sBound, sEnv, tBound, tEnv, isLegacy)) || !A.boolConversionCheck(A._isSubtype(universe, tBound, tEnv, sBound, sEnv, isLegacy)))
            return false;
        }
        return A._isFunctionSubtype(universe, A.Rti__getGenericFunctionBase(s), sEnv, A.Rti__getGenericFunctionBase(t), tEnv, isLegacy);
      }
      if (tKind === 12) {
        if (A.boolConversionCheck(A.isJsFunctionType(s)))
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, sParameter, sNamed, tNamed, sNamedLength, tNamedLength, t1, sIndex, tIndex, tName, sName, sIsRequired, tIsRequired, sType;
      if (!A.boolConversionCheck(A._isSubtype(universe, A.Rti__getReturnType(s), sEnv, A.Rti__getReturnType(t), tEnv, isLegacy)))
        return false;
      sParameters = A.Rti__getFunctionParameters(s);
      tParameters = A.Rti__getFunctionParameters(t);
      sRequiredPositional = A._FunctionParameters__getRequiredPositional(sParameters);
      tRequiredPositional = A._FunctionParameters__getRequiredPositional(tParameters);
      sRequiredPositionalLength = A._Utils_arrayLength(sRequiredPositional);
      tRequiredPositionalLength = A._Utils_arrayLength(tRequiredPositional);
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = A._FunctionParameters__getOptionalPositional(sParameters);
      tOptionalPositional = A._FunctionParameters__getOptionalPositional(tParameters);
      sOptionalPositionalLength = A._Utils_arrayLength(sOptionalPositional);
      tOptionalPositionalLength = A._Utils_arrayLength(tOptionalPositional);
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        sParameter = A._Utils_asRti(A._Utils_arrayAt(sRequiredPositional, i));
        if (!A.boolConversionCheck(A._isSubtype(universe, A._Utils_asRti(A._Utils_arrayAt(tRequiredPositional, i)), tEnv, sParameter, sEnv, isLegacy)))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        sParameter = A._Utils_asRti(A._Utils_arrayAt(sOptionalPositional, i));
        if (!A.boolConversionCheck(A._isSubtype(universe, A._Utils_asRti(A._Utils_arrayAt(tRequiredPositional, sRequiredPositionalLength + i)), tEnv, sParameter, sEnv, isLegacy)))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        sParameter = A._Utils_asRti(A._Utils_arrayAt(sOptionalPositional, requiredPositionalDelta + i));
        if (!A.boolConversionCheck(A._isSubtype(universe, A._Utils_asRti(A._Utils_arrayAt(tOptionalPositional, i)), tEnv, sParameter, sEnv, isLegacy)))
          return false;
      }
      sNamed = A._FunctionParameters__getNamed(sParameters);
      tNamed = A._FunctionParameters__getNamed(tParameters);
      sNamedLength = A._Utils_arrayLength(sNamed);
      tNamedLength = A._Utils_arrayLength(tNamed);
      for (t1 = !isLegacy, sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = A._Utils_asString(A._Utils_arrayAt(tNamed, tIndex));
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = A._Utils_asString(A._Utils_arrayAt(sNamed, sIndex));
          sIndex += 3;
          if (A.boolConversionCheck(A._Utils_stringLessThan(tName, sName)))
            return false;
          sIsRequired = t1 && A.boolConversionCheck(A._Utils_asBool(A._Utils_arrayAt(sNamed, sIndex - 2)));
          if (A.boolConversionCheck(A._Utils_stringLessThan(sName, tName))) {
            if (sIsRequired)
              return false;
            continue;
          }
          tIsRequired = t1 && A.boolConversionCheck(A._Utils_asBool(A._Utils_arrayAt(tNamed, tIndex + 1)));
          if (sIsRequired && !tIsRequired)
            return false;
          sType = A._Utils_asRti(A._Utils_arrayAt(sNamed, sIndex - 1));
          if (!A.boolConversionCheck(A._isSubtype(universe, A._Utils_asRti(A._Utils_arrayAt(tNamed, tIndex + 2)), tEnv, sType, sEnv, isLegacy)))
            return false;
          break;
        }
      }
      if (t1)
        for (; sIndex < sNamedLength;) {
          if (A.boolConversionCheck(A._Utils_asBool(A._Utils_arrayAt(sNamed, sIndex + 1))))
            return false;
          sIndex += 3;
        }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = A.Rti__getInterfaceName(s),
        tName = A.Rti__getInterfaceName(t);
      for (; sName !== tName;) {
        rule = A._Universe__findRule(universe, sName);
        if (rule == null)
          return false;
        if (A.boolConversionCheck(A._Utils_isString(rule))) {
          sName = A._Utils_asString(rule);
          continue;
        }
        recipes = A.TypeRule_lookupSupertype(rule, tName);
        if (recipes == null)
          return false;
        $length = A._Utils_arrayLength(recipes);
        supertypeArgs = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          A._Utils_arraySetAt(supertypeArgs, i, A._Universe_evalInEnvironment(universe, s, A._Utils_asString(A._Utils_arrayAt(recipes, i))));
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, A.Rti__getInterfaceTypeArguments(t), tEnv, isLegacy);
      }
      return A._areArgumentsSubtypes(universe, A.Rti__getInterfaceTypeArguments(s), null, sEnv, A.Rti__getInterfaceTypeArguments(t), tEnv, isLegacy);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv, isLegacy) {
      var i,
        $length = A._Utils_arrayLength(sArgs);
      for (i = 0; i < $length; ++i)
        if (!A.boolConversionCheck(A._isSubtype(universe, A._Utils_asRti(A._Utils_arrayAt(sArgs, i)), sEnv, A._Utils_asRti(A._Utils_arrayAt(tArgs, i)), tEnv, isLegacy)))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var i,
        sFields = A.Rti__getRecordFields(s),
        tFields = A.Rti__getRecordFields(t),
        sCount = A._Utils_arrayLength(sFields);
      if (sCount !== A._Utils_arrayLength(tFields))
        return false;
      if (A.Rti__getRecordPartialShapeTag(s) !== A.Rti__getRecordPartialShapeTag(t))
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A.boolConversionCheck(A._isSubtype(universe, A._Utils_asRti(A._Utils_arrayAt(sFields, i)), sEnv, A._Utils_asRti(A._Utils_arrayAt(tFields, i)), tEnv, isLegacy)))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = A.Rti__getKind(t),
        t1 = true;
      if (!A.boolConversionCheck(A.isNullType(t)))
        if (!A.boolConversionCheck(A.isSoundTopType(t)))
          if (kind !== 7)
            if (!(kind === 6 && A.boolConversionCheck(A.isNullable(A.Rti__getStarArgument(t)))))
              t1 = kind === 8 && A.boolConversionCheck(A.isNullable(A.Rti__getFutureOrArgument(t)));
      return t1;
    },
    isDefinitelyTopType(t) {
      return A.isTopType(t, false);
    },
    isTopType(t, isLegacy) {
      var t1 = true;
      if (!A.boolConversionCheck(A.isSoundTopType(t)))
        if (!A.boolConversionCheck(A.isLegacyObjectType(t)))
          t1 = isLegacy && A.boolConversionCheck(A.isObjectType(t));
      return t1;
    },
    isSoundTopType(t) {
      var kind = A.Rti__getKind(t);
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || A.boolConversionCheck(A.isNullableObjectType(t));
    },
    isBottomType(t, isLegacy) {
      var t1;
      if (!A.boolConversionCheck(J.$eq$(A.Rti__getKind(t), 1)))
        t1 = isLegacy && A.boolConversionCheck(A.isNullType(t));
      else
        t1 = true;
      return t1;
    },
    isObjectType(t) {
      return A._Utils_isIdentical(t, type$.Object);
    },
    isLegacyObjectType(t) {
      return A._Utils_isIdentical(t, type$.legacy_Object);
    },
    isNullableObjectType(t) {
      return A._Utils_isIdentical(t, type$.nullable_Object);
    },
    isNullType(t) {
      return A.boolConversionCheck(A._Utils_isIdentical(t, type$.Null)) || A.boolConversionCheck(A._Utils_isIdentical(t, type$.JSNull));
    },
    isFunctionType(t) {
      return A._Utils_isIdentical(t, type$.Function);
    },
    isJsFunctionType(t) {
      return A._Utils_isIdentical(t, type$.JavaScriptFunction);
    },
    isRecordInterfaceType(t) {
      return A._Utils_isIdentical(t, type$.Record);
    },
    _Utils_asNull(o) {
      return o;
    },
    _Utils_asBool(o) {
      return o;
    },
    _Utils_asDouble(o) {
      return o;
    },
    _Utils_asInt(o) {
      return o;
    },
    _Utils_asNum(o) {
      return o;
    },
    _Utils_asString(o) {
      return o;
    },
    _Utils_asRti(s) {
      return s;
    },
    _Utils_asRtiOrNull(s) {
      return s;
    },
    _Utils_as_Type(o) {
      return o;
    },
    _Utils_isString(o) {
      return typeof o == "string";
    },
    _Utils_isNum(o) {
      return typeof o == "number";
    },
    _Utils_instanceOf(o, $constructor) {
      return o instanceof $constructor;
    },
    _Utils_isIdentical(s, t) {
      return s === t;
    },
    _Utils_isNotIdentical(s, t) {
      return s !== t;
    },
    _Utils_objectKeys(o) {
      return Object.keys(o);
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = A._Utils_objectKeys(other),
        $length = A._Utils_arrayLength(keys);
      for (i = 0; i < $length; ++i) {
        key = A._Utils_asString(A._Utils_arrayAt(keys, i));
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : A._Universe_sharedEmptyArray(A._theUniverse());
    },
    _Utils_isArray(o) {
      return Array.isArray(o);
    },
    _Utils_arrayLength(array) {
      return array.length;
    },
    _Utils_arrayAt(array, i) {
      return array[i];
    },
    _Utils_arraySetAt(array, i, value) {
      array[i] = value;
    },
    _Utils_arraySplice(array, position) {
      return array.splice(position);
    },
    _Utils_arrayConcat(a1, a2) {
      return a1.concat(a2);
    },
    _Utils_stringSplit(s, pattern) {
      return s.split(pattern);
    },
    _Utils_substring(s, start, end) {
      return s.substring(start, end);
    },
    _Utils_stringIndexOf(s, pattern, start) {
      return s.indexOf(pattern, start);
    },
    _Utils_stringLessThan(s1, s2) {
      return s1 < s2;
    },
    _Utils_mapGet(cache, key) {
      return cache.get(key);
    },
    _Utils_mapSet(cache, key, value) {
      cache.set(key, value);
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _trySetStackTrace(error, stackTrace) {
      if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
    },
    _AsyncRun__scheduleImmediate(callback) {
      $.$get$_AsyncRun__scheduleImmediateClosure().call$1(callback);
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      A.requiresPreamble();
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = duration.get$inMilliseconds();
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _hasTimer() {
      A.requiresPreamble();
      return self.setTimeout != null;
    },
    _AsyncAwaitCompleter$($T) {
      return new A._AsyncAwaitCompleter(A._Future$($T), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _makeAsyncAwaitCompleter($T) {
      return A._AsyncAwaitCompleter$($T);
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer.get$future();
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = A._Future$(t1);
          future._setValue$1(object);
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return A.Zone_current().registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator$(_body, $T) {
      return new A._SyncStarIterator(_body, $T._eval$1("_SyncStarIterator<0>"));
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    _makeSyncStarIterable(body, $T) {
      return A._SyncStarIterable$(body, $T);
    },
    _SyncStarIterable$(_outerHelper, $T) {
      return new A._SyncStarIterable(_outerHelper, $T._eval$1("_SyncStarIterable<0>"));
    },
    _wrapAwaitedExpression(e, $T) {
      return $T._eval$1("Future<0>")._is(e) ? e : A._Future$value(A.unsafeCast(e, $T), $T);
    },
    AsyncError$(error, stackTrace) {
      return new A.AsyncError(error, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError$_(error, stackTrace) {
      return new A.AsyncError(error, stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    _BroadcastStream$(controller, $T) {
      return new A._BroadcastStream(controller, $T._eval$1("_BroadcastStream<0>"));
    },
    _BroadcastSubscription$(controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = A.Zone_current(),
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0;
      t3 = new A._BroadcastSubscription(controller, A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2 | t3, $T._eval$1("_BroadcastSubscription<0>"));
      t3._BroadcastSubscription$5(controller, onData, onError, onDone, cancelOnError, $T);
      return t3;
    },
    _AsyncBroadcastStreamController$(onListen, onCancel, $T) {
      return new A._AsyncBroadcastStreamController(onListen, onCancel, $T._eval$1("_AsyncBroadcastStreamController<0>"));
    },
    Future_Future(computation, $T) {
      var result = A._Future$($T);
      A.Timer_run(new A.Future_Future_closure(computation, result));
      return result;
    },
    Future_Future$sync(computation, $T) {
      var error, stackTrace, future, exception, result = null;
      try {
        result = computation.call$0();
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        future = A._Future$($T);
        A._asyncCompleteWithErrorCallback(future, error, stackTrace);
        return future;
      }
      return $T._eval$1("Future<0>")._is(result) ? result : A._Future$value(result, $T);
    },
    Future_Future$value(value, $T) {
      return A._Future$immediate(value == null ? $T._as(value) : value, $T);
    },
    Future_Future$error(error, stackTrace, $T) {
      var _0_0 = A._interceptUserError(error, stackTrace);
      return A._Future$immediateError(_0_0.error, _0_0.stackTrace, $T);
    },
    Future_Future$delayed(duration, $T) {
      var result,
        t1 = A.boolConversionCheck(A.typeAcceptsNull($T));
      if (!t1)
        throw A.wrapException(A.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = A._Future$($T);
      A.Timer_Timer(duration, new A.Future_Future$delayed_closure(null, result, $T));
      return result;
    },
    Future_wait(futures, $T) {
      var handleError, future, pos, e, st, t2, t3, t4, exception, _box_0 = {}, cleanUp = null,
        eagerError = false,
        t1 = $T._eval$1("List<0>"),
        _future = A._Future$(t1);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future);
      try {
        for (t2 = J.get$iterator$ax(futures), t3 = type$.Null; A.boolConversionCheck(t2.moveNext$0());) {
          future = t2.get$current();
          pos = _box_0.remaining;
          future.then$1$2$onError(new A.Future_wait_closure(_box_0, pos, _future, $T, cleanUp, eagerError), handleError, t3);
          t4 = _box_0.remaining;
          if (typeof t4 !== "number")
            return t4.$add();
          _box_0.remaining = t4 + 1;
        }
        if (A.boolConversionCheck(J.$eq$(_box_0.remaining, 0))) {
          t2 = _future;
          t2._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t2;
        }
        _box_0.values = A.List_List$filled(_box_0.remaining, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        if (A.boolConversionCheck(J.$eq$(_box_0.remaining, 0)) || A.boolConversionCheck(eagerError))
          return A.Future_Future$error(e, st, t1);
        else {
          _box_0.error = e;
          _box_0.stackTrace = st;
        }
      }
      return _future;
    },
    unawaited(future) {
    },
    FutureExtensions_onError(_this, handleError, $T, $E) {
      var t1 = A.unsafeCast(_this, $T._eval$1("_Future<0>"))._safeOnError$1$1(new A.FutureExtensions_onError_onError($E, null, handleError, $T), $T);
      return t1;
    },
    Completer_Completer($T) {
      return A._AsyncCompleter$($T);
    },
    Completer_Completer$sync($T) {
      return A._SyncCompleter$($T);
    },
    _completeWithErrorCallback(result, error, stackTrace) {
      var replacement = A._interceptError(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      }
      result._completeError$2(error, stackTrace);
    },
    _asyncCompleteWithErrorCallback(result, error, stackTrace) {
      var replacement = A._interceptError(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      }
      result._asyncCompleteError$2(error, stackTrace);
    },
    _interceptError(error, stackTrace) {
      var replacement,
        zone = $.Zone__current;
      if (zone === B.C__RootZone)
        return null;
      replacement = zone.errorCallback$2(error, stackTrace);
      if (replacement == null)
        return null;
      A._trySetStackTrace(replacement.error, replacement.stackTrace);
      return replacement;
    },
    _interceptUserError(error, stackTrace) {
      var replacement;
      if (A.Zone_current() !== B.C__RootZone) {
        replacement = A._interceptError(error, stackTrace);
        if (replacement != null)
          return replacement;
      }
      if (stackTrace == null)
        if (type$.Error._is(error)) {
          stackTrace = error.get$stackTrace();
          if (stackTrace == null) {
            A._trySetStackTrace(error, B.C__StringStackTrace);
            stackTrace = B.C__StringStackTrace;
          }
        } else
          stackTrace = B.C__StringStackTrace;
      else
        A._trySetStackTrace(error, stackTrace);
      return A.AsyncError$_(error, stackTrace);
    },
    _AsyncCompleter$($T) {
      return new A._AsyncCompleter(A._Future$($T), $T._eval$1("_AsyncCompleter<0>"));
    },
    _SyncCompleter$($T) {
      return new A._SyncCompleter(A._Future$($T), $T._eval$1("_SyncCompleter<0>"));
    },
    _FutureListener$then(result, onValue, errorCallback, $S, $T) {
      var t1 = errorCallback == null ? 1 : 3;
      return new A._FutureListener(result, t1, onValue, errorCallback, $S._eval$1("@<0>")._bind$1($T)._eval$1("_FutureListener<1,2>"));
    },
    _FutureListener$thenAwait(result, onValue, errorCallback, $S, $T) {
      return new A._FutureListener(result, 19, onValue, errorCallback, $S._eval$1("@<0>")._bind$1($T)._eval$1("_FutureListener<1,2>"));
    },
    _FutureListener$catchError(result, errorCallback, callback, $S, $T) {
      var t1 = callback == null ? 2 : 6;
      return new A._FutureListener(result, t1, callback, errorCallback, $S._eval$1("@<0>")._bind$1($T)._eval$1("_FutureListener<1,2>"));
    },
    _FutureListener$whenComplete(result, callback, $S, $T) {
      return new A._FutureListener(result, 8, callback, null, $S._eval$1("@<0>")._bind$1($T)._eval$1("_FutureListener<1,2>"));
    },
    _Future$($T) {
      return new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
    },
    _Future$immediate(result, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._Future$immediate$1(result, $T);
      return t1;
    },
    _Future$zoneValue(value, _zone, $T) {
      var t1 = new A._Future(_zone, $T._eval$1("_Future<0>"));
      t1._Future$zoneValue$2(value, _zone, $T);
      return t1;
    },
    _Future$immediateError(error, stackTrace, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._Future$immediateError$2(error, stackTrace, $T);
      return t1;
    },
    _Future$value(value, $T) {
      var t1 = $.Zone__current,
        t2 = new A._Future(t1, $T._eval$1("_Future<0>"));
      t2._Future$zoneValue$2(value, t1, $T);
      return t2;
    },
    _Future__chainCoreFutureSync(source, target) {
      var t1, t2, listeners;
      for (; A.boolConversionCheck(source.get$_isChained());)
        source = source.get$_chainSource();
      if (source === target) {
        target._asyncCompleteError$2(A.ArgumentError$value(source, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      t1 = source._state;
      t2 = target._state;
      if (typeof t2 !== "number")
        return t2.$and();
      if (typeof t1 !== "number")
        return t1.$or();
      source._state = (t1 | t2 & 1) >>> 0;
      if (A.boolConversionCheck(source.get$_isComplete())) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__chainCoreFutureAsync(source, target) {
      var listeners, _box_0 = {},
        t1 = _box_0.source = _box_0.source = source;
      for (; A.boolConversionCheck(t1.get$_isChained()); t1 = source) {
        source = _box_0.source.get$_chainSource();
        _box_0.source = source;
      }
      t1 = _box_0.source;
      if (t1 === target) {
        target._asyncCompleteError$2(A.ArgumentError$value(t1, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      if (!A.boolConversionCheck(t1.get$_isComplete())) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(_box_0.source);
        _box_0.source._prependListeners$1(listeners);
        return;
      }
      if (!A.boolConversionCheck(_box_0.source.get$_hasError()) && target._resultOrListeners == null) {
        target._cloneResult$1(_box_0.source);
        return;
      }
      target._setPendingComplete$0();
      target._zone.scheduleMicrotask$1(new A._Future__chainCoreFutureAsync_closure(_box_0, target));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, _box_0, hasError, asyncError, nextListener, nextListener0, sourceResult, t4, zone, oldZone, chainSource, result, _box_1 = {},
        t1 = _box_1.source = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1.get$_hasError();
        if (listeners == null) {
          if (hasError && !A.boolConversionCheck(_box_1.source.get$_ignoreError())) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        sourceResult = _box_1.source._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t4 = !hasError;
        if (!t4 || A.boolConversionCheck(t1.get$handlesValue()) || A.boolConversionCheck(_box_0.listener.get$handlesComplete())) {
          zone = _box_0.listener.get$_zone();
          if (hasError && !_box_1.source._zone.inSameErrorZone$1(zone)) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current !== zone ? A.Zone__enter(zone) : null;
          if (A.boolConversionCheck(_box_0.listener.get$handlesComplete()))
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t4) {
            if (A.boolConversionCheck(_box_0.listener.get$handlesValue()))
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if (A.boolConversionCheck(_box_0.listener.get$handlesError()))
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            A.Zone__leave(oldZone);
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future && _box_0.listener.shouldChain$1(t1)) {
            chainSource = t3._as(_box_0.listenerValueOrError);
            result = _box_0.listener.result;
            if (A.boolConversionCheck(chainSource.get$_isComplete())) {
              listeners = result._removeListeners$0();
              result._cloneResult$1(chainSource);
              _box_1.source = chainSource;
              t1 = chainSource;
              continue;
            } else
              A._Future__chainCoreFutureSync(chainSource, result);
            return;
          }
        }
        result = _box_0.listener.result;
        listeners = result._removeListeners$0();
        t1 = A.boolConversionCheck(_box_0.listenerHasError);
        t4 = _box_0.listenerValueOrError;
        if (!t1)
          result._setValue$1(t4);
        else
          result._setErrorObject$1(t2._as(t4));
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _AsyncCallbackEntry$(callback) {
      return new A._AsyncCallbackEntry(callback);
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          A._AsyncRun__scheduleImmediate(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = A._AsyncCallbackEntry$(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!A.boolConversionCheck($._isInCallbackLoop))
          A._AsyncRun__scheduleImmediate(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = A._AsyncCallbackEntry$(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.set$next(t1);
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      currentZone.get$_scheduleMicrotask();
      t1 = B.C__RootZone.inSameErrorZone$1(currentZone);
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      A.Zone_current().scheduleMicrotask$1(A.Zone_current().bindCallbackGuarded$1(callback));
    },
    Stream_Stream$multi(onListen, isBroadcast, $T) {
      return A._MultiStream$(onListen, isBroadcast, $T);
    },
    Stream_Stream$eventTransformed(source, mapSink, $T) {
      return A._BoundSinkStream$(source, mapSink, type$.dynamic, $T);
    },
    StreamIterator_StreamIterator(stream, $T) {
      return A._StreamIterator$(stream, $T);
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? A._SyncStreamController$(onListen, onPause, onResume, onCancel, $T) : A._AsyncStreamController$(onListen, onPause, onResume, onCancel, $T);
    },
    StreamController_StreamController$broadcast($T) {
      var t1 = A._AsyncBroadcastStreamController$(null, null, $T);
      return t1;
    },
    _AsyncStreamController$(onListen, onPause, onResume, onCancel, $T) {
      return new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _SyncStreamController$(onListen, onPause, onResume, onCancel, $T) {
      return new A._SyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_SyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.Zone_current().handleUncaughtError$2(e, s);
      }
    },
    _ControllerStream$(_controller, $T) {
      return new A._ControllerStream(_controller, $T._eval$1("_ControllerStream<0>"));
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = A.Zone_current(),
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0;
      return new A._ControllerSubscription(_controller, A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2 | t3, $T._eval$1("_ControllerSubscription<0>"));
    },
    _StreamSinkWrapper$(_target, $T) {
      return new A._StreamSinkWrapper(_target, $T._eval$1("_StreamSinkWrapper<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _BufferingStreamSubscription__registerDoneHandler(zone, handleDone) {
      var t1 = handleDone == null ? A.async___nullDoneHandler$closure() : handleDone;
      return zone.registerCallback$1$1(t1, type$.void);
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      A.Zone_current().handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler() {
    },
    _DelayedData$(value, $T) {
      return new A._DelayedData(value, $T._eval$1("_DelayedData<0>"));
    },
    _DelayedError$(error, stackTrace) {
      return new A._DelayedError(error, stackTrace);
    },
    _PendingEvents$($T) {
      return new A._PendingEvents($T._eval$1("_PendingEvents<0>"));
    },
    _DoneStreamSubscription$(onDone, $T) {
      var t1 = new A._DoneStreamSubscription(A.Zone_current(), $T._eval$1("_DoneStreamSubscription<0>"));
      t1._DoneStreamSubscription$1(onDone, $T);
      return t1;
    },
    _DoneStreamSubscription__isDone(state) {
      return state < 0;
    },
    _DoneStreamSubscription__incrementPauseCount(state) {
      return state + 2;
    },
    _DoneStreamSubscription__decrementPauseCount(state) {
      return state - 2;
    },
    _StreamIterator$(stream, $T) {
      return new A._StreamIterator(A.checkNotNullable(stream, "stream", type$.Object), $T._eval$1("_StreamIterator<0>"));
    },
    _MultiStream$(_onListen, isBroadcast, $T) {
      return new A._MultiStream(isBroadcast, _onListen, $T._eval$1("_MultiStream<0>"));
    },
    _MultiStreamController$($T) {
      var _null = null;
      return new A._MultiStreamController(_null, _null, _null, _null, $T._eval$1("_MultiStreamController<0>"));
    },
    _cancelAndValue(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _ForwardingStreamSubscription$(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1 = A.Zone_current(),
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0;
      t3 = new A._ForwardingStreamSubscription(_stream, A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2 | t3, $S._eval$1("@<0>")._bind$1($T)._eval$1("_ForwardingStreamSubscription<1,2>"));
      t3._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
      return t3;
    },
    _addErrorWithReplacement(sink, error, stackTrace) {
      var replacement = A._interceptError(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      }
      sink._addError$2(error, stackTrace);
    },
    _MapStream$(source, transform, $S, $T) {
      return new A._MapStream(transform, source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_MapStream<1,2>"));
    },
    _EventSinkWrapper$(_sink, $T) {
      return new A._EventSinkWrapper(_sink, $T._eval$1("_EventSinkWrapper<0>"));
    },
    _SinkTransformerStreamSubscription$(source, mapper, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1 = A.Zone_current(),
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0;
      t3 = new A._SinkTransformerStreamSubscription(A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2 | t3, $S._eval$1("@<0>")._bind$1($T)._eval$1("_SinkTransformerStreamSubscription<1,2>"));
      t3._SinkTransformerStreamSubscription$6(source, mapper, onData, onError, onDone, cancelOnError, $S, $T);
      return t3;
    },
    _BoundSinkStream$(_stream, _sinkMapper, $S, $T) {
      return new A._BoundSinkStream(_sinkMapper, _stream, $S._eval$1("@<0>")._bind$1($T)._eval$1("_BoundSinkStream<1,2>"));
    },
    Timer_Timer(duration, callback) {
      if (A.boolConversionCheck(J.$eq$(A.Zone_current(), B.C__RootZone)))
        return A.Zone_current().createTimer$2(duration, callback);
      return A.Zone_current().createTimer$2(duration, A.Zone_current().bindCallbackGuarded$1(callback));
    },
    Timer_run(callback) {
      A.Timer_Timer(B.Duration_0, callback);
    },
    Zone_current() {
      return $.Zone__current;
    },
    Zone__enter(zone) {
      var previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    Zone__leave(previous) {
      $.Zone__current = previous;
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$0();
      old = A.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        A.Zone__leave(old);
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$1(arg);
      old = A.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        A.Zone__leave(old);
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$2(arg1, arg2);
      old = A.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        A.Zone__leave(old);
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = !B.C__RootZone.inSameErrorZone$1(zone) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._handle = null;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._async$_controller = t0;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_Future_closure: function Future_Future_closure(t0, t1) {
      this.computation = t0;
      this.result = t1;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
    },
    Future_wait_handleError_closure: function Future_wait_handleError_closure(t0, t1) {
      this.cleanUp = t0;
      this.cleanUpValue = t1;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.T = t3;
      _.cleanUp = t4;
      _.eagerError = t5;
    },
    Future_wait__closure: function Future_wait__closure(t0, t1) {
      this.cleanUp = t0;
      this.value = t1;
    },
    FutureExtensions_onError_onError: function FutureExtensions_onError_onError(t0, t1, t2, t3) {
      var _ = this;
      _.E = t0;
      _.test = t1;
      _.handleError = t2;
      _.T = t3;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__chainCoreFutureAsync_closure: function _Future__chainCoreFutureAsync_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0) {
      this.future = t0;
    },
    Stream_first_closure0: function Stream_first_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._async$_controller = t0;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1) {
      var _ = this;
      _._state = 1;
      _._zone = t0;
      _._onDone = null;
      _.$ti = t1;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._async$_subscription = null;
      _._stateData = t0;
      _._async$_hasValue = false;
      _.$ti = t1;
    },
    _MultiStream: function _MultiStream(t0, t1, t2) {
      this.isBroadcast = t0;
      this._onListen = t1;
      this.$ti = t2;
    },
    _MultiStream_listen_closure: function _MultiStream_listen_closure(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    _MultiStreamController: function _MultiStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._async$_subscription = null;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _EventSinkWrapper: function _EventSinkWrapper(t0, t1) {
      this._async$_sink = t0;
      this.$ti = t1;
    },
    _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.___SinkTransformerStreamSubscription__transformerSink_A = $;
      _._async$_subscription = null;
      _._async$_onData = t0;
      _._onError = t1;
      _._onDone = t2;
      _._zone = t3;
      _._state = t4;
      _._pending = _._cancelFuture = null;
      _.$ti = t5;
    },
    _BoundSinkStream: function _BoundSinkStream(t0, t1, t2) {
      this._sinkMapper = t0;
      this._stream = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    _HashMap__isStringKey(key) {
      return typeof key == "string" && key !== "__proto__";
    },
    _HashMap__isNumericKey(key) {
      return typeof key == "number" && (key & 1073741823) === key;
    },
    _HashMap__hasTableEntry(table, key) {
      return table[key] != null;
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__deleteTableEntry(table, key) {
      delete table[key];
    },
    _HashMap__newHashTable() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      A._HashMap__setTableEntry(table, _s20_, table);
      A._HashMap__deleteTableEntry(table, _s20_);
      return table;
    },
    _IdentityHashMap$($K, $V) {
      return new A._IdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_IdentityHashMap<1,2>"));
    },
    _HashMapKeyIterable$(_map, $E) {
      return new A._HashMapKeyIterable(_map, $E._eval$1("_HashMapKeyIterable<0>"));
    },
    _HashMapKeyIterator$(_map, _keys, $E) {
      return new A._HashMapKeyIterator(_map, _keys, $E._eval$1("_HashMapKeyIterator<0>"));
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, A.JsLinkedHashMap$($K, $V)));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return A.JsLinkedHashMap$($K, $V);
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return A._LinkedHashSet$($E);
    },
    _LinkedHashSet$($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__isStringElement(element) {
      return typeof element == "string" && element !== "__proto__";
    },
    _LinkedHashSet__isNumericElement(element) {
      return typeof element == "number" && (element & 1073741823) === element;
    },
    _LinkedHashSet__getTableEntry(table, key) {
      return table[key];
    },
    _LinkedHashSet__setTableEntry(table, key, value) {
      table[key] = value;
    },
    _LinkedHashSet__deleteTableEntry(table, key) {
      delete table[key];
    },
    _LinkedHashSet__newHashTable() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      A._LinkedHashSet__setTableEntry(table, _s20_, table);
      A._LinkedHashSet__deleteTableEntry(table, _s20_);
      return table;
    },
    _LinkedHashSetCell$(_element) {
      return new A._LinkedHashSetCell(_element);
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._LinkedHashSetIterator$2(_set, _modifications, $E);
      return t1;
    },
    LinkedList$($E) {
      return new A.LinkedList($E._eval$1("LinkedList<0>"));
    },
    _LinkedListIterator$(list, $E) {
      return new A._LinkedListIterator(list, list._modificationCount, list._first, $E._eval$1("_LinkedListIterator<0>"));
    },
    ListBase__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return A.Comparable_compare(t1._as(a), t1._as(b));
    },
    ListBase_listToString(list) {
      return A.Iterable_iterableToFullString(list, "[", "]");
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A.boolConversionCheck(A.isToStringVisiting(m)))
        return "{...}";
      result = A.StringBuffer$("");
      try {
        J.add$1$ax($.toStringVisiting, m);
        result.write$1("{");
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result.write$1("}");
      } finally {
        J.removeLast$0$ax($.toStringVisiting);
      }
      return J.toString$0$(result);
    },
    _MapBaseValueIterable$(_map, $K, $V) {
      return new A._MapBaseValueIterable(_map, $K._eval$1("@<0>")._bind$1($V)._eval$1("_MapBaseValueIterable<1,2>"));
    },
    _MapBaseValueIterator$(map, $K, $V) {
      return new A._MapBaseValueIterator(J.get$iterator$ax(map.get$keys()), map, $K._eval$1("@<0>")._bind$1($V)._eval$1("_MapBaseValueIterator<1,2>"));
    },
    SetBase_setToString(set) {
      return A.Iterable_iterableToFullString(set, "{", "}");
    },
    _HashMap: function _HashMap() {
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._collection$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._previous = this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    LinkedList: function LinkedList(t0) {
      var _ = this;
      _._collection$_length = _._modificationCount = 0;
      _._first = null;
      _.$ti = t0;
    },
    _LinkedListIterator: function _LinkedListIterator(t0, t1, t2, t3) {
      var _ = this;
      _._list = t0;
      _._modificationCount = t1;
      _._collection$_current = null;
      _._next = t2;
      _._visitedFirst = false;
      _.$ti = t3;
    },
    LinkedListEntry: function LinkedListEntry() {
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_addAll_closure: function MapBase_addAll_closure(t0) {
      this.$this = t0;
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _Utf8Decoder$(allowMalformed) {
      return new A._Utf8Decoder(allowMalformed);
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = $length <= 4096 ? $.$get$_Utf8Decoder__reusableBuffer() : A.NativeUint8List_NativeUint8List($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    _UnicodeSubsetEncoderSink$(_subsetMask, _sink) {
      return new A._UnicodeSubsetEncoderSink(_sink, _subsetMask);
    },
    _ErrorHandlingAsciiDecoderSink$(_utf8Sink) {
      return new A._ErrorHandlingAsciiDecoderSink(_utf8Sink);
    },
    _SimpleAsciiDecoderSink$(_sink) {
      return new A._SimpleAsciiDecoderSink(_sink);
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + A.S($length), source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder$(urlSafe) {
      return new A._Base64Encoder(urlSafe ? string$.ABCDEFx2d : string$.ABCDEFx2b);
    },
    _Base64Encoder__encodeState(count, bits) {
      return (bits << 2 | count) >>> 0;
    },
    _Base64Encoder__stateBits(state) {
      return B.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Encoder__stateCount(state) {
      return state & 3;
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var expectedChars, t2, i, byteOr, byte, outputIndex0, t3, t4,
        bits = A._Base64Encoder__stateBits(state),
        t1 = A._Base64Encoder__stateCount(state);
      if (typeof t1 !== "number")
        return A.iae(t1);
      expectedChars = 3 - t1;
      for (t1 = J.getInterceptor$asx(bytes), t2 = alphabet.length, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t3 = bits >>> 18 & 63;
          if (!(t3 < t2))
            return A.ioore(alphabet, t3);
          t3 = alphabet.charCodeAt(t3);
          output.$flags & 2 && A.throwUnsupportedOperation(output);
          t4 = output.length;
          if (!(outputIndex >= 0 && outputIndex < t4))
            return A.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = bits >>> 12 & 63;
          if (!(t3 < t2))
            return A.ioore(alphabet, t3);
          t3 = alphabet.charCodeAt(t3);
          if (!(outputIndex0 >= 0 && outputIndex0 < t4))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          outputIndex0 = outputIndex + 1;
          t3 = bits >>> 6 & 63;
          if (!(t3 < t2))
            return A.ioore(alphabet, t3);
          t3 = alphabet.charCodeAt(t3);
          if (!(outputIndex >= 0 && outputIndex < t4))
            return A.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = bits & 63;
          if (!(t3 < t2))
            return A.ioore(alphabet, t3);
          t3 = alphabet.charCodeAt(t3);
          if (!(outputIndex0 >= 0 && outputIndex0 < t4))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          A._Base64Encoder_writeFinalChunk(alphabet, output, outputIndex, 3 - expectedChars, bits);
          return 0;
        }
        return A._Base64Encoder__encodeState(3 - expectedChars, bits);
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + A.S(B.JSInt_methods.toRadixString$1(t1.$index(bytes, i), 16)), null));
    },
    _Base64Encoder_writeFinalChunk(alphabet, output, outputIndex, count, bits) {
      var t3,
        outputIndex0 = outputIndex + 1,
        t1 = alphabet.length,
        t2 = output.$flags | 0,
        outputIndex1 = outputIndex0 + 1;
      if (count === 1) {
        t3 = B.JSInt_methods._shrOtherPositive$1(bits, 2) & 63;
        if (!(t3 < t1))
          return A.ioore(alphabet, t3);
        t3 = alphabet.charCodeAt(t3);
        t2 & 2 && A.throwUnsupportedOperation(output);
        t2 = output.length;
        if (outputIndex >>> 0 !== outputIndex || outputIndex >= t2)
          return A.ioore(output, outputIndex);
        output[outputIndex] = t3;
        t3 = bits << 4 & 63;
        if (!(t3 < t1))
          return A.ioore(alphabet, t3);
        t3 = alphabet.charCodeAt(t3);
        if (!(outputIndex0 >= 0 && outputIndex0 < t2))
          return A.ioore(output, outputIndex0);
        output[outputIndex0] = t3;
        outputIndex = outputIndex1 + 1;
        if (!(outputIndex1 >= 0 && outputIndex1 < t2))
          return A.ioore(output, outputIndex1);
        output[outputIndex1] = 61;
        if (!(outputIndex >= 0 && outputIndex < t2))
          return A.ioore(output, outputIndex);
        output[outputIndex] = 61;
      } else {
        t3 = B.JSInt_methods._shrOtherPositive$1(bits, 10) & 63;
        if (!(t3 < t1))
          return A.ioore(alphabet, t3);
        t3 = alphabet.charCodeAt(t3);
        t2 & 2 && A.throwUnsupportedOperation(output);
        t2 = output.length;
        if (outputIndex >>> 0 !== outputIndex || outputIndex >= t2)
          return A.ioore(output, outputIndex);
        output[outputIndex] = t3;
        t3 = B.JSInt_methods._shrOtherPositive$1(bits, 4) & 63;
        if (!(t3 < t1))
          return A.ioore(alphabet, t3);
        t3 = alphabet.charCodeAt(t3);
        if (!(outputIndex0 >= 0 && outputIndex0 < t2))
          return A.ioore(output, outputIndex0);
        output[outputIndex0] = t3;
        outputIndex = outputIndex1 + 1;
        t3 = bits << 2 & 63;
        if (!(t3 < t1))
          return A.ioore(alphabet, t3);
        t3 = alphabet.charCodeAt(t3);
        if (!(outputIndex1 >= 0 && outputIndex1 < t2))
          return A.ioore(output, outputIndex1);
        output[outputIndex1] = t3;
        if (!(outputIndex >= 0 && outputIndex < t2))
          return A.ioore(output, outputIndex);
        output[outputIndex] = 61;
      }
    },
    _BufferCachingBase64Encoder$(urlSafe) {
      return new A._BufferCachingBase64Encoder(urlSafe ? string$.ABCDEFx2d : string$.ABCDEFx2b);
    },
    _AsciiBase64EncoderSink$(_sink, urlSafe) {
      return new A._AsciiBase64EncoderSink(_sink, A._BufferCachingBase64Encoder$(urlSafe));
    },
    _Utf8Base64EncoderSink$(_sink, urlSafe) {
      return new A._Utf8Base64EncoderSink(_sink, A._Base64Encoder$(urlSafe));
    },
    _Base64Decoder$() {
      return new A._Base64Decoder();
    },
    _Base64Decoder__encodeCharacterState(count, bits) {
      return (bits << 2 | count) >>> 0;
    },
    _Base64Decoder__stateCount(state) {
      return state & 3;
    },
    _Base64Decoder__stateBits(state) {
      return B.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Decoder__encodePaddingState(expectedPadding) {
      return -expectedPadding - 1;
    },
    _Base64Decoder__statePadding(state) {
      return -state - 1;
    },
    _Base64Decoder__hasSeenPadding(state) {
      return state < 0;
    },
    _Base64Decoder_decodeChunk(input, start, end, output, outIndex, state) {
      var t1, t2, t3, i, charOr, char, code, outIndex0, t4, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character",
        bits = A._Base64Decoder__stateBits(state),
        count = A._Base64Decoder__stateCount(state),
        inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = input.length, t2 = J.getInterceptor$asx(inverseAlphabet), t3 = output.$flags | 0, i = start, charOr = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(input, i);
        char = input.charCodeAt(i);
        charOr = (charOr | char) >>> 0;
        code = t2.$index(inverseAlphabet, char & 127);
        if (code >= 0) {
          bits = (bits << 6 | code) & 16777215;
          count = count + 1 & 3;
          if (count === 0) {
            outIndex0 = outIndex + 1;
            t3 & 2 && A.throwUnsupportedOperation(output);
            t4 = output.length;
            if (!(outIndex >= 0 && outIndex < t4))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 16 & 255;
            outIndex = outIndex0 + 1;
            if (!(outIndex0 >= 0 && outIndex0 < t4))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 8 & 255;
            outIndex0 = outIndex + 1;
            if (!(outIndex >= 0 && outIndex < t4))
              return A.ioore(output, outIndex);
            output[outIndex] = bits & 255;
            outIndex = outIndex0;
            bits = 0;
          }
          continue;
        } else if (code === -1 && count > 1) {
          if (charOr > 127)
            break;
          if (count === 3) {
            if ((bits & 3) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            outIndex0 = outIndex + 1;
            t1 = B.JSInt_methods._shrOtherPositive$1(bits, 10);
            t3 & 2 && A.throwUnsupportedOperation(output);
            t3 = output.length;
            if (!(outIndex >= 0 && outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = t1;
            t1 = B.JSInt_methods._shrOtherPositive$1(bits, 2);
            if (!(outIndex0 >= 0 && outIndex0 < t3))
              return A.ioore(output, outIndex0);
            output[outIndex0] = t1;
          } else {
            if ((bits & 15) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            t1 = B.JSInt_methods._shrOtherPositive$1(bits, 4);
            t3 & 2 && A.throwUnsupportedOperation(output);
            if (!(outIndex >= 0 && outIndex < output.length))
              return A.ioore(output, outIndex);
            output[outIndex] = t1;
          }
          expectedPadding = (3 - count) * 3;
          return A._Base64Decoder__checkPadding(input, i + 1, end, A._Base64Decoder__encodePaddingState(char === 37 ? expectedPadding + 2 : expectedPadding));
        }
        throw A.wrapException(A.FormatException$(_s17_, input, i));
      }
      if (charOr >= 0 && charOr <= 127)
        return A._Base64Decoder__encodeCharacterState(count, bits);
      for (i = start; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(input, i);
        char = input.charCodeAt(i);
        if (char > 127)
          break;
      }
      throw A.wrapException(A.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer(input, start, end, state) {
      var $length, bufferLength, remainderLength,
        paddingStart = A._Base64Decoder__trimPaddingChars(input, start, end),
        t1 = A._Base64Decoder__stateCount(state);
      if (typeof t1 !== "number")
        return t1.$add();
      $length = t1 + (paddingStart - start);
      bufferLength = B.JSInt_methods._shrOtherPositive$1($length, 2) * 3;
      remainderLength = $length & 3;
      if (remainderLength !== 0 && paddingStart < end)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return A.NativeUint8List_NativeUint8List(bufferLength);
      return $.$get$_Base64Decoder__emptyBuffer();
    },
    _Base64Decoder__trimPaddingChars(input, start, end) {
      var char,
        t1 = input.length,
        newEnd = end,
        index = newEnd,
        padding = 0;
      while (true) {
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          if (!(index >= 0 && index < t1))
            return A.ioore(input, index);
          char = input.charCodeAt(index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if ((char | 32) === 100) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding(input, start, end, state) {
      var expectedPadding, t1, char;
      if (start === end)
        return state;
      expectedPadding = A._Base64Decoder__statePadding(state);
      for (t1 = input.length; expectedPadding > 0;) {
        if (!(start >= 0 && start < t1))
          return A.ioore(input, start);
        char = input.charCodeAt(start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            ++start;
            if (start === end)
              break;
            if (!(start < t1))
              return A.ioore(input, start);
            char = input.charCodeAt(start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          if (!(start < t1))
            return A.ioore(input, start);
          char = input.charCodeAt(start);
        }
        if ((char | 32) !== 100)
          break;
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start !== end)
        throw A.wrapException(A.FormatException$("Invalid padding character", input, start));
      return A._Base64Decoder__encodePaddingState(expectedPadding);
    },
    _Base64DecoderSink$(_sink) {
      return new A._Base64DecoderSink(_sink, A._Base64Decoder$());
    },
    _ByteAdapterSink$(_sink) {
      return new A._ByteAdapterSink(_sink);
    },
    _ConverterStreamEventSink$(converter, sink, $S, $T) {
      return new A._ConverterStreamEventSink(sink, converter.startChunkedConversion$1(sink), $S._eval$1("@<0>")._bind$1($T)._eval$1("_ConverterStreamEventSink<1,2>"));
    },
    _Latin1DecoderSink$(_sink) {
      return new A._Latin1DecoderSink(_sink);
    },
    _Latin1DecoderSink__checkValidLatin1(source, start, end) {
      var t1, i, mask;
      for (t1 = J.getInterceptor$asx(source), i = start, mask = 0; i < end; ++i)
        mask = (mask | t1.$index(source, i)) >>> 0;
      if (mask >= 0 && mask <= 255)
        return;
      A._Latin1DecoderSink__reportInvalidLatin1(source, start, end);
    },
    _Latin1DecoderSink__reportInvalidLatin1(source, start, end) {
      var t1, i, char;
      for (t1 = J.getInterceptor$asx(source), i = start; i < end; ++i) {
        char = t1.$index(source, i);
        if (char < 0 || char > 255)
          throw A.wrapException(A.FormatException$("Source contains non-Latin-1 characters.", source, i));
      }
    },
    _Latin1AllowInvalidDecoderSink$(sink) {
      return new A._Latin1AllowInvalidDecoderSink(sink);
    },
    _StringAdapterSink$(_sink) {
      return new A._StringAdapterSink(_sink);
    },
    _Utf8ConversionSink$(sink, allowMalformed) {
      var t1 = A.StringBuffer$("");
      return new A._Utf8ConversionSink(A._Utf8Decoder$(allowMalformed), sink, t1);
    },
    _Utf8Encoder$withBufferSize(bufferSize) {
      return new A._Utf8Encoder(A._Utf8Encoder__createBuffer(bufferSize));
    },
    _Utf8Encoder__createBuffer(size) {
      return A.NativeUint8List_NativeUint8List(size);
    },
    _Utf8EncoderSink$(_sink) {
      return new A._Utf8EncoderSink(_sink, A._Utf8Encoder__createBuffer(1024));
    },
    _isLeadSurrogate(codeUnit) {
      return (codeUnit & 64512) === 55296;
    },
    _isTailSurrogate(codeUnit) {
      return (codeUnit & 64512) === 56320;
    },
    _combineSurrogatePair(lead, tail) {
      return 65536 + ((lead & 1023) << 10) | tail & 1023;
    },
    _Utf8Decoder_isErrorState(state) {
      return (state & 1) !== 0;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetEncoderSink: function _UnicodeSubsetEncoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._subsetMask = t1;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    _ErrorHandlingAsciiDecoderSink: function _ErrorHandlingAsciiDecoderSink(t0) {
      this._utf8Sink = t0;
    },
    _SimpleAsciiDecoderSink: function _SimpleAsciiDecoderSink(t0) {
      this._convert$_sink = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _BufferCachingBase64Encoder: function _BufferCachingBase64Encoder(t0) {
      this.bufferCache = null;
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _AsciiBase64EncoderSink: function _AsciiBase64EncoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._encoder = t1;
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._encoder = t1;
    },
    Base64Decoder: function Base64Decoder() {
    },
    _Base64Decoder: function _Base64Decoder() {
      this._convert$_state = 0;
    },
    _Base64DecoderSink: function _Base64DecoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._decoder = t1;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    _ByteAdapterSink: function _ByteAdapterSink(t0) {
      this._convert$_sink = t0;
    },
    _ConverterStreamEventSink: function _ConverterStreamEventSink(t0, t1, t2) {
      this._eventSink = t0;
      this._chunkedSink = t1;
      this.$ti = t2;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Converter_bind_closure: function Converter_bind_closure(t0) {
      this.$this = t0;
    },
    Encoding: function Encoding() {
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    _Latin1DecoderSink: function _Latin1DecoderSink(t0) {
      this._convert$_sink = t0;
    },
    _Latin1AllowInvalidDecoderSink: function _Latin1AllowInvalidDecoderSink(t0) {
      this._convert$_sink = t0;
    },
    StringConversionSink: function StringConversionSink() {
    },
    _StringAdapterSink: function _StringAdapterSink(t0) {
      this._convert$_sink = t0;
    },
    _Utf8ConversionSink: function _Utf8ConversionSink(t0, t1, t2) {
      this._decoder = t0;
      this._chunkedSink = t1;
      this._buffer = t2;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._buffer = t0;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink(t0, t1) {
      var _ = this;
      _._convert$_sink = t0;
      _._bufferIndex = _._carry = 0;
      _._buffer = t1;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSink: function __Utf8EncoderSink__Utf8Encoder_StringConversionSink() {
    },
    BigInt_parse(source) {
      return A._BigIntImpl_parse(source, null);
    },
    _BigIntImpl__lastQuoRemDigits() {
      return $._BigIntImpl____lastQuoRemDigits.readField$1$0(type$.Uint16List);
    },
    _BigIntImpl__lastQuoRemDigits0(value) {
      $._BigIntImpl____lastQuoRemDigits.set$value(value);
    },
    _BigIntImpl__lastQuoRemUsed() {
      return $._BigIntImpl____lastQuoRemUsed.readField$1$0(type$.int);
    },
    _BigIntImpl__lastQuoRemUsed0(value) {
      $._BigIntImpl____lastQuoRemUsed.set$value(value);
    },
    _BigIntImpl__lastRemUsed() {
      return $._BigIntImpl____lastRemUsed.readField$1$0(type$.int);
    },
    _BigIntImpl__lastRemUsed0(value) {
      $._BigIntImpl____lastRemUsed.set$value(value);
    },
    _BigIntImpl__lastRem_nsh(value) {
      $._BigIntImpl____lastRem_nsh.set$value(value);
    },
    _BigIntImpl__lastRem_nsh0() {
      return $._BigIntImpl____lastRem_nsh.readField$1$0(type$.int);
    },
    _BigIntImpl_parse(source, radix) {
      var result = A._BigIntImpl__tryParse(source, radix);
      if (result == null)
        throw A.wrapException(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return ((codeUnit | 32) >>> 0) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = A.NativeUint16List_NativeUint16List(chunkCount),
        lastDigitLength = sourceLength - (chunkCount - 1) * 4,
        t2 = digits.length,
        digitIndex = t2 - 1;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex0 = digitIndex - 1;
      digits.$flags & 2 && A.throwUnsupportedOperation(digits);
      if (!(digitIndex >= 0))
        return A.ioore(digits, digitIndex);
      digits[digitIndex] = chunk;
      for (digitIndex = digitIndex0; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (t2 === 1) {
        if (0 >= t2)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      return A._BigIntImpl$_(isNegative, t2, digits);
    },
    _BigIntImpl__parseRadix(source, radix, isNegative) {
      var t1, i, digitValue,
        result = $.$get$_BigIntImpl_zero(),
        base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      for (t1 = source.length, i = 0; i < t1; ++i) {
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= radix)
          return null;
        result = result.$mul(0, base).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(digitValue));
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, isNegative, decimalMatch, hexMatch, nonDecimalMatch, t1, _null = null;
      if (source === "")
        return _null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return _null;
      isNegative = match.$index(0, 1) === "-";
      decimalMatch = match.$index(0, 4);
      hexMatch = match.$index(0, 3);
      nonDecimalMatch = match.$index(0, 5);
      if (radix == null) {
        if (decimalMatch != null)
          return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
        if (hexMatch != null)
          return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (radix === 16)
        t1 = decimalMatch != null || nonDecimalMatch != null;
      else
        t1 = false;
      if (t1) {
        if (decimalMatch == null) {
          nonDecimalMatch.toString;
          t1 = nonDecimalMatch;
        } else
          t1 = decimalMatch;
        return A._BigIntImpl__parseHex(t1, 0, isNegative);
      }
      t1 = decimalMatch == null ? nonDecimalMatch : decimalMatch;
      if (t1 == null) {
        hexMatch.toString;
        t1 = hexMatch;
      }
      return A._BigIntImpl__parseRadix(t1, radix, isNegative);
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl$_(isNegative, used, digits) {
      var t1 = A._BigIntImpl__normalize(used, digits);
      return new A._BigIntImpl(A.boolConversionCheck(J.$eq$(t1, 0)) ? false : isNegative, digits, t1);
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, t2, i, t3,
        resultDigits = A.NativeUint16List_NativeUint16List($length),
        n = to - from;
      for (t1 = digits.length, t2 = resultDigits.$flags | 0, i = 0; i < n; ++i) {
        t3 = from + i;
        if (!(t3 >= 0 && t3 < t1))
          return A.ioore(digits, t3);
        t3 = digits[t3];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, t2, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = A.NativeUint16List_NativeUint16List(4);
          digits.$flags & 2 && A.throwUnsupportedOperation(digits);
          if (3 >= digits.length)
            return A.ioore(digits, 3);
          digits[3] = 32768;
          return A._BigIntImpl$_(true, 4, digits);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = A.NativeUint16List_NativeUint16List(1);
        digits.$flags & 2 && A.throwUnsupportedOperation(digits);
        if (0 >= digits.length)
          return A.ioore(digits, 0);
        digits[0] = value;
        return A._BigIntImpl$_(isNegative, 1, digits);
      }
      if (value <= 4294967295) {
        digits = A.NativeUint16List_NativeUint16List(2);
        digits.$flags & 2 && A.throwUnsupportedOperation(digits);
        t1 = digits.length;
        if (0 >= t1)
          return A.ioore(digits, 0);
        digits[0] = value & 65535;
        t2 = B.JSInt_methods._shrOtherPositive$1(value, 16);
        if (1 >= t1)
          return A.ioore(digits, 1);
        digits[1] = t2;
        return A._BigIntImpl$_(isNegative, 2, digits);
      }
      digits = A.NativeUint16List_NativeUint16List(B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1);
      for (t1 = digits.$flags | 0, i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        t1 & 2 && A.throwUnsupportedOperation(digits);
        if (!(i < digits.length))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      return A._BigIntImpl$_(isNegative, digits.length, digits);
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods.$shr(digit, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl((digit & bitMask) >>> 0, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(digitShift >= 0 && digitShift < resultDigits.length))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.$flags | 0, i = digitsShift; --i, i >= 0;) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t1 = resultUsed - 1;
      if (!(t1 >= 0 && t1 < resultDigits.length))
        return A.ioore(resultDigits, t1);
      if (resultDigits[t1] === 0)
        resultUsed = t1;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods.$shr(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.$flags | 0, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods.$shr(digit, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(last >= 0 && last < resultDigits.length))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      t3 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (used >>> 0 !== used || used >= resultDigits.length)
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, t3, c, i0, t4, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, t3 = accumulatorDigits.$flags | 0, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i >= 0 && i < t1))
          return A.ioore(multiplicandDigits, i);
        t4 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t4 + accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (i >>> 0 !== i || i >= t1)
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    Expando$($T) {
      return new A.Expando(new WeakMap(), $T._eval$1("Expando<0>"));
    },
    Expando__checkType(object) {
      if (object == null || A._isBool(object) || typeof object == "number" || typeof object == "string" || object instanceof A._Record)
        A.Expando__badExpandoKey(object);
    },
    Expando__badExpandoKey(object) {
      throw A.wrapException(A.ArgumentError$value(object, "object", "Expandos are not allowed on strings, numbers, bools, records or null"));
    },
    Finalizer_Finalizer(object, $T) {
      return A._FinalizationRegistryWrapper$(object, $T);
    },
    _FinalizationRegistryWrapper$(callback, $T) {
      var t1 = $.$get$_FinalizationRegistryWrapper__finalizationRegistryConstructor();
      t1 = t1 == null ? null : new t1(A.convertDartClosureToJS(A.wrapZoneUnaryCallback(callback, $T), 1));
      return new A._FinalizationRegistryWrapper(t1, $T._eval$1("_FinalizationRegistryWrapper<0>"));
    },
    int_parse(source, radix) {
      var value = A.int_tryParse(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    int_tryParse(source, radix) {
      return A.Primitives_parseInt(source, radix);
    },
    Error__objectToString(object) {
      return A.Primitives_safeToString(object);
    },
    Error__stringToSafeString(string) {
      return A.Primitives_stringSafeToString(string);
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$empty(growable, $E) {
      return growable ? J.JSArray_JSArray$growable(0, $E) : J.JSArray_JSArray$fixed(0, $E);
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); A.boolConversionCheck(t1.moveNext$0());)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return A.makeListFixedLength(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = A.List_List$_fixedOf(elements, $E);
      return t1;
    },
    List_List$_ofArray(elements, $E) {
      return J.JSArray_JSArray$markGrowable(elements.slice(0), $E);
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A.List_List$_ofArray(elements, $E);
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); A.boolConversionCheck(t1.moveNext$0());)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$_fixedOf(elements, $E) {
      return A.makeListFixedLength(A.List_List$_of(elements, $E), $E);
    },
    List_List$generate($length, generator, $E) {
      var i,
        result = J.JSArray_JSArray$growable($length, $E);
      for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    List_List$unmodifiable(elements, $E) {
      return A.makeFixedListUnmodifiable(A.List_List$from(elements, false, $E), $E);
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var maxLength;
      A.RangeError_checkNotNegative(start, "start");
      if (end != null) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes))
        return A.String__stringFromJSArray(charCodes, start, end);
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromJSArray(list, start, endOrNull) {
      var len = list.length,
        end = endOrNull == null ? len : endOrNull;
      return A.Primitives_stringFromCharCodes(start > 0 || end < len ? list.slice(start, end) : list);
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    String__stringFromIterable(charCodes, start, end) {
      if (end != null)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      return A.Primitives_stringFromCharCodes(A.List_List$of(charCodes, true, type$.int));
    },
    RegExp_RegExp(source, caseSensitive) {
      return A.JSSyntaxRegExp$(source, caseSensitive, false, false, false);
    },
    StringBuffer$($content) {
      return new A.StringBuffer(A.S($content));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(separator))) {
        do
          string = A.StringBuffer__writeOne(string, iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string = A.StringBuffer__writeOne(string, iterator.get$current());
        for (; iterator.moveNext$0();)
          string = A.StringBuffer__writeOne(A.StringBuffer__writeOne(string, separator), iterator.get$current());
      }
      return string;
    },
    StringBuffer__writeOne(string, obj) {
      return A.Primitives_stringConcatUnchecked(string, A.S(obj));
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    _Uri__isWindows() {
      return false;
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var result, bytes, t1, t2, i, t3, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec && $.$get$_Uri__needsNoEncoding().hasMatch$1(text))
        return text;
      result = A.StringBuffer$("");
      bytes = encoding.encode$1(text);
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$asx(canonicalTable);
      i = 0;
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return A.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (byte < 128 && (t2.$index(canonicalTable, B.JSInt_methods._shrOtherPositive$1(byte, 4)) & 1 << (byte & 15)) >>> 0 !== 0)
          result.writeCharCode$1(byte);
        else if (spaceToPlus && byte === 32)
          result.write$1("+");
        else {
          result.write$1("%");
          result.write$1(_s16_[B.JSInt_methods._shrOtherPositive$1(byte, 4) & 15]);
          result.write$1(_s16_[byte & 15]);
        }
        ++i;
      }
      return result.toString$0(0);
    },
    _Uri__makeQueryFromParameters(queryParameters) {
      var params, encoded, $length;
      if (!A.boolConversionCheck($.$get$_Uri__useURLSearchParams()))
        return A._Uri__makeQueryFromParametersDefault(queryParameters);
      params = new URLSearchParams();
      queryParameters.forEach$1(0, new A._Uri__makeQueryFromParameters_closure(params));
      encoded = params.toString();
      $length = encoded.length;
      if ($length > 0 && encoded[$length - 1] === "=")
        encoded = B.JSString_methods.substring$2(encoded, 0, $length - 1);
      return encoded.replace(/=&|\*|%7E/g, m => m === "=&" ? "&" : m === "*" ? "%2A" : "~");
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc) {
      return new A.DateTime(A.DateTime__validate(millisecondsSinceEpoch, 0, isUtc), 0, isUtc);
    },
    Comparable_compare(a, b) {
      return J.compareTo$1$ns(a, b);
    },
    DateTime$now() {
      return new A.DateTime(A.Primitives_dateNow(), 0, false);
    },
    DateTime__validate(millisecondsSinceEpoch, microsecond, isUtc) {
      var _s11_ = "microsecond";
      if (microsecond < 0 || microsecond > 999)
        throw A.wrapException(A.RangeError$range(microsecond, 0, 999, _s11_, null));
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        throw A.wrapException(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (millisecondsSinceEpoch === 864e13 && microsecond !== 0)
        throw A.wrapException(A.ArgumentError$value(microsecond, _s11_, "Time including microseconds is outside valid range"));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return millisecondsSinceEpoch;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return A.S(n);
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return A.S(n);
      if (n >= 10)
        return "0" + A.S(n);
      return "00" + A.S(n);
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return A.S(n);
      return "0" + A.S(n);
    },
    Duration$(microseconds, milliseconds) {
      return new A.Duration(microseconds + 1000 * milliseconds);
    },
    EnumName_get_name(_this) {
      return _this._core$_name;
    },
    EnumByName_byName(_this, $name, $T) {
      var t1, value;
      for (t1 = J.get$iterator$ax(_this); A.boolConversionCheck(t1.moveNext$0());) {
        value = t1.get$current();
        if (A.boolConversionCheck(J.$eq$(value._core$_name, $name)))
          return value;
      }
      throw A.wrapException(A.ArgumentError$value($name, "name", "No enum value with that name"));
    },
    EnumByName_asNameMap(_this, $T) {
      var t2, value,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $T);
      for (t2 = J.get$iterator$ax(_this); A.boolConversionCheck(t2.moveNext$0());) {
        value = t2.get$current();
        t1.$indexSet(0, value._core$_name, value);
      }
      return t1;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return A.Error__stringToSafeString(object);
      return A.Error__objectToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    TypeError$() {
      return new A.TypeError();
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull($name) {
      return new A.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument == null ? A.throwExpression(A.ArgumentError$notNull($name)) : argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, message == null ? "Invalid value" : message);
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidIndex(index, indexable, $name, $length) {
      return A.IndexError_check(index, $length == null ? A._asInt(J.get$length$asx(indexable)) : $length, indexable, null, $name);
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name == null ? "index" : $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable) {
      var t1 = J.get$length$asx(indexable);
      A._asInt(t1);
      return new A.IndexError(t1, true, invalidValue, null, "Index out of range");
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, message == null ? "Index out of range" : message);
    },
    IndexError_check(index, $length, indexable, message, $name) {
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$withLength(index, $length, indexable, message, $name == null ? "index" : $name));
      return index;
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    StackOverflowError$() {
      return new A.StackOverflowError();
    },
    Exception_Exception(message) {
      return A._Exception$(message);
    },
    _Exception$(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.boolConversionCheck(A.isToStringVisiting(iterable))) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      t1 = J.getInterceptor$ax($.toStringVisiting);
      t1.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.removeLast$0($.toStringVisiting);
      }
      t1 = A.StringBuffer$(leftDelimiter);
      t1.writeAll$2(parts, ", ");
      t1.write$1(rightDelimiter);
      return t1.toString$0(0);
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.boolConversionCheck(A.isToStringVisiting(iterable)))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = A.StringBuffer$(leftDelimiter);
      t1 = J.getInterceptor$ax($.toStringVisiting);
      t1.add$1($.toStringVisiting, iterable);
      try {
        buffer.writeAll$2(iterable, ", ");
      } finally {
        t1.removeLast$0($.toStringVisiting);
      }
      buffer.write$1(rightDelimiter);
      return J.toString$0$(buffer);
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t2, elision,
        it = J.get$iterator$ax(iterable),
        t1 = J.getInterceptor$asx(parts),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        t1.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = t1.removeLast$0(parts);
        penultimateString = t1.removeLast$0(parts);
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            t1.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          penultimateString = t1.removeLast$0(parts);
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                t2 = J.get$length$asx(t1.removeLast$0(parts));
                if (typeof t2 !== "number")
                  return t2.$add();
                $length -= t2 + 2;
                --count;
              }
              t1.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      t2 = t1.get$length(parts);
      if (typeof t2 !== "number")
        return t2.$add();
      if (count > t2 + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if ($length > 80) {
          t2 = t1.get$length(parts);
          if (typeof t2 !== "number")
            return t2.$gt();
          t2 = t2 > 3;
        } else
          t2 = false;
        if (!t2)
          break;
        t2 = J.get$length$asx(t1.removeLast$0(parts));
        if (typeof t2 !== "number")
          return t2.$add();
        $length -= t2 + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        t1.add$1(parts, elision);
      t1.add$1(parts, penultimateString);
      t1.add$1(parts, ultimateString);
    },
    List_castFrom(source, $S, $T) {
      return A.CastList$(source, $S, $T);
    },
    MapEntry$_(key, value, $K, $V) {
      return new A.MapEntry(key, value, $K._eval$1("@<0>")._bind$1($V)._eval$1("MapEntry<1,2>"));
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3)
        return A.SystemHash_hash2(J.get$hashCode$(object1), J.get$hashCode$(object2), $.$get$_hashSeed());
      if (B.C_SentinelValue === object4)
        return A.SystemHash_hash3(J.get$hashCode$(object1), J.get$hashCode$(object2), J.get$hashCode$(object3), $.$get$_hashSeed());
      t1 = A.SystemHash_hash4(J.get$hashCode$(object1), J.get$hashCode$(object2), J.get$hashCode$(object3), J.get$hashCode$(object4), $.$get$_hashSeed());
      return t1;
    },
    print(object) {
      A.printToConsole(A.S(object));
    },
    Uri_parse(uri) {
      var dataDelta, indices, t1, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t2, schemeAuth, delta, queryStart0, pathStart0,
        end = uri.length;
      if (end >= 5) {
        dataDelta = A._startsWithData(uri, 0);
        if (dataDelta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, null).get$uri();
        else if (dataDelta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      t1 = J.getInterceptor$ax(indices);
      t1.$indexSet(indices, 0, 0);
      t1.$indexSet(indices, 1, -1);
      t1.$indexSet(indices, 2, -1);
      t1.$indexSet(indices, 7, -1);
      t1.$indexSet(indices, 3, 0);
      t1.$indexSet(indices, 4, 0);
      t1.$indexSet(indices, 5, end);
      t1.$indexSet(indices, 6, end);
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        t1.$indexSet(indices, 7, end);
      schemeEnd = t1.$index(indices, 1);
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          t1.$indexSet(indices, 7, schemeEnd);
      hostStart = t1.$index(indices, 2) + 1;
      portStart = t1.$index(indices, 3);
      pathStart = t1.$index(indices, 4);
      queryStart = t1.$index(indices, 5);
      fragmentStart = t1.$index(indices, 6);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = t1.$index(indices, 7) < 0;
      scheme = null;
      if (isSimple) {
        isSimple = false;
        if (!(hostStart > schemeEnd + 3)) {
          t1 = portStart > 0;
          if (!(t1 && portStart + 1 === pathStart)) {
            if (!A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "\\", pathStart)))
              if (hostStart > 0)
                t2 = A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1)) || A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2));
              else
                t2 = false;
            else
              t2 = true;
            if (!t2) {
              if (!(queryStart < end && queryStart === pathStart + 2 && A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "..", pathStart))))
                t2 = queryStart > pathStart + 2 && A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3));
              else
                t2 = true;
              if (!t2)
                if (schemeEnd === 4) {
                  if (A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "file", 0))) {
                    if (hostStart <= 0) {
                      if (!A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "/", pathStart))) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = B.JSString_methods.$add(schemeAuth, B.JSString_methods.substring$2(uri, pathStart, end));
                      queryStart += delta;
                      fragmentStart += delta;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = "file";
                  } else if (A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "http", 0))) {
                    if (t1 && portStart + 3 === pathStart && A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "80", portStart + 1))) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = "http";
                  }
                } else if (schemeEnd === 5 && A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "https", 0))) {
                  if (t1 && portStart + 4 === pathStart && A.boolConversionCheck(B.JSString_methods.startsWith$2(uri, "443", portStart + 1))) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "https";
                }
              isSimple = !t2;
            }
          }
        }
      }
      if (isSimple)
        return A._SimpleUri$(end < uri.length ? B.JSString_methods.substring$2(uri, 0, end) : uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      return A._Uri__Uri$notSimple(uri, 0, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_encodeQueryComponent(component) {
      return A._Uri__uriEncode(B.List_piR, component, B.C_Utf8Codec, true);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = A.NativeUint8List_NativeUint8List(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          result.$flags & 2 && A.throwUnsupportedOperation(result);
          if (!(partIndex < result.length))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      result.$flags & 2 && A.throwUnsupportedOperation(result);
      if (!(partIndex < result.length))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var error, parseHex, t1, parts, i, partStart, wildcardSeen, seenDot, char, atEnd, isLastWildcard, last, bytes, index, t2, value, wildCardLength, j, _null = null;
      if (end == null)
        end = host.length;
      error = new A.Uri_parseIPv6Address_error(host);
      parseHex = new A.Uri_parseIPv6Address_parseHex(error, host);
      t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      isLastWildcard = J.$eq$(B.JSArray_methods.get$last(parts), -1);
      if (atEnd && !isLastWildcard)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          t1 = J.getInterceptor$asx(last);
          B.JSArray_methods.add$1(parts, (t1.$index(last, 0) << 8 | t1.$index(last, 1)) >>> 0);
          B.JSArray_methods.add$1(parts, (t1.$index(last, 2) << 8 | t1.$index(last, 3)) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = A.NativeUint8List_NativeUint8List(16);
      for (t1 = J.getInterceptor$ax(bytes), i = 0, index = 0; t2 = parts.length, i < t2; ++i) {
        value = parts[i];
        if (value === -1) {
          wildCardLength = 9 - t2;
          for (j = 0; j < wildCardLength; ++j) {
            t1.$indexSet(bytes, index, 0);
            t1.$indexSet(bytes, index + 1, 0);
            index += 2;
          }
        } else {
          t1.$indexSet(bytes, index, B.JSInt_methods._shrOtherPositive$1(value, 8));
          t1.$indexSet(bytes, index + 1, value & 255);
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      A.createSentinel(type$.Map_String_String);
      A.createSentinel(type$.Map_of_String_and_List_String);
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri$notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var port, userInfoStart, userInfo, host, t1, portNumber, path, query, _null = null;
      if (scheme == null)
        if (schemeEnd > start)
          scheme = A._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            A._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      port = _null;
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.int_tryParse(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        }
      } else {
        host = _null;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__Uri(path) {
      var host, query, fragment, port, t1, hasAuthority, _null = null,
        userInfo = A._Uri__makeUserInfo(_null, 0, A._stringOrNullLength(_null));
      if (userInfo == null)
        throw A.wrapException("unreachable");
      host = A._Uri__makeHost(_null, 0, A._stringOrNullLength(_null), false);
      query = A._Uri__makeQuery(_null, 0, A._stringOrNullLength(_null), _null);
      fragment = A._Uri__makeFragment(_null, 0, A._stringOrNullLength(_null));
      port = A._Uri__makePort(_null, "");
      if (host == null)
        if (!A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(userInfo)))
          t1 = port != null;
        else
          t1 = true;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, A._stringOrNullLength(path), _null, "", hasAuthority);
      if (path == null)
        throw A.wrapException("unreachable");
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty("")) && t1 && !A.boolConversionCheck(B.JSString_methods.startsWith$1(path, "/")))
        path = A._Uri__normalizeRelativePath(path, A.boolConversionCheck(B.JSString_methods.get$isNotEmpty("")) || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal("", userInfo, t1 && A.boolConversionCheck(J.startsWith$1$s(path, "//")) ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(segments); A.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (A.boolConversionCheck(B.JSString_methods.contains$1(t2, "/"))) {
          t1 = "Illegal path character " + t2;
          if (argumentError)
            throw A.wrapException(A.ArgumentError$(t1, null));
          else
            throw A.wrapException(A.UnsupportedError$(t1));
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(J.skip$1$ax(segments, firstSegment)); A.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (A.boolConversionCheck(B.JSString_methods.contains$1(t2, A.RegExp_RegExp('["*/:<>?\\\\|]', true))))
          if (argumentError)
            throw A.wrapException(A.ArgumentError$("Illegal character in path", null));
          else
            throw A.wrapException(A.UnsupportedError$("Illegal character in path: " + t2));
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw A.wrapException(A.ArgumentError$(B.JSString_methods.$add(_s21_, A.String_String$fromCharCode(charCode)), null));
      else
        throw A.wrapException(A.UnsupportedError$(B.JSString_methods.$add(_s21_, A.String_String$fromCharCode(charCode))));
    },
    _Uri__computePathSegments(pathToSplit) {
      var t1;
      if (A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(pathToSplit))) {
        if (0 >= pathToSplit.length)
          return A.ioore(pathToSplit, 0);
        t1 = pathToSplit.charCodeAt(0) === 47;
      } else
        t1 = false;
      if (t1)
        pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
      return A.boolConversionCheck(B.JSString_methods.get$isEmpty(pathToSplit)) ? B.List_empty0 : A.List_List$unmodifiable(B.JSArray_methods.map$1$1(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), A.core_Uri_decodeComponent$closure(), type$.dynamic), type$.String);
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      t1 = host.length;
      if (start >>> 0 !== start || start >= t1)
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t1 = start + 1;
        index = A._Uri__checkZoneID(host, t1, t2);
        if (index < t2) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, A.boolConversionCheck(B.JSString_methods.startsWith$2(host, "25", zoneIDstart)) ? index + 3 : zoneIDstart, t2, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t1, index);
        return J.$add$ns(J.$add$ns(J.toLowerCase$0$s(B.JSString_methods.substring$2(host, start, index)), zoneID), "]");
      }
      if (!strictIPv6)
        for (i = start; i < end; ++i) {
          if (!(i < t1))
            return A.ioore(host, i);
          if (host.charCodeAt(i) === 58) {
            index = A._Uri__checkZoneID(host, start, end);
            if (index < end) {
              zoneIDstart = index + 1;
              zoneID = A._Uri__normalizeZoneID(host, A.boolConversionCheck(B.JSString_methods.startsWith$2(host, "25", zoneIDstart)) ? index + 3 : zoneIDstart, end, "%25");
            } else
              zoneID = "";
            A.Uri_parseIPv6Address(host, start, index);
            return J.$add$ns("[" + A.S(B.JSString_methods.substring$2(host, start, index)) + zoneID, "]");
          }
        }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__isZoneIDChar(char) {
      var t1;
      if (char < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(char, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_piR, t1);
        t1 = (B.List_piR[t1] & 1 << (char & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, sourceLength, tail, slice,
        buffer = prefix !== "" ? A.StringBuffer$(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = A.StringBuffer$("");
          buffer.write$1(B.JSString_methods.substring$2(host, sectionStart, index));
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer.write$1(replacement);
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (A.boolConversionCheck(A._Uri__isZoneIDChar(char))) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = A.StringBuffer$("");
            if (sectionStart < index) {
              buffer.write$1(B.JSString_methods.substring$2(host, sectionStart, index));
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = A.StringBuffer$("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2.write$1(slice);
          t2.write$1(A._Uri__escapeChar(char));
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer.write$1(B.JSString_methods.substring$2(host, sectionStart, end));
      return buffer.toString$0(0);
    },
    _Uri__isRegNameChar(char) {
      var t1;
      if (char < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(char, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_4AN, t1);
        t1 = (B.List_4AN[t1] & 1 << (char & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, sourceLength, tail;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = A.StringBuffer$("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          buffer.write$1(!isNormalized ? B.JSString_methods.toLowerCase$0(slice) : slice);
          sourceLength = 3;
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          }
          buffer.write$1(replacement);
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (A.boolConversionCheck(A._Uri__isRegNameChar(char))) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = A.StringBuffer$("");
            if (sectionStart < index) {
              buffer.write$1(B.JSString_methods.substring$2(host, sectionStart, index));
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (A.boolConversionCheck(A._Uri__isGeneralDelimiter(char)))
          A._Uri__fail(host, index, "Invalid character");
        else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = B.JSString_methods.toLowerCase$0(slice);
          if (buffer == null) {
            buffer = A.StringBuffer$("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2.write$1(slice);
          t2.write$1(A._Uri__escapeChar(char));
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer.write$1(!isNormalized ? B.JSString_methods.toLowerCase$0(slice) : slice);
      }
      return buffer.toString$0(0);
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (start >>> 0 !== start || start >= t1)
        return A.ioore(scheme, start);
      if (!A.boolConversionCheck(A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start))))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (!A.boolConversionCheck(A._Uri__isSchemeCharacter(codeUnit)))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? B.JSString_methods.toLowerCase$0(scheme) : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_2jN, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        result = J.join$1$ax(J.map$1$1$ax(pathSegments, new A._Uri__makePath_closure(), type$.String), "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_M2I, true, true);
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(result))) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !A.boolConversionCheck(B.JSString_methods.startsWith$1(result, "/")))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(scheme)) && !hasAuthority && !A.boolConversionCheck(B.JSString_methods.startsWith$1(path, "/")) && !A.boolConversionCheck(B.JSString_methods.startsWith$1(path, "\\")))
        return A._Uri__normalizeRelativePath(path, A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(scheme)) || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null) {
        if (queryParameters != null)
          throw A.wrapException(A.ArgumentError$("Both query and queryParameters specified", null));
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_42A, true, false);
      }
      if (queryParameters == null)
        return null;
      return A._Uri__makeQueryFromParameters(queryParameters);
    },
    _Uri__makeQueryFromParametersDefault(queryParameters) {
      var t1 = {},
        result = A.StringBuffer$("");
      t1.separator = "";
      queryParameters.forEach$1(0, new A._Uri__makeQueryFromParametersDefault_closure(new A._Uri__makeQueryFromParametersDefault_writeParameter(t1, result)));
      return result.toString$0(0);
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_42A, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (A.boolConversionCheck(A._Uri__isUnreservedChar(value)))
        return A.String_String$fromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return J.toUpperCase$0$s(B.JSString_methods.substring$2(source, index, index + 3));
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, t2, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = A.NativeUint8List_NativeUint8List(3);
        t1 = J.getInterceptor$ax(codeUnits);
        t1.$indexSet(codeUnits, 0, 37);
        t2 = B.JSInt_methods._shrOtherPositive$1(char, 4);
        if (!(t2 < 16))
          return A.ioore(_s16_, t2);
        t1.$indexSet(codeUnits, 1, _s16_.charCodeAt(t2));
        t1.$indexSet(codeUnits, 2, _s16_.charCodeAt(char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        codeUnits = A.NativeUint8List_NativeUint8List(3 * encodedBytes);
        for (t1 = J.getInterceptor$ax(codeUnits), index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods.$shr(char, 6 * encodedBytes) & 63 | flag;
          t1.$indexSet(codeUnits, index, 37);
          t2 = byte >>> 4;
          if (!(t2 < 16))
            return A.ioore(_s16_, t2);
          t1.$indexSet(codeUnits, index + 1, _s16_.charCodeAt(t2));
          t1.$indexSet(codeUnits, index + 2, _s16_.charCodeAt(byte & 15));
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1, t2, t3, index, sectionStart, buffer, char, sourceLength, replacement, t4, tail;
      for (t1 = !escapeDelimiters, t2 = component.length, t3 = J.getInterceptor$asx(charTable), index = start, sectionStart = index, buffer = null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127 && (t3.$index(charTable, char >>> 4) & 1 << (char & 15)) >>> 0 !== 0)
          ++index;
        else {
          sourceLength = 1;
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement)
              replacement = "%25";
            else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash)
            replacement = "/";
          else if (t1 && A.boolConversionCheck(A._Uri__isGeneralDelimiter(char))) {
            A._Uri__fail(component, index, "Invalid character");
            throw A.wrapException("unreachable");
          } else {
            if ((char & 64512) === 55296) {
              t4 = index + 1;
              if (t4 < end) {
                if (!(t4 < t2))
                  return A.ioore(component, t4);
                tail = component.charCodeAt(t4);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                }
              }
            }
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = A.StringBuffer$("");
            t4 = buffer;
          } else
            t4 = buffer;
          t4.write$1(B.JSString_methods.substring$2(component, sectionStart, index));
          t4.write$1(replacement);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return null;
      if (sectionStart < end)
        buffer.write$1(B.JSString_methods.substring$2(component, sectionStart, end));
      return buffer.toString$0(0);
    },
    _Uri__isSchemeCharacter(ch) {
      var t1;
      if (ch < 128) {
        t1 = B.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_GVy, t1);
        t1 = (B.List_GVy[t1] & 1 << (ch & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__isGeneralDelimiter(ch) {
      var t1;
      if (ch <= 93) {
        t1 = B.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_VOY, t1);
        t1 = (B.List_VOY[t1] & 1 << (ch & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (A.boolConversionCheck(B.JSString_methods.startsWith$1(path, ".")))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var t1, output, appendSlash, t2;
      if (!A.boolConversionCheck(A._Uri__mayContainDotSegments(path)))
        return path;
      t1 = type$.JSArray_String;
      output = A._setArrayType([], t1);
      for (t1 = B.JSArray_methods.get$iterator(A._setArrayType(path.split("/"), t1)), appendSlash = false; A.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (t2 === "..") {
          if (A.boolConversionCheck(B.JSArray_methods.get$isNotEmpty(output))) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
            if (A.boolConversionCheck(B.JSArray_methods.get$isEmpty(output)))
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === t2;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, t2);
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var t1, output, appendSlash, t2;
      if (!A.boolConversionCheck(A._Uri__mayContainDotSegments(path)))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      t1 = type$.JSArray_String;
      output = A._setArrayType([], t1);
      for (t1 = B.JSArray_methods.get$iterator(A._setArrayType(path.split("/"), t1)), appendSlash = false; A.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (".." === t2) {
          appendSlash = !A.boolConversionCheck(B.JSArray_methods.get$isEmpty(output)) && !A.boolConversionCheck(J.$eq$(B.JSArray_methods.get$last(output), ".."));
          if (appendSlash) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
          } else
            B.JSArray_methods.add$1(output, "..");
        } else {
          appendSlash = "." === t2;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, t2);
        }
      }
      if (!A.boolConversionCheck(B.JSArray_methods.get$isEmpty(output))) {
        t1 = output.length;
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = A.boolConversionCheck(B.JSString_methods.get$isEmpty(output[0]));
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || A.boolConversionCheck(J.$eq$(B.JSArray_methods.get$last(output), "..")))
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && A.boolConversionCheck(A._Uri__isAlphabeticCharacter(path.charCodeAt(0))))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return A.S(B.JSString_methods.substring$2(path, 0, i)) + "%3A" + A.S(B.JSString_methods.substring$1(path, i + 1));
          if (char <= 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_GVy, t2);
            t2 = (B.List_GVy[t2] & 1 << (char & 15)) >>> 0 === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && !A.boolConversionCheck(uri.get$hasAuthority()))
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var hasDriveLetter, result, host,
        segments = uri.get$pathSegments(),
        t1 = J.getInterceptor$asx(segments),
        t2 = t1.get$length(segments);
      if (typeof t2 !== "number")
        return t2.$gt();
      hasDriveLetter = false;
      if (t2 > 0)
        if (t1.$index(segments, 0).length === 2) {
          t2 = t1.$index(segments, 0);
          if (1 >= t2.length)
            return A.ioore(t2, 1);
          t2 = t2.charCodeAt(1) === 58;
          hasDriveLetter = t2;
        }
      if (hasDriveLetter) {
        t2 = t1.$index(segments, 0);
        if (0 >= t2.length)
          return A.ioore(t2, 0);
        A._Uri__checkWindowsDriveLetter(t2.charCodeAt(0), false);
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
      } else
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
      result = A.StringBuffer$("");
      if (A.boolConversionCheck(uri.get$hasAbsolutePath()) && !hasDriveLetter)
        result.write$1("\\");
      if (A.boolConversionCheck(uri.get$hasAuthority())) {
        host = uri.get$host();
        if (A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(host))) {
          result.write$1("\\");
          result.write$1(host);
          result.write$1("\\");
        }
      }
      result.writeAll$2(segments, "\\");
      if (hasDriveLetter && A.boolConversionCheck(J.$eq$(t1.get$length(segments), 1)))
        result.write$1("\\");
      return result.toString$0(0);
    },
    _Uri__hexCharPairToByte(s, pos) {
      var t1, byte, i, t2, charCode;
      for (t1 = s.length, byte = 0, i = 0; i < 2; ++i) {
        t2 = pos + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(s, t2);
        charCode = s.charCodeAt(t2);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = text.length,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        if (!(i >= 0 && i < t1))
          return A.ioore(text, i);
        codeUnit = text.charCodeAt(i);
        t2 = true;
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = plusToSpace && codeUnit === 43;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (B.C_Utf8Codec === encoding || B.C_Latin1Codec === encoding || B.C_AsciiCodec === encoding)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = J.get$codeUnits$s(B.JSString_methods.substring$2(text, start, end));
      else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          if (!(i >= 0 && i < t1))
            return A.ioore(text, i);
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            B.JSArray_methods.add$1(bytes, 32);
          else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = (codeUnit | 32) >>> 0;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    _Uri__isUnreservedChar(char) {
      var t1;
      if (char < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(char, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_piR, t1);
        t1 = (B.List_piR[t1] & 1 << (char & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    UriData$_(_text, _separatorIndices, _uriCache) {
      return new A.UriData(_text, _separatorIndices, _uriCache);
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        if (!(i >= 0))
          return A.ioore(text, i);
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !A.boolConversionCheck(B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1)))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if (B.JSInt_methods.get$isOdd(indices.length))
        text = B.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_42A, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return A.UriData$_(text, indices, sourceUri);
    },
    _createTables() {
      var t1, _i, t2, t3, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "\\", _s1_3 = "?", _s1_4 = "#", _s2_ = "/\\",
        tables = J.JSArray_JSArray$allocateGrowable(22, type$.Uint8List);
      for (t1 = tables.$flags | 0, _i = 0; _i < 22; ++_i) {
        t2 = A.NativeUint8List_NativeUint8List(96);
        t1 & 2 && A.throwUnsupportedOperation(tables);
        tables[_i] = t2;
      }
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 227);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_2, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_2, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_3, 12);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_3, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var t1, t2, t3, i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (t1 = J.getInterceptor$ax(indices), t2 = J.getInterceptor$asx(tables), t3 = uri.length, i = start; i < end; ++i) {
        table = t2.$index(tables, state);
        if (!(i >= 0 && i < t3))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        if (char > 95)
          char = 31;
        if (!(char < table.length))
          return A.ioore(table, char);
        transition = table[char];
        state = transition & 31;
        t1.$indexSet(indices, B.JSInt_methods._shrOtherPositive$1(transition, 5), i);
      }
      return state;
    },
    _SimpleUri$(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache) {
      return new A._SimpleUri(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache);
    },
    _SimpleUri__packageNameEnd(uri) {
      if (A.boolConversionCheck(uri.get$_isPackage()) && !A.boolConversionCheck(uri.get$hasAuthority()))
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _DataUri$(_data, path, query) {
      A.createSentinel(type$.Map_String_String);
      A.createSentinel(type$.Map_of_String_and_List_String);
      return new A._DataUri("data", "", null, null, path, query, null);
    },
    _startsWithData(text, start) {
      var t3, t4, t5, t6,
        t1 = start + 4,
        t2 = text.length;
      if (!(t1 >= 0 && t1 < t2))
        return A.ioore(text, t1);
      t1 = text.charCodeAt(t1);
      if (start >>> 0 !== start || start >= t2)
        return A.ioore(text, start);
      t3 = text.charCodeAt(start);
      t4 = start + 1;
      if (!(t4 < t2))
        return A.ioore(text, t4);
      t4 = text.charCodeAt(t4);
      t5 = start + 2;
      if (!(t5 < t2))
        return A.ioore(text, t5);
      t5 = text.charCodeAt(t5);
      t6 = start + 3;
      if (!(t6 < t2))
        return A.ioore(text, t6);
      return ((t1 ^ 58) * 3 | t3 ^ 100 | t4 ^ 97 | t5 ^ 116 | text.charCodeAt(t6) ^ 97) >>> 0;
    },
    _stringOrNullLength(s) {
      return s == null ? 0 : s.length;
    },
    _skipPackageNameChars(source, start, end) {
      var t1, i, dots, char;
      for (t1 = source.length, i = start, dots = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots = (dots | char ^ 46) >>> 0;
      }
      return -1;
    },
    _caseInsensitiveStartsWith(prefix, string, start) {
      var t1 = A._caseInsensitiveCompareStart(prefix, string, start);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, t2, result, i, prefixChar, t3, stringChar, delta, lowerChar;
      for (t1 = prefix.length, t2 = string.length, result = 0, i = 0; i < t1; ++i) {
        prefixChar = prefix.charCodeAt(i);
        t3 = start + i;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(string, t3);
        stringChar = string.charCodeAt(t3);
        delta = prefixChar ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _FinalizationRegistryWrapper: function _FinalizationRegistryWrapper(t0, t1) {
      this._registry = t0;
      this.$ti = t1;
    },
    _Uri__makeQueryFromParameters_closure: function _Uri__makeQueryFromParameters_closure(t0) {
      this.params = t0;
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    _Uri__makeQueryFromParametersDefault_writeParameter: function _Uri__makeQueryFromParametersDefault_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQueryFromParametersDefault_closure: function _Uri__makeQueryFromParametersDefault_closure(t0) {
      this.writeParameter = t0;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando(t0, t1) {
      this._jsWeakMap = t0;
      this.$ti = t1;
    },
    _createObjectLiteral() {
      return A.createObjectLiteral(type$.JSObject);
    },
    globalContext() {
      return type$.JSObject._as(A.staticInteropGlobalContext());
    },
    JSAnyUtilityExtension_typeofEquals(_this, typeString) {
      return typeof _this === typeString;
    },
    JSAnyUtilityExtension_instanceof(_this, $constructor) {
      return _this instanceof $constructor;
    },
    JSAnyUtilityExtension_dartify(_this) {
      return A.dartify(_this);
    },
    NullableObjectUtilExtension_jsify(_this) {
      return A.jsify(_this);
    },
    ObjectToJSBoxedDartObject_get_toJSBox(_this) {
      var box;
      if (type$.JavaScriptObject._is(_this))
        throw A.wrapException("Attempting to box non-Dart object.");
      box = A.newObject(type$.dynamic);
      box[$.$get$_jsBoxedDartObjectProperty()] = _this;
      return A.JSBoxedDartObject_constructor__(type$.JSObject._as(box));
    },
    JSPromiseToFuture_get_toDart(_this, $T) {
      return A.promiseToFuture(_this, $T);
    },
    JSArrayBufferToByteBuffer_get_toDart(_this) {
      return _this;
    },
    ByteBufferToJSArrayBuffer_get_toJS(_this) {
      return type$.NativeByteBuffer._as(_this);
    },
    JSDataViewToByteData_get_toDart(_this) {
      return _this;
    },
    ByteDataToJSDataView_get_toJS(_this) {
      return _this;
    },
    JSUint8ArrayToUint8List_get_toDart(_this) {
      return _this;
    },
    Uint8ListToJSUint8Array_get_toJS(_this) {
      return _this;
    },
    JSInt32ArrayToInt32List_get_toDart(_this) {
      return _this;
    },
    Int32ListToJSInt32Array_get_toJS(_this) {
      return _this;
    },
    JSArrayToList_get_toDart(_this, $T) {
      return $T._eval$1("List<0>")._is(_this) ? _this : B.JSArray_methods.cast$1$0(_this, $T);
    },
    ListToJSArray_get_toJS(_this, $T) {
      return type$.JSArray_nullable_Object._as(_this);
    },
    JSNumberToNumber_get_toDartDouble(_this) {
      return _this;
    },
    JSNumberToNumber_get_toDartInt(_this) {
      return A._asInt(_this);
    },
    DoubleToJSNumber_get_toJS(_this) {
      return A.JSNumber_constructor__(_this);
    },
    JSBooleanToBool_get_toDart(_this) {
      return _this;
    },
    BoolToJSBoolean_get_toJS(_this) {
      return A.JSBoolean_constructor__(_this);
    },
    JSStringToString_get_toDart(_this) {
      return _this;
    },
    StringToJSString_get_toJS(_this) {
      return A.JSString_constructor__(_this);
    },
    JSAnyOperatorExtension_lessThanOrEqualTo(_this, any) {
      return A.JSBoolean_constructor__(A.lessThanOrEqual(_this, any, type$.dynamic));
    },
    JSObject_constructor_() {
      return A._createObjectLiteral();
    },
    JSBoxedDartObject_constructor__(_jsBoxedDartObject) {
      return _jsBoxedDartObject;
    },
    JSNumber_constructor__(_jsNumber) {
      return _jsNumber;
    },
    JSBoolean_constructor__(_jsBoolean) {
      return _jsBoolean;
    },
    JSString_constructor__(_jsString) {
      return _jsString;
    },
    JSAnyUtilityExtension_instanceOfString(_this, constructorName) {
      var parts, $constructor, t1, t2, t3;
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(constructorName)))
        return false;
      parts = A._setArrayType(constructorName.split("."), type$.JSArray_String);
      $constructor = A.globalContext();
      for (t1 = B.JSArray_methods.get$iterator(parts), t2 = type$.nullable_JSObject; A.boolConversionCheck(t1.moveNext$0());) {
        t3 = t1.get$current();
        $constructor = t2._as($constructor == null ? null : A.JSObjectUnsafeUtilExtension___($constructor, t3));
        if ($constructor == null)
          return false;
      }
      return A.JSAnyUtilityExtension_instanceof(_this, type$.JavaScriptFunction._as($constructor));
    },
    FutureOfVoidToJSPromise_get_toJS(_this) {
      return A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Promise", type$.Object), A._functionToJS2(new A.FutureOfVoidToJSPromise_get_toJS_closure(_this)), type$.JSObject);
    },
    NumToJSExtension_get_toJS(_this) {
      return A.DoubleToJSNumber_get_toJS(B.JSNumber_methods.toDouble$0(_this));
    },
    FutureOfVoidToJSPromise_get_toJS_closure: function FutureOfVoidToJSPromise_get_toJS_closure(t0) {
      this._this = t0;
    },
    FutureOfVoidToJSPromise_get_toJS__closure: function FutureOfVoidToJSPromise_get_toJS__closure(t0) {
      this.resolve = t0;
    },
    FutureOfVoidToJSPromise_get_toJS__closure0: function FutureOfVoidToJSPromise_get_toJS__closure0(t0) {
      this.reject = t0;
    },
    _functionToJS1(f) {
      var result;
      if (A.boolConversionCheck(A.isJSFunction(f)))
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS2(f) {
      var result;
      if (A.boolConversionCheck(A.isJSFunction(f)))
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2) {
          return _call(f, arg1, arg2, arguments.length);
        };
      }(A._callDartFunctionFast2, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS3(f) {
      var result;
      if (A.boolConversionCheck(A.isJSFunction(f)))
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3) {
          return _call(f, arg1, arg2, arg3, arguments.length);
        };
      }(A._callDartFunctionFast3, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS4(f) {
      var result;
      if (A.boolConversionCheck(A.isJSFunction(f)))
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3, arg4) {
          return _call(f, arg1, arg2, arg3, arg4, arguments.length);
        };
      }(A._callDartFunctionFast4, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS5(f) {
      var result;
      if (A.boolConversionCheck(A.isJSFunction(f)))
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3, arg4, arg5) {
          return _call(f, arg1, arg2, arg3, arg4, arg5, arguments.length);
        };
      }(A._callDartFunctionFast5, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast2(callback, arg1, arg2, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast3(callback, arg1, arg2, arg3, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast4(callback, arg1, arg2, arg3, arg4, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 4)
        return callback.call$4(arg1, arg2, arg3, arg4);
      if ($length === 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast5(callback, arg1, arg2, arg3, arg4, arg5, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 5)
        return callback.call$5(arg1, arg2, arg3, arg4, arg5);
      if ($length === 4)
        return callback.call$4(arg1, arg2, arg3, arg4);
      if ($length === 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _noJsifyRequired(o) {
      return o == null || A._isBool(o) || typeof o == "number" || typeof o == "string" || type$.Int8List._is(o) || type$.Uint8List._is(o) || type$.Uint8ClampedList._is(o) || type$.Int16List._is(o) || type$.Uint16List._is(o) || type$.Int32List._is(o) || type$.Uint32List._is(o) || type$.Float32List._is(o) || type$.Float64List._is(o) || type$.ByteBuffer._is(o) || type$.ByteData._is(o);
    },
    jsify(object) {
      var t1;
      if (A.boolConversionCheck(A._noJsifyRequired(object)))
        return object;
      t1 = type$.nullable_Object;
      return new A.jsify__convert(A._IdentityHashMap$(t1, t1)).call$1(object);
    },
    newObject($T) {
      return A.createObjectLiteral($T);
    },
    getProperty(o, $name, $T) {
      return $T._as(o[$name]);
    },
    _getPropertyTrustType(o, $name, $T) {
      return o[$name];
    },
    _setPropertyUnchecked(o, $name, value, $T) {
      return o[$name] = value;
    },
    callMethod(o, method, args, $T) {
      A.assertInteropArgs(args);
      return $T._as(o[method].apply(o, args));
    },
    _callMethodUnchecked0(o, method, $T) {
      return $T._as(o[method]());
    },
    _callMethodUnchecked1(o, method, arg1, $T) {
      return $T._as(o[method](arg1));
    },
    _callMethodUnchecked2(o, method, arg1, arg2, $T) {
      return $T._as(o[method](arg1, arg2));
    },
    _callMethodUnchecked3(o, method, arg1, arg2, arg3, $T) {
      return $T._as(o[method](arg1, arg2, arg3));
    },
    _callMethodUnchecked4(o, method, arg1, arg2, arg3, arg4, $T) {
      return $T._as(o[method](arg1, arg2, arg3, arg4));
    },
    callConstructor(constr, $arguments, $T) {
      var args, factoryFunction;
      if ($arguments == null)
        return $T._as(new constr());
      else
        A.assertInteropArgs($arguments);
      if ($arguments instanceof Array)
        switch ($arguments.length) {
          case 0:
            return $T._as(new constr());
          case 1:
            return $T._as(new constr($arguments[0]));
          case 2:
            return $T._as(new constr($arguments[0], $arguments[1]));
          case 3:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2]));
          case 4:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2], $arguments[3]));
        }
      args = [null];
      B.JSArray_methods.addAll$1(args, $arguments);
      factoryFunction = constr.bind.apply(constr, args);
      String(factoryFunction);
      return $T._as(new factoryFunction());
    },
    _callConstructorUnchecked0(constr, $T) {
      return $T._as(new constr());
    },
    _callConstructorUnchecked1(constr, arg1, $T) {
      return $T._as(new constr(arg1));
    },
    _callConstructorUnchecked2(constr, arg1, arg2, $T) {
      return $T._as(new constr(arg1, arg2));
    },
    lessThanOrEqual(first, second, $T) {
      return first <= second;
    },
    promiseToFuture(jsPromise, $T) {
      var completer = A.Completer_Completer($T);
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return completer.get$future();
    },
    objectKeys(object) {
      return Object.keys(object);
    },
    _isJavaScriptDate(value) {
      return value instanceof Date;
    },
    _isJavaScriptRegExp(value) {
      return value instanceof RegExp;
    },
    isJavaScriptArray(value) {
      return value instanceof Array;
    },
    isJavaScriptSimpleObject(value) {
      var proto = Object.getPrototypeOf(value);
      return proto === Object.prototype || proto === null;
    },
    _isJavaScriptPromise(value) {
      return typeof Promise != "undefined" && value instanceof Promise;
    },
    _dateToDateTime(date) {
      return A.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
    },
    _noDartifyRequired(o) {
      return o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string" || o instanceof Int8Array || o instanceof Uint8Array || o instanceof Uint8ClampedArray || o instanceof Int16Array || o instanceof Uint16Array || o instanceof Int32Array || o instanceof Uint32Array || o instanceof Float32Array || o instanceof Float64Array || o instanceof ArrayBuffer || o instanceof DataView;
    },
    dartify(o) {
      var t1;
      if (A.boolConversionCheck(A._noDartifyRequired(o)))
        return o;
      t1 = type$.nullable_Object;
      return new A.dartify_convert(A._IdentityHashMap$(t1, t1)).call$1(o);
    },
    NullRejectionException$(isUndefined) {
      return new A.NullRejectionException(isUndefined);
    },
    jsify__convert: function jsify__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    dartify_convert: function dartify_convert(t0) {
      this._convertedObjects = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    min(a, b, $T) {
      return Math.min(A.checkNum(a), A.checkNum(b));
    },
    max(a, b, $T) {
      return Math.max(A.checkNum(a), A.checkNum(b));
    },
    pow(x, exponent) {
      return Math.pow(x, exponent);
    },
    Random_Random() {
      return B.C__JSRandom;
    },
    Random_Random$secure() {
      return $.$get$Random__secureRandom();
    },
    _JSSecureRandom$() {
      var t1 = new A._JSSecureRandom(A.NativeByteData_NativeByteData(8));
      t1._JSSecureRandom$0();
      return t1;
    },
    _JSRandom: function _JSRandom() {
    },
    _JSSecureRandom: function _JSSecureRandom(t0) {
      this._math$_buffer = t0;
    },
    Uint8List_Uint8List$view(buffer, offsetInBytes, $length) {
      return J.asUint8List$2$x(buffer, offsetInBytes, $length);
    },
    Endian: function Endian() {
    },
    SingleSubscriptionTransformer$($S, $T) {
      return new A.SingleSubscriptionTransformer($S._eval$1("@<0>")._bind$1($T)._eval$1("SingleSubscriptionTransformer<1,2>"));
    },
    SingleSubscriptionTransformer: function SingleSubscriptionTransformer(t0) {
      this.$ti = t0;
    },
    SingleSubscriptionTransformer_bind_closure: function SingleSubscriptionTransformer_bind_closure(t0, t1) {
      this.$this = t0;
      this.subscription = t1;
    },
    SingleSubscriptionTransformer_bind_closure0: function SingleSubscriptionTransformer_bind_closure0(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    NonGrowableListMixin__throw() {
      throw A.wrapException(A.UnsupportedError$(string$.Cannotc));
    },
    UnmodifiableMapMixin__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable Map"));
    },
    NonGrowableListMixin: function NonGrowableListMixin() {
    },
    UnmodifiableMapMixin: function UnmodifiableMapMixin() {
    },
    _ReadWriteMutexRequest$(isRead) {
      return new A._ReadWriteMutexRequest(isRead, A.Completer_Completer(type$.void));
    },
    ReadWriteMutex$() {
      return new A.ReadWriteMutex(A._setArrayType([], type$.JSArray__ReadWriteMutexRequest));
    },
    _ReadWriteMutexRequest: function _ReadWriteMutexRequest(t0, t1) {
      this.isRead = t0;
      this.completer = t1;
    },
    ReadWriteMutex: function ReadWriteMutex(t0) {
      this._waiting = t0;
      this._mutex$_state = 0;
    },
    createInternal() {
      return A.Context$_internal();
    },
    Context_Context(current, style) {
      if (current == null)
        current = style == null ? A.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return A.Context$_(type$.InternalStyle._as(style), current);
    },
    Context$_internal() {
      return new A.Context(type$.InternalStyle._as($.$get$Style_platform()), null);
    },
    Context$_(style, _current) {
      return new A.Context(style, _current);
    },
    _validateArgList(method, args) {
      var t2, numArgs, numArgs0, message,
        t1 = J.getInterceptor$asx(args),
        i = 1;
      while (true) {
        t2 = t1.get$length(args);
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(i < t2))
          break;
        c$0: {
          if (t1.$index(args, i) == null || t1.$index(args, i - 1) != null)
            break c$0;
          for (numArgs = t1.get$length(args); numArgs >= 1; numArgs = numArgs0) {
            numArgs0 = numArgs - 1;
            if (t1.$index(args, numArgs0) != null)
              break;
          }
          message = A.StringBuffer$("");
          message.write$1(method + "(");
          message.write$1(J.join$1$ax(J.map$1$1$ax(t1.take$1(args, numArgs), new A._validateArgList_closure(), type$.String), ", "));
          message.write$1("): part " + (i - 1) + " was null, but part " + i + " was not.");
          throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
        }
        ++i;
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    _PathDirection: function _PathDirection(t0) {
      this.name = t0;
    },
    _PathRelation: function _PathRelation(t0) {
      this.name = t0;
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path),
        isRootRelative = style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      if (A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(path))) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = style.isSeparator$1(path.charCodeAt(0));
      } else
        t1 = false;
      if (t1) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (t1 = path.length, i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return A.ParsedPath$_(style, root, isRootRelative, parts, separators);
    },
    ParsedPath$_(style, root, isRootRelative, parts, separators) {
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      if (!A.boolConversionCheck(J.$eq$(A.Uri_base().get$scheme(), "file")))
        return $.$get$Style_url();
      if (!A.boolConversionCheck(J.endsWith$1$s(A.Uri_base().get$path(), "/")))
        return $.$get$Style_url();
      if (A._Uri__Uri("a/b").toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle$() {
      return new A.PosixStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("[^/]$", true), A.RegExp_RegExp("^/", true));
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle$() {
      return new A.UrlStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true), A.RegExp_RegExp("^/", true));
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle$() {
      return new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true), A.RegExp_RegExp("[^/\\\\]$", true), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true));
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    SqliteUpdate$(kind, tableName, rowId) {
      return new A.SqliteUpdate(kind, tableName, rowId);
    },
    CommonDatabase: function CommonDatabase() {
    },
    SqliteUpdateKind: function SqliteUpdateKind(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SqliteUpdate: function SqliteUpdate(t0, t1, t2) {
      this.kind = t0;
      this.tableName = t1;
      this.rowId = t2;
    },
    SqliteException$(extendedResultCode, message, explanation, causingStatement, parametersToStatement, operation) {
      return new A.SqliteException(message, explanation, extendedResultCode, operation, causingStatement, parametersToStatement);
    },
    SqliteException: function SqliteException(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.message = t0;
      _.explanation = t1;
      _.extendedResultCode = t2;
      _.operation = t3;
      _.causingStatement = t4;
      _.parametersToStatement = t5;
    },
    SqliteException_toString_closure: function SqliteException_toString_closure() {
    },
    SqliteResult$(resultCode, result, $T) {
      return new A.SqliteResult(resultCode, result, $T._eval$1("SqliteResult<0>"));
    },
    RawSqliteBindings: function RawSqliteBindings() {
    },
    SqliteResult: function SqliteResult(t0, t1, t2) {
      this.resultCode = t0;
      this.result = t1;
      this.$ti = t2;
    },
    RawSqliteDatabase: function RawSqliteDatabase() {
    },
    RawStatementCompiler: function RawStatementCompiler() {
    },
    RawSqliteStatement: function RawSqliteStatement() {
    },
    RawSqliteContext: function RawSqliteContext() {
    },
    RawSqliteValue: function RawSqliteValue() {
    },
    FinalizableDatabase$(bindings, database) {
      return new A.FinalizableDatabase(bindings, database, A._setArrayType([], type$.JSArray_FinalizableStatement));
    },
    DatabaseImplementation$(bindings, database) {
      var t1 = new A.DatabaseImplementation(bindings, database, A.FinalizableDatabase$(bindings, database));
      t1.DatabaseImplementation$2(bindings, database);
      return t1;
    },
    _StreamHandlers$(database, register, unregister, $T, SyncCallback) {
      var t1 = new A._StreamHandlers(database, A._setArrayType([], $T._eval$1("JSArray<MultiStreamController<0>>")), register, unregister, $T._eval$1("@<0>")._bind$1(SyncCallback)._eval$1("_StreamHandlers<1,2>"));
      t1._StreamHandlers$3$database$register$unregister(database, register, unregister, $T, SyncCallback);
      return t1;
    },
    FinalizableDatabase: function FinalizableDatabase(t0, t1, t2) {
      this.bindings = t0;
      this.database = t1;
      this._statements = t2;
    },
    DatabaseImplementation: function DatabaseImplementation(t0, t1, t2) {
      var _ = this;
      _.bindings = t0;
      _.database = t1;
      _.finalizable = t2;
      _._commits = _._rollbacks = _._updates = null;
      _._database$_isClosed = false;
    },
    DatabaseImplementation__updatesHandler_closure: function DatabaseImplementation__updatesHandler_closure(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__updatesHandler__closure: function DatabaseImplementation__updatesHandler__closure(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__updatesHandler_closure0: function DatabaseImplementation__updatesHandler_closure0(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__rollbackHandler_closure: function DatabaseImplementation__rollbackHandler_closure(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__rollbackHandler__closure: function DatabaseImplementation__rollbackHandler__closure(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__rollbackHandler_closure0: function DatabaseImplementation__rollbackHandler_closure0(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__commitHandler_closure: function DatabaseImplementation__commitHandler_closure(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__commitHandler__closure: function DatabaseImplementation__commitHandler__closure(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__commitHandler_closure0: function DatabaseImplementation__commitHandler_closure0(t0) {
      this.$this = t0;
    },
    DatabaseImplementation__prepareInternal_freeIntermediateResults: function DatabaseImplementation__prepareInternal_freeIntermediateResults(t0, t1) {
      this.compiler = t0;
      this.createdStatements = t1;
    },
    _StreamHandlers: function _StreamHandlers(t0, t1, t2, t3, t4) {
      var _ = this;
      _._database$_database = t0;
      _._asyncListeners = t1;
      _._syncCallback = null;
      _._register = t2;
      _._unregister = t3;
      _._database$_stream = null;
      _.$ti = t4;
    },
    _StreamHandlers_closure: function _StreamHandlers_closure(t0, t1) {
      this.$this = t0;
      this.T = t1;
    },
    _StreamHandlers_closure_addListener: function _StreamHandlers_closure_addListener(t0, t1) {
      this.$this = t0;
      this.newListener = t1;
    },
    _StreamHandlers_closure_removeListener: function _StreamHandlers_closure_removeListener(t0, t1) {
      this.$this = t0;
      this.newListener = t1;
    },
    FinalizablePart: function FinalizablePart() {
    },
    disposeFinalizer_closure: function disposeFinalizer_closure() {
    },
    Sqlite3Implementation: function Sqlite3Implementation() {
    },
    FinalizableStatement$(statement) {
      return new A.FinalizableStatement(statement);
    },
    StatementImplementation$(sql, database, statement) {
      return new A.StatementImplementation(statement, database, A.FinalizableStatement$(statement), sql);
    },
    FinalizableStatement: function FinalizableStatement(t0) {
      this.statement = t0;
      this._inResetState = true;
      this._statement$_closed = false;
    },
    StatementImplementation: function StatementImplementation(t0, t1, t2, t3) {
      var _ = this;
      _.statement = t0;
      _.database = t1;
      _.finalizable = t2;
      _.sql = t3;
      _._latestArguments = null;
    },
    InMemoryFileSystem$($name, random) {
      var t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Uint8Buffer);
      return new A.InMemoryFileSystem(t1, random == null ? $.$get$BaseVirtualFileSystem__fallbackRandom() : random, $name);
    },
    _InMemoryFile$(vfs, path, deleteOnClose) {
      return new A._InMemoryFile(vfs, path, deleteOnClose);
    },
    InMemoryFileSystem: function InMemoryFileSystem(t0, t1, t2) {
      this.fileData = t0;
      this.random = t1;
      this.name = t2;
    },
    _InMemoryFile: function _InMemoryFile(t0, t1, t2) {
      var _ = this;
      _.vfs = t0;
      _.path = t1;
      _.deleteOnClose = t2;
      _._lockMode = 0;
    },
    ResultSet$(_columnNames, tableNames, rows) {
      var t1 = new A.ResultSet(rows, _columnNames, tableNames, B.Map_empty);
      t1.Cursor$2(_columnNames, tableNames);
      return t1;
    },
    Row$(_result, data) {
      return new A.Row(_result, A.List_List$unmodifiable(data, type$.nullable_Object));
    },
    _ResultIterator$(result) {
      return new A._ResultIterator(result);
    },
    Cursor: function Cursor() {
    },
    ResultSet: function ResultSet(t0, t1, t2, t3) {
      var _ = this;
      _.rows = t0;
      _._columnNames = t1;
      _.tableNames = t2;
      _._calculatedIndexes = t3;
    },
    Row: function Row(t0, t1) {
      this._result = t0;
      this._result_set$_data = t1;
    },
    _ResultIterator: function _ResultIterator(t0) {
      this.result = t0;
      this.index = -1;
    },
    _ResultSet_Cursor_ListMixin: function _ResultSet_Cursor_ListMixin() {
    },
    _ResultSet_Cursor_ListMixin_NonGrowableListMixin: function _ResultSet_Cursor_ListMixin_NonGrowableListMixin() {
    },
    _Row_Object_UnmodifiableMapMixin: function _Row_Object_UnmodifiableMapMixin() {
    },
    _Row_Object_UnmodifiableMapMixin_MapMixin: function _Row_Object_UnmodifiableMapMixin_MapMixin() {
    },
    OpenMode: function OpenMode(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    IndexedParameters$(parameters) {
      return new A.IndexedParameters(parameters);
    },
    CommonPreparedStatement: function CommonPreparedStatement() {
    },
    IndexedParameters: function IndexedParameters(t0) {
      this.parameters = t0;
    },
    VfsException$(returnCode) {
      return new A.VfsException(returnCode);
    },
    Sqlite3Filename$(path) {
      return new A.Sqlite3Filename(path);
    },
    BaseVirtualFileSystem_generateRandomness(target, random) {
      var t1, i, t2;
      if (random == null)
        random = $.$get$BaseVirtualFileSystem__fallbackRandom();
      for (t1 = target.length, i = 0; i < t1; ++i) {
        t2 = random.nextInt$1(256);
        target.$flags & 2 && A.throwUnsupportedOperation(target);
        target[i] = t2;
      }
    },
    VfsException: function VfsException(t0) {
      this.returnCode = t0;
    },
    Sqlite3Filename: function Sqlite3Filename(t0) {
      this.path = t0;
    },
    VirtualFileSystem: function VirtualFileSystem() {
    },
    BaseVirtualFileSystem: function BaseVirtualFileSystem() {
    },
    BaseVfsFile: function BaseVfsFile() {
    },
    WasmSqliteBindings$(bindings) {
      return new A.WasmSqliteBindings(bindings);
    },
    WasmDatabase$(bindings, db) {
      return new A.WasmDatabase(bindings, db);
    },
    WasmStatementCompiler$(database, sql) {
      var t1 = database.bindings;
      return new A.WasmStatementCompiler(database, sql, t1.malloc$1(4), t1.malloc$1(4));
    },
    WasmStatement$(database, stmt) {
      var t1 = A._setArrayType([], type$.JSArray_int);
      return new A.WasmStatement(stmt, database.bindings, t1);
    },
    WasmContext$(bindings, context, callbacks) {
      return new A.WasmContext();
    },
    WasmValue$(bindings, value) {
      return new A.WasmValue();
    },
    WasmValueList$(bindings, $length, value) {
      return new A.WasmValueList(bindings, $length, value);
    },
    WasmSqliteBindings: function WasmSqliteBindings(t0) {
      this.bindings = t0;
    },
    WasmDatabase: function WasmDatabase(t0, t1) {
      this.bindings = t0;
      this.db = t1;
    },
    WasmStatementCompiler: function WasmStatementCompiler(t0, t1, t2, t3) {
      var _ = this;
      _.database = t0;
      _.sql = t1;
      _.stmtOut = t2;
      _.pzTail = t3;
    },
    WasmStatement: function WasmStatement(t0, t1, t2) {
      this.stmt = t0;
      this.bindings = t1;
      this._allocatedArguments = t2;
    },
    WasmContext: function WasmContext() {
    },
    WasmValue: function WasmValue() {
    },
    WasmValueList: function WasmValueList(t0, t1, t2) {
      this.bindings = t0;
      this.length = t1;
      this.value = t2;
    },
    RequestExt_cursorIterator(_this, $T) {
      return A._CursorReader$(_this, $T);
    },
    _CursorReader$(_cursorRequest, $T) {
      return new A._CursorReader(_cursorRequest, $T._eval$1("_CursorReader<0>"));
    },
    CompleteIdbRequest_complete(_this, $T) {
      var completer = A.Completer_Completer$sync($T);
      B.EventStreamProvider_success.forTarget$1(_this).listen$1(new A.CompleteIdbRequest_complete_closure(completer, _this, $T));
      B.EventStreamProvider_error.forTarget$1(_this).listen$1(new A.CompleteIdbRequest_complete_closure0(completer, _this));
      return completer.get$future();
    },
    CompleteOpenIdbRequest_completeOrBlocked(_this, $T) {
      var completer = A.Completer_Completer$sync($T);
      B.EventStreamProvider_success.forTarget$1(_this).listen$1(new A.CompleteOpenIdbRequest_completeOrBlocked_closure(completer, _this, $T));
      B.EventStreamProvider_error.forTarget$1(_this).listen$1(new A.CompleteOpenIdbRequest_completeOrBlocked_closure0(completer, _this));
      B.EventStreamProvider_blocked.forTarget$1(_this).listen$1(new A.CompleteOpenIdbRequest_completeOrBlocked_closure1(completer, _this));
      return completer.get$future();
    },
    _CursorReader: function _CursorReader(t0, t1) {
      var _ = this;
      _._indexed_db0$_onError = _._onSuccess = _._cursor = null;
      _._cursorRequest = t0;
      _.$ti = t1;
    },
    _CursorReader_moveNext_closure: function _CursorReader_moveNext_closure(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    _CursorReader_moveNext_closure0: function _CursorReader_moveNext_closure0(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    CompleteIdbRequest_complete_closure: function CompleteIdbRequest_complete_closure(t0, t1, t2) {
      this.completer = t0;
      this._this = t1;
      this.T = t2;
    },
    CompleteIdbRequest_complete_closure0: function CompleteIdbRequest_complete_closure0(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    CompleteOpenIdbRequest_completeOrBlocked_closure: function CompleteOpenIdbRequest_completeOrBlocked_closure(t0, t1, t2) {
      this.completer = t0;
      this._this = t1;
      this.T = t2;
    },
    CompleteOpenIdbRequest_completeOrBlocked_closure0: function CompleteOpenIdbRequest_completeOrBlocked_closure0(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    CompleteOpenIdbRequest_completeOrBlocked_closure1: function CompleteOpenIdbRequest_completeOrBlocked_closure1(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    WasmInstance$_(nativeInstance) {
      var t1 = type$.String;
      t1 = new A.WasmInstance(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.JavaScriptFunction), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.JSObject));
      t1.WasmInstance$_$1(nativeInstance);
      return t1;
    },
    WasmInstance_load(response, imports) {
      return A.WasmInstance_load$body(response, imports);
    },
    WasmInstance_load$body(response, imports) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmInstance),
        $async$returnValue, t1, native, exports, importsJs;
      var $async$WasmInstance_load = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              importsJs = A.JSObject_constructor_();
              imports.forEach$1(0, new A.WasmInstance_load_closure(importsJs));
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked2(A._getPropertyTrustType(A.staticInteropGlobalContext(), "WebAssembly", type$.Object), "instantiateStreaming", response, importsJs, t1), t1), $async$WasmInstance_load);
            case 3:
              // returning from await.
              native = $async$result;
              exports = A.getProperty(A.getProperty(native, "instance", t1), "exports", t1);
              if (A.boolConversionCheck(A.JSObjectUnsafeUtilExtension_has(exports, "_initialize")))
                A._callMethodUnchecked0(type$.JavaScriptFunction._as(A.JSObjectUnsafeUtilExtension___(exports, "_initialize")), "call", type$.nullable_Object);
              $async$returnValue = A.WasmInstance$_(A.getProperty(native, "instance", t1));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmInstance_load, $async$completer);
    },
    WasmInstance: function WasmInstance(t0, t1) {
      this.functions = t0;
      this.globals = t1;
    },
    WasmInstance_load_closure: function WasmInstance_load_closure(t0) {
      this.importsJs = t0;
    },
    WasmInstance_load__closure: function WasmInstance_load__closure(t0) {
      this.moduleJs = t0;
    },
    WasmSqlite3_loadFromUrl(uri, headers) {
      return A.WasmSqlite3_loadFromUrl$body(uri, headers);
    },
    WasmSqlite3_loadFromUrl$body(uri, headers) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmSqlite3),
        $async$returnValue, headersJs, options, t1, t2, jsUri, $async$temp1;
      var $async$WasmSqlite3_loadFromUrl = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (headers != null) {
                headersJs = A.JSObject_constructor_();
                headers.forEach$1(0, new A.WasmSqlite3_loadFromUrl_closure(headersJs));
                options = {headers: headersJs};
              } else
                options = null;
              t1 = type$.Object;
              t2 = type$.JSObject;
              jsUri = A.boolConversionCheck(uri.get$isAbsolute()) ? A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "URL", t1), uri.toString$0(0), t2) : A._callConstructorUnchecked2(A._getPropertyTrustType(A.staticInteropGlobalContext(), "URL", t1), uri.toString$0(0), J.toString$0$(A.Uri_base()), t2);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked2(A.staticInteropGlobalContext(), "fetch", jsUri, options, t2), t2), $async$WasmSqlite3_loadFromUrl);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.WasmSqlite3__load($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmSqlite3_loadFromUrl, $async$completer);
    },
    WasmSqlite3__load(fetchResponse) {
      return A.WasmSqlite3__load$body(fetchResponse);
    },
    WasmSqlite3__load$body(fetchResponse) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmSqlite3),
        $async$returnValue, $async$temp1;
      var $async$WasmSqlite3__load = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.WasmBindings_instantiateAsync(fetchResponse), $async$WasmSqlite3__load);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.WasmSqlite3$_($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmSqlite3__load, $async$completer);
    },
    WasmSqlite3$_(bindings) {
      return new A.WasmSqlite3(A.WasmSqliteBindings$(bindings));
    },
    WasmSqlite3: function WasmSqlite3(t0) {
      this.bindings = t0;
    },
    WasmSqlite3_loadFromUrl_closure: function WasmSqlite3_loadFromUrl_closure(t0) {
      this.headersJs = t0;
    },
    WasmVfs$(vfsName, workerOptions) {
      var t3, t4,
        t1 = type$.JSObject,
        t2 = A.RequestResponseSynchronizer_RequestResponseSynchronizer(A.getProperty(workerOptions, "synchronizationBuffer", t1));
      t1 = A.MessageSerializer$(A.getProperty(workerOptions, "communicationBuffer", t1));
      t3 = A.Context_Context("/", $.$get$Style_url());
      t4 = $.$get$BaseVirtualFileSystem__fallbackRandom();
      return new A.WasmVfs(t2, t1, t3, t4, vfsName);
    },
    WasmVfs_createOptions(root) {
      var t1 = A.RequestResponseSynchronizer_createBuffer();
      return A.WorkerOptions_constructor_(A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "SharedArrayBuffer", type$.Object), 67584, type$.JSObject), root, t1);
    },
    WasmFile$(vfs, fd) {
      return new A.WasmFile(vfs, fd);
    },
    WasmVfs: function WasmVfs(t0, t1, t2, t3, t4) {
      var _ = this;
      _.synchronizer = t0;
      _.serializer = t1;
      _.pathContext = t2;
      _.random = t3;
      _.name = t4;
    },
    WasmFile: function WasmFile(t0, t1) {
      this.vfs = t0;
      this.fd = t1;
      this.lockStatus = 0;
    },
    RequestResponseSynchronizer$_(buffer) {
      return new A.RequestResponseSynchronizer(A.SharedArrayBuffer_asInt32List(buffer));
    },
    RequestResponseSynchronizer_RequestResponseSynchronizer(buffer) {
      var t1 = buffer == null;
      if (!t1 && !A.boolConversionCheck(J.$eq$(A.getProperty(buffer, "byteLength", type$.int), 8)))
        throw A.wrapException(A.ArgumentError$("Must be 8 in length", null));
      return A.RequestResponseSynchronizer$_(t1 ? A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "SharedArrayBuffer", type$.Object), 8, type$.JSObject) : buffer);
    },
    RequestResponseSynchronizer_createBuffer() {
      var buffer = A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "SharedArrayBuffer", type$.Object), 8, type$.JSObject);
      A.Atomics_store(A.SharedArrayBuffer_asInt32List(buffer), 0, -1);
      return buffer;
    },
    MessageSerializer$(buffer) {
      return new A.MessageSerializer(buffer, A.SharedArrayBuffer_asByteData(buffer, 65536, 2048), A.SharedArrayBuffer_asUint8List(buffer));
    },
    MessageSerializer_readEmpty(unused) {
      type$.MessageSerializer._as(unused);
      return B.C_EmptyMessage;
    },
    MessageSerializer_readFlags(msg) {
      var t1 = type$.MessageSerializer._as(msg).dataView,
        t2 = J.getInterceptor$x(t1);
      return A.Flags$(t2.getInt32$1(t1, 0), t2.getInt32$1(t1, 4), t2.getInt32$1(t1, 8));
    },
    MessageSerializer_readNameAndFlags(msg) {
      var t1, t2;
      type$.MessageSerializer._as(msg);
      t1 = msg.dataView;
      t2 = J.getInterceptor$x(t1);
      return A.NameAndInt32Flags$(msg._readString$1(12), t2.getInt32$1(t1, 0), t2.getInt32$1(t1, 4), t2.getInt32$1(t1, 8));
    },
    Flags$(flag0, flag1, flag2) {
      return new A.Flags(flag0, flag1, flag2);
    },
    NameAndInt32Flags$($name, flag0, flag1, flag2) {
      return new A.NameAndInt32Flags($name, flag0, flag1, flag2);
    },
    RequestResponseSynchronizer: function RequestResponseSynchronizer(t0) {
      this.int32View = t0;
    },
    MessageSerializer: function MessageSerializer(t0, t1, t2) {
      this.buffer = t0;
      this.dataView = t1;
      this.byteView = t2;
    },
    WorkerOperation: function WorkerOperation(t0, t1, t2, t3, t4) {
      var _ = this;
      _.readRequest = t0;
      _.readResponse = t1;
      _.index = t2;
      _._core$_name = t3;
      _.$ti = t4;
    },
    Message: function Message() {
    },
    EmptyMessage: function EmptyMessage() {
    },
    Flags: function Flags(t0, t1, t2) {
      this.flag0 = t0;
      this.flag1 = t1;
      this.flag2 = t2;
    },
    NameAndInt32Flags: function NameAndInt32Flags(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.flag0 = t1;
      _.flag1 = t2;
      _.flag2 = t3;
    },
    _log(message) {
    },
    WorkerOptions_constructor_(communicationBuffer, root, synchronizationBuffer) {
      return {clientVersion: 1, root: root, synchronizationBuffer: synchronizationBuffer, communicationBuffer: communicationBuffer};
    },
    _ResolvedPath$(fullPath, directory, filename) {
      return new A._ResolvedPath(fullPath, directory, filename);
    },
    VfsWorker$_(options, root) {
      var t3,
        t1 = type$._OpenedFileHandle,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, t1);
      t1 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      t3 = type$.JSObject;
      return new A.VfsWorker(A.RequestResponseSynchronizer_RequestResponseSynchronizer(A.getProperty(options, "synchronizationBuffer", t3)), A.MessageSerializer$(A.getProperty(options, "communicationBuffer", t3)), root, t2, t1);
    },
    VfsWorker_create(options) {
      return A.VfsWorker_create$body(options);
    },
    VfsWorker_create$body(options) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.VfsWorker),
        $async$returnValue, root, t1;
      var $async$VfsWorker_create = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.storageManager();
              t1.toString;
              $async$goto = 3;
              return A._asyncAwait(A.StorageManagerApi_get_directory(t1), $async$VfsWorker_create);
            case 3:
              // returning from await.
              root = $async$result;
              t1 = J.get$iterator$ax(J.split$1$s($.$get$url(), A.getProperty(options, "root", type$.String)));
            case 4:
              // for condition
              if (!A.boolConversionCheck(t1.moveNext$0())) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_getDirectory(root, t1.get$current(), true), $async$VfsWorker_create);
            case 6:
              // returning from await.
              root = $async$result;
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              $async$returnValue = A.VfsWorker$_(options, root);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$VfsWorker_create, $async$completer);
    },
    _OpenedFileHandle$(deleteOnClose, directory, fd, file, filename, fullPath, readonly) {
      return new A._OpenedFileHandle(fd, readonly, deleteOnClose, fullPath, directory, filename, file);
    },
    _ResolvedPath: function _ResolvedPath(t0, t1, t2) {
      this.fullPath = t0;
      this.directory = t1;
      this.filename = t2;
    },
    VfsWorker: function VfsWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _.synchronizer = t0;
      _.messages = t1;
      _.root = t2;
      _._fdCounter = 0;
      _._stopped = false;
      _._openFiles = t3;
      _._implicitlyHeldLocks = t4;
    },
    _OpenedFileHandle: function _OpenedFileHandle(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.fd = t0;
      _.readonly = t1;
      _.deleteOnClose = t2;
      _.fullPath = t3;
      _.directory = t4;
      _.filename = t5;
      _.file = t6;
      _.explicitlyLocked = false;
      _.syncHandle = null;
    },
    AsynchronousIndexedDbFileSystem$(_dbName) {
      return new A.AsynchronousIndexedDbFileSystem(_dbName);
    },
    _FileWriteRequest$(originalContent) {
      return new A._FileWriteRequest(originalContent, A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Uint8List), originalContent.length);
    },
    _OffsetAndBuffer$(offset, buffer) {
      return new A._OffsetAndBuffer(offset, buffer);
    },
    IndexedDbFileSystem$_(dbName, random, vfsName) {
      var t4, t5,
        t1 = A.LinkedList$(type$._IndexedDbWorkItem),
        t2 = type$.String,
        t3 = A.LinkedHashSet_LinkedHashSet$_empty(t2);
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.int);
      t4 = A.AsynchronousIndexedDbFileSystem$(dbName);
      t5 = A.InMemoryFileSystem$("dart-memory", random);
      return new A.IndexedDbFileSystem(t4, t5, t1, t3, t2, random == null ? $.$get$BaseVirtualFileSystem__fallbackRandom() : random, vfsName);
    },
    IndexedDbFileSystem_open(dbName, vfsName) {
      return A.IndexedDbFileSystem_open$body(dbName, vfsName);
    },
    IndexedDbFileSystem_open$body(dbName, vfsName) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.IndexedDbFileSystem),
        $async$returnValue, fs;
      var $async$IndexedDbFileSystem_open = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              fs = A.IndexedDbFileSystem$_(dbName, null, vfsName);
              $async$goto = 3;
              return A._asyncAwait(fs._asynchronous.open$0(), $async$IndexedDbFileSystem_open);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(fs._readFiles$0(), $async$IndexedDbFileSystem_open);
            case 4:
              // returning from await.
              $async$returnValue = fs;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$IndexedDbFileSystem_open, $async$completer);
    },
    _IndexedDbFile$(vfs, memoryFile, path) {
      return new A._IndexedDbFile(vfs, memoryFile, path);
    },
    _FunctionWorkItem$(work, description) {
      return new A._FunctionWorkItem(work, A.Completer_Completer$sync(type$.void));
    },
    _DeleteFileWorkItem$(fileSystem, path) {
      return new A._DeleteFileWorkItem(fileSystem, path, A.Completer_Completer$sync(type$.void));
    },
    _CreateFileWorkItem$(fileSystem, path) {
      return new A._CreateFileWorkItem(fileSystem, path, A.Completer_Completer$sync(type$.void));
    },
    _WriteFileWorkItem$(fileSystem, path, originalContent) {
      return new A._WriteFileWorkItem(fileSystem, path, originalContent, A._setArrayType([], type$.JSArray__OffsetAndBuffer), A.Completer_Completer$sync(type$.void));
    },
    AsynchronousIndexedDbFileSystem: function AsynchronousIndexedDbFileSystem(t0) {
      this._indexed_db$_database = null;
      this._dbName = t0;
      this._storeBlobs = true;
    },
    AsynchronousIndexedDbFileSystem_open_closure: function AsynchronousIndexedDbFileSystem_open_closure(t0) {
      this.openRequest = t0;
    },
    AsynchronousIndexedDbFileSystem__readFile_closure: function AsynchronousIndexedDbFileSystem__readFile_closure(t0) {
      this.fileId = t0;
    },
    AsynchronousIndexedDbFileSystem_readFully_closure: function AsynchronousIndexedDbFileSystem_readFully_closure(t0, t1, t2, t3) {
      var _ = this;
      _.row = t0;
      _.result = t1;
      _.rowOffset = t2;
      _.length = t3;
    },
    AsynchronousIndexedDbFileSystem__write_writeBlock: function AsynchronousIndexedDbFileSystem__write_writeBlock(t0, t1, t2) {
      this.$this = t0;
      this.blocks = t1;
      this.fileId = t2;
    },
    AsynchronousIndexedDbFileSystem__write_closure: function AsynchronousIndexedDbFileSystem__write_closure(t0, t1) {
      this.writeBlock = t0;
      this.writes = t1;
    },
    _FileWriteRequest: function _FileWriteRequest(t0, t1, t2) {
      this.originalContent = t0;
      this.replacedBlocks = t1;
      this.newFileLength = t2;
    },
    _FileWriteRequest__updateBlock_closure: function _FileWriteRequest__updateBlock_closure(t0, t1) {
      this.$this = t0;
      this.blockOffset = t1;
    },
    _OffsetAndBuffer: function _OffsetAndBuffer(t0, t1) {
      this.offset = t0;
      this.buffer = t1;
    },
    IndexedDbFileSystem: function IndexedDbFileSystem(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._asynchronous = t0;
      _._isClosing = false;
      _._currentWorkItem = null;
      _._memory = t1;
      _._pendingWork = t2;
      _._inMemoryOnlyFiles = t3;
      _._knownFileIds = t4;
      _.random = t5;
      _.name = t6;
    },
    IndexedDbFileSystem__startWorkingIfNeeded_closure: function IndexedDbFileSystem__startWorkingIfNeeded_closure(t0) {
      this.$this = t0;
    },
    IndexedDbFileSystem_flush_closure: function IndexedDbFileSystem_flush_closure() {
    },
    _IndexedDbFile: function _IndexedDbFile(t0, t1, t2) {
      this.vfs = t0;
      this.memoryFile = t1;
      this.path = t2;
    },
    _IndexedDbFile_xTruncate_closure: function _IndexedDbFile_xTruncate_closure(t0, t1) {
      this.$this = t0;
      this.size = t1;
    },
    _IndexedDbWorkItem: function _IndexedDbWorkItem() {
    },
    _FunctionWorkItem: function _FunctionWorkItem(t0, t1) {
      var _ = this;
      _.work = t0;
      _.completer = t1;
      _._previous = _._next = _._list = null;
    },
    _DeleteFileWorkItem: function _DeleteFileWorkItem(t0, t1, t2) {
      var _ = this;
      _.fileSystem = t0;
      _.path = t1;
      _.completer = t2;
      _._previous = _._next = _._list = null;
    },
    _CreateFileWorkItem: function _CreateFileWorkItem(t0, t1, t2) {
      var _ = this;
      _.fileSystem = t0;
      _.path = t1;
      _.completer = t2;
      _._previous = _._next = _._list = null;
    },
    _WriteFileWorkItem: function _WriteFileWorkItem(t0, t1, t2, t3, t4) {
      var _ = this;
      _.fileSystem = t0;
      _.path = t1;
      _.originalContent = t2;
      _.writes = t3;
      _.completer = t4;
      _._previous = _._next = _._list = null;
    },
    SimpleOpfsFileSystem$_(_metaHandle, _files, vfsName) {
      var t1 = A.NativeUint8List_NativeUint8List(2),
        t2 = A.InMemoryFileSystem$("dart-memory", null),
        t3 = $.$get$BaseVirtualFileSystem__fallbackRandom();
      return new A.SimpleOpfsFileSystem(_metaHandle, t1, _files, t2, t3, vfsName);
    },
    SimpleOpfsFileSystem__resolveDir(path) {
      return A.SimpleOpfsFileSystem__resolveDir$body(path);
    },
    SimpleOpfsFileSystem__resolveDir$body(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_nullable_JSObject_and_JSObject),
        $async$returnValue, opfsDirectory, t1, $parent, opfsDirectory0, storage;
      var $async$SimpleOpfsFileSystem__resolveDir = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              storage = A.storageManager();
              if (storage == null)
                throw A.wrapException(A.VfsException$(1));
              $async$goto = 3;
              return A._asyncAwait(A.StorageManagerApi_get_directory(storage), $async$SimpleOpfsFileSystem__resolveDir);
            case 3:
              // returning from await.
              opfsDirectory = $async$result;
              t1 = J.get$iterator$ax(A.split(path)), $parent = null;
            case 4:
              // for condition
              if (!A.boolConversionCheck(t1.moveNext$0())) {
                // goto after for
                $async$goto = 6;
                break;
              }
              $async$goto = 7;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_getDirectory(opfsDirectory, t1.get$current(), true), $async$SimpleOpfsFileSystem__resolveDir);
            case 7:
              // returning from await.
              opfsDirectory0 = $async$result;
            case 5:
              // for update
              $parent = opfsDirectory, opfsDirectory = opfsDirectory0;
              // goto for condition
              $async$goto = 4;
              break;
            case 6:
              // after for
              $async$returnValue = new A._Record_2($parent, opfsDirectory);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SimpleOpfsFileSystem__resolveDir, $async$completer);
    },
    SimpleOpfsFileSystem_loadFromStorage(path, vfsName) {
      return A.SimpleOpfsFileSystem_loadFromStorage$body(path, vfsName);
    },
    SimpleOpfsFileSystem_loadFromStorage$body(path, vfsName) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SimpleOpfsFileSystem),
        $async$returnValue, $async$temp1;
      var $async$SimpleOpfsFileSystem_loadFromStorage = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (A.storageManager() == null)
                throw A.wrapException(A.VfsException$(1));
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.SimpleOpfsFileSystem__resolveDir(path), $async$SimpleOpfsFileSystem_loadFromStorage);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.SimpleOpfsFileSystem_inDirectory($async$result._1, vfsName);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SimpleOpfsFileSystem_loadFromStorage, $async$completer);
    },
    SimpleOpfsFileSystem_inDirectory(root, vfsName) {
      return A.SimpleOpfsFileSystem_inDirectory$body(root, vfsName);
    },
    SimpleOpfsFileSystem_inDirectory$body(root, vfsName) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SimpleOpfsFileSystem),
        $async$returnValue, t1, t2, t3, $open, meta, $async$temp1, $async$temp2;
      var $async$SimpleOpfsFileSystem_inDirectory = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $open = new A.SimpleOpfsFileSystem_inDirectory_open(root);
              $async$goto = 3;
              return A._asyncAwait($open.call$1("meta"), $async$SimpleOpfsFileSystem_inDirectory);
            case 3:
              // returning from await.
              meta = $async$result;
              A._callMethodUnchecked1(meta, "truncate", 2, type$.void);
              t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.FileType, type$.JSObject);
              t2 = B.JSArray_methods.get$iterator(B.List_oyU);
            case 4:
              // for condition
              if (!A.boolConversionCheck(t2.moveNext$0())) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t3 = t2.get$current();
              $async$temp1 = t1;
              $async$temp2 = t3;
              $async$goto = 6;
              return A._asyncAwait($open.call$1(A.EnumName_get_name(t3)), $async$SimpleOpfsFileSystem_inDirectory);
            case 6:
              // returning from await.
              $async$temp1.$indexSet(0, $async$temp2, $async$result);
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              $async$returnValue = A.SimpleOpfsFileSystem$_(meta, t1, vfsName);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SimpleOpfsFileSystem_inDirectory, $async$completer);
    },
    _SimpleOpfsFile$(vfs, type, syncHandle, deleteOnClose) {
      return new A._SimpleOpfsFile(vfs, type, syncHandle, deleteOnClose);
    },
    FileType: function FileType(t0, t1, t2) {
      this.filePath = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    SimpleOpfsFileSystem: function SimpleOpfsFileSystem(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._metaHandle = t0;
      _._existsList = t1;
      _._files = t2;
      _._simple_opfs$_memory = t3;
      _.random = t4;
      _.name = t5;
    },
    SimpleOpfsFileSystem_inDirectory_open: function SimpleOpfsFileSystem_inDirectory_open(t0) {
      this.root = t0;
    },
    _SimpleOpfsFile: function _SimpleOpfsFile(t0, t1, t2, t3) {
      var _ = this;
      _.vfs = t0;
      _.type = t1;
      _.syncHandle = t2;
      _.deleteOnClose = t3;
      _._simple_opfs$_lockMode = 0;
    },
    WasmBindings$_(instance, values) {
      var t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39,
        t1 = values.get$memory(),
        t2 = values.callbacks,
        t3 = instance.functions,
        t4 = J.getInterceptor$asx(t3),
        t5 = t4.$index(t3, "dart_sqlite3_malloc");
      t5.toString;
      t6 = t4.$index(t3, "dart_sqlite3_free");
      t6.toString;
      t4.$index(t3, "dart_sqlite3_create_scalar_function").toString;
      t4.$index(t3, "dart_sqlite3_create_aggregate_function").toString;
      t4.$index(t3, "dart_sqlite3_create_window_function").toString;
      t4.$index(t3, "dart_sqlite3_create_collation").toString;
      t7 = t4.$index(t3, "dart_sqlite3_register_vfs");
      t7.toString;
      t8 = t4.$index(t3, "sqlite3_vfs_unregister");
      t8.toString;
      t9 = t4.$index(t3, "dart_sqlite3_updates");
      t9.toString;
      t4.$index(t3, "sqlite3_libversion").toString;
      t4.$index(t3, "sqlite3_sourceid").toString;
      t4.$index(t3, "sqlite3_libversion_number").toString;
      t10 = t4.$index(t3, "sqlite3_open_v2");
      t10.toString;
      t11 = t4.$index(t3, "sqlite3_close_v2");
      t11.toString;
      t12 = t4.$index(t3, "sqlite3_extended_errcode");
      t12.toString;
      t13 = t4.$index(t3, "sqlite3_errmsg");
      t13.toString;
      t14 = t4.$index(t3, "sqlite3_errstr");
      t14.toString;
      t15 = t4.$index(t3, "sqlite3_extended_result_codes");
      t15.toString;
      t16 = t4.$index(t3, "sqlite3_exec");
      t16.toString;
      t4.$index(t3, "sqlite3_free").toString;
      t17 = t4.$index(t3, "sqlite3_prepare_v3");
      t17.toString;
      t18 = t4.$index(t3, "sqlite3_bind_parameter_count");
      t18.toString;
      t19 = t4.$index(t3, "sqlite3_column_count");
      t19.toString;
      t20 = t4.$index(t3, "sqlite3_column_name");
      t20.toString;
      t21 = t4.$index(t3, "sqlite3_reset");
      t21.toString;
      t22 = t4.$index(t3, "sqlite3_step");
      t22.toString;
      t23 = t4.$index(t3, "sqlite3_finalize");
      t23.toString;
      t24 = t4.$index(t3, "sqlite3_column_type");
      t24.toString;
      t25 = t4.$index(t3, "sqlite3_column_int64");
      t25.toString;
      t26 = t4.$index(t3, "sqlite3_column_double");
      t26.toString;
      t27 = t4.$index(t3, "sqlite3_column_bytes");
      t27.toString;
      t28 = t4.$index(t3, "sqlite3_column_blob");
      t28.toString;
      t29 = t4.$index(t3, "sqlite3_column_text");
      t29.toString;
      t30 = t4.$index(t3, "sqlite3_bind_null");
      t30.toString;
      t31 = t4.$index(t3, "sqlite3_bind_int64");
      t31.toString;
      t32 = t4.$index(t3, "sqlite3_bind_double");
      t32.toString;
      t33 = t4.$index(t3, "sqlite3_bind_text");
      t33.toString;
      t34 = t4.$index(t3, "sqlite3_bind_blob64");
      t34.toString;
      t35 = t4.$index(t3, "sqlite3_bind_parameter_index");
      t35.toString;
      t4.$index(t3, "sqlite3_changes").toString;
      t4.$index(t3, "sqlite3_last_insert_rowid").toString;
      t36 = t4.$index(t3, "sqlite3_user_data");
      t36.toString;
      t4.$index(t3, "sqlite3_result_null").toString;
      t4.$index(t3, "sqlite3_result_int64").toString;
      t4.$index(t3, "sqlite3_result_double").toString;
      t4.$index(t3, "sqlite3_result_text").toString;
      t4.$index(t3, "sqlite3_result_blob64").toString;
      t4.$index(t3, "sqlite3_result_error").toString;
      t4.$index(t3, "sqlite3_value_type").toString;
      t4.$index(t3, "sqlite3_value_int64").toString;
      t4.$index(t3, "sqlite3_value_double").toString;
      t4.$index(t3, "sqlite3_value_bytes").toString;
      t4.$index(t3, "sqlite3_value_text").toString;
      t4.$index(t3, "sqlite3_value_blob").toString;
      t4.$index(t3, "sqlite3_aggregate_context").toString;
      t37 = t4.$index(t3, "sqlite3_get_autocommit");
      t37.toString;
      t4.$index(t3, "sqlite3_stmt_isexplain").toString;
      t4.$index(t3, "sqlite3_stmt_readonly").toString;
      t4.$index(t3, "dart_sqlite3_db_config_int");
      t38 = t4.$index(t3, "sqlite3_initialize");
      t39 = t4.$index(t3, "dart_sqlite3_commits");
      t3 = t4.$index(t3, "dart_sqlite3_rollbacks");
      J.$index$asx(instance.globals, "sqlite3_temp_directory").toString;
      t3 = new A.WasmBindings(t1, t2, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t24, t25, t26, t27, t29, t28, t30, t31, t32, t33, t34, t35, t23, t36, t37, t38, t39, t3);
      t3.WasmBindings$_$2(instance, values);
      return t3;
    },
    WasmBindings_instantiateAsync(response) {
      return A.WasmBindings_instantiateAsync$body(response);
    },
    WasmBindings_instantiateAsync$body(response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmBindings),
        $async$returnValue, injected, $async$temp1;
      var $async$WasmBindings_instantiateAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              injected = A._InjectedValues$();
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.WasmInstance_load(response, injected.get$injectedValues()), $async$WasmBindings_instantiateAsync);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.WasmBindings$_($async$result, injected);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmBindings_instantiateAsync, $async$completer);
    },
    _runVfs(body) {
      var e, exception, t1;
      try {
        body.call$0();
        return 0;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.VfsException) {
          e = t1;
          return e.returnCode;
        } else
          return 1;
      }
    },
    WrappedMemory_get_dartBuffer(_this) {
      return A.JSArrayBufferToByteBuffer_get_toDart(A.getProperty(_this, "buffer", type$.NativeByteBuffer));
    },
    WrappedMemory_get_asBytes(_this) {
      return J.asUint8List$0$x(A.JSArrayBufferToByteBuffer_get_toDart(A.getProperty(_this, "buffer", type$.NativeByteBuffer)));
    },
    WrappedMemory_strlen(_this, address) {
      var bytes = J.asUint8List$1$x(A.WrappedMemory_get_dartBuffer(_this), address),
        t1 = bytes.length,
        $length = 0;
      while (true) {
        if (!($length < t1))
          return A.ioore(bytes, $length);
        if (!(bytes[$length] !== 0))
          break;
        ++$length;
      }
      return $length;
    },
    WrappedMemory_int32ValueOfPointer(_this, pointer) {
      return J.$index$asx(J.asInt32List$0$x(A.WrappedMemory_get_dartBuffer(_this)), B.JSInt_methods._shrOtherPositive$1(pointer, 2));
    },
    WrappedMemory_setInt32Value(_this, pointer, value) {
      J.$indexSet$ax(J.asInt32List$0$x(A.WrappedMemory_get_dartBuffer(_this)), B.JSInt_methods._shrOtherPositive$1(pointer, 2), value);
    },
    WrappedMemory_setInt64Value(_this, pointer, value) {
      A.NativeDataView_setBigInt64(J.asByteData$0$x(A.WrappedMemory_get_dartBuffer(_this)), pointer, value, true);
    },
    WrappedMemory_readString(_this, address) {
      var t1 = A.WrappedMemory_get_dartBuffer(_this),
        t2 = A.WrappedMemory_strlen(_this, address);
      return B.C_Utf8Codec.decode$1(J.asUint8List$2$x(t1, address, t2));
    },
    WrappedMemory_readNullableString(_this, address, $length) {
      var t1;
      if (address === 0)
        return null;
      t1 = A.WrappedMemory_get_dartBuffer(_this);
      return B.C_Utf8Codec.decode$1(J.asUint8List$2$x(t1, address, $length == null ? A.WrappedMemory_strlen(_this, address) : $length));
    },
    WrappedMemory_copyRange(_this, pointer, $length) {
      var list = A.NativeUint8List_NativeUint8List($length);
      B.NativeUint8List_methods.setAll$2(list, 0, J.asUint8List$2$x(A.WrappedMemory_get_dartBuffer(_this), pointer, $length));
      return list;
    },
    _InjectedValues$() {
      var t1 = new A._InjectedValues(A.DartCallbacks$());
      t1._InjectedValues$0();
      return t1;
    },
    DartCallbacks$() {
      var t1 = type$.int;
      return new A.DartCallbacks(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.RegisteredFunctionSet), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AggregateContext_nullable_Object), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.VirtualFileSystem), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.VirtualFileSystemFile));
    },
    _extension_1_callReturningInt0(_this) {
      return A.JSNumberToNumber_get_toDartInt(A._asDouble(A._callMethodUnchecked1(_this, "call", null, type$.nullable_Object)));
    },
    _extension_1_callReturningInt(_this, arg) {
      return A.JSNumberToNumber_get_toDartInt(A._asDouble(A._callMethodUnchecked2(_this, "call", null, arg, type$.nullable_Object)));
    },
    _extension_1_callReturningInt2(_this, arg0, arg1) {
      return A.JSNumberToNumber_get_toDartInt(A._asDouble(A._callMethodUnchecked3(_this, "call", null, arg0, arg1, type$.nullable_Object)));
    },
    _extension_1_callReturningInt3(_this, arg0, arg1, arg2) {
      return A.JSNumberToNumber_get_toDartInt(A._asDouble(A._callMethodUnchecked4(_this, "call", null, arg0, arg1, arg2, type$.nullable_Object)));
    },
    _extension_1_callReturningInt4(_this, arg0, arg1, arg2, arg3) {
      return A.JSNumberToNumber_get_toDartInt(A._asDouble(A.callMethod(_this, "call", [null, arg0, arg1, arg2, arg3], type$.nullable_Object)));
    },
    _extension_1_callReturningInt5(_this, arg0, arg1, arg2, arg3, arg4) {
      return A.JSNumberToNumber_get_toDartInt(A.callMethod(_this, "call", [null, arg0, arg1, arg2, arg3, arg4], type$.double));
    },
    _extension_1_callReturningInt6(_this, arg0, arg1, arg2, arg3, arg4, arg5) {
      return A.JSNumberToNumber_get_toDartInt(A.callMethod(_this, "call", [null, arg0, arg1, arg2, arg3, arg4, arg5], type$.double));
    },
    _extension_1_callReturningVoid(_this, arg) {
      A._callMethodUnchecked2(_this, "call", null, arg, type$.nullable_Object);
    },
    _extension_1_callReturningVoid2(_this, arg0, arg1) {
      A._callMethodUnchecked3(_this, "call", null, arg0, arg1, type$.nullable_Object);
    },
    WasmBindings: function WasmBindings(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37) {
      var _ = this;
      _.memory = t0;
      _.callbacks = t1;
      _._malloc = t2;
      _._free = t3;
      _._register_vfs = t4;
      _._unregister_vfs = t5;
      _._update_hooks = t6;
      _._sqlite3_open_v2 = t7;
      _._sqlite3_close_v2 = t8;
      _._sqlite3_extended_errcode = t9;
      _._sqlite3_errmsg = t10;
      _._sqlite3_errstr = t11;
      _._sqlite3_extended_result_codes = t12;
      _._sqlite3_exec = t13;
      _._sqlite3_prepare_v3 = t14;
      _._sqlite3_bind_parameter_count = t15;
      _._sqlite3_column_count = t16;
      _._sqlite3_column_name = t17;
      _._sqlite3_reset = t18;
      _._sqlite3_step = t19;
      _._sqlite3_column_type = t20;
      _._sqlite3_column_int64 = t21;
      _._sqlite3_column_double = t22;
      _._sqlite3_column_bytes = t23;
      _._sqlite3_column_text = t24;
      _._sqlite3_column_blob = t25;
      _._sqlite3_bind_null = t26;
      _._sqlite3_bind_int64 = t27;
      _._sqlite3_bind_double = t28;
      _._sqlite3_bind_text = t29;
      _._sqlite3_bind_blob64 = t30;
      _._sqlite3_bind_parameter_index = t31;
      _._sqlite3_finalize = t32;
      _._sqlite3_user_data = t33;
      _._sqlite3_get_autocommit = t34;
      _._sqlite3_initialize = t35;
      _._commit_hooks = t36;
      _._rollback_hooks = t37;
    },
    _InjectedValues: function _InjectedValues(t0) {
      var _ = this;
      _.___InjectedValues_memory_A = _.___InjectedValues_injectedValues_A = _.___InjectedValues_bindings_A = $;
      _.callbacks = t0;
    },
    _InjectedValues_closure: function _InjectedValues_closure(t0) {
      this.memory = t0;
    },
    _InjectedValues_closure0: function _InjectedValues_closure0(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure13: function _InjectedValues__closure13(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.vfs = t1;
      _.path = t2;
      _.flags = t3;
      _.memory = t4;
      _.dartFdPtr = t5;
      _.pOutFlags = t6;
    },
    _InjectedValues_closure1: function _InjectedValues_closure1(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure12: function _InjectedValues__closure12(t0, t1, t2) {
      this.vfs = t0;
      this.path = t1;
      this.syncDir = t2;
    },
    _InjectedValues_closure2: function _InjectedValues_closure2(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure11: function _InjectedValues__closure11(t0, t1, t2, t3, t4) {
      var _ = this;
      _.vfs = t0;
      _.path = t1;
      _.flags = t2;
      _.memory = t3;
      _.pResOut = t4;
    },
    _InjectedValues_closure3: function _InjectedValues_closure3(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure10: function _InjectedValues__closure10(t0, t1, t2, t3, t4) {
      var _ = this;
      _.vfs = t0;
      _.path = t1;
      _.nOut = t2;
      _.memory = t3;
      _.zOut = t4;
    },
    _InjectedValues_closure4: function _InjectedValues_closure4(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure9: function _InjectedValues__closure9(t0, t1, t2, t3) {
      var _ = this;
      _.memory = t0;
      _.zOut = t1;
      _.nByte = t2;
      _.vfs = t3;
    },
    _InjectedValues_closure5: function _InjectedValues_closure5(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure8: function _InjectedValues__closure8(t0, t1) {
      this.vfs = t0;
      this.micros = t1;
    },
    _InjectedValues_closure6: function _InjectedValues_closure6(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues_closure7: function _InjectedValues_closure7(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure8: function _InjectedValues_closure8(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure7: function _InjectedValues__closure7(t0, t1, t2) {
      this.$this = t0;
      this.file = t1;
      this.fd = t2;
    },
    _InjectedValues_closure9: function _InjectedValues_closure9(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure6: function _InjectedValues__closure6(t0, t1, t2, t3, t4) {
      var _ = this;
      _.file = t0;
      _.memory = t1;
      _.target = t2;
      _.amount = t3;
      _.offset = t4;
    },
    _InjectedValues_closure10: function _InjectedValues_closure10(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure5: function _InjectedValues__closure5(t0, t1, t2, t3, t4) {
      var _ = this;
      _.file = t0;
      _.memory = t1;
      _.source = t2;
      _.amount = t3;
      _.offset = t4;
    },
    _InjectedValues_closure11: function _InjectedValues_closure11(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure4: function _InjectedValues__closure4(t0, t1) {
      this.file = t0;
      this.size = t1;
    },
    _InjectedValues_closure12: function _InjectedValues_closure12(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure3: function _InjectedValues__closure3(t0, t1) {
      this.file = t0;
      this.flags = t1;
    },
    _InjectedValues_closure13: function _InjectedValues_closure13(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure2: function _InjectedValues__closure2(t0, t1, t2) {
      this.file = t0;
      this.memory = t1;
      this.sizePtr = t2;
    },
    _InjectedValues_closure14: function _InjectedValues_closure14(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure1: function _InjectedValues__closure1(t0, t1) {
      this.file = t0;
      this.flags = t1;
    },
    _InjectedValues_closure15: function _InjectedValues_closure15(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure0: function _InjectedValues__closure0(t0, t1) {
      this.file = t0;
      this.flags = t1;
    },
    _InjectedValues_closure16: function _InjectedValues_closure16(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure: function _InjectedValues__closure(t0, t1, t2) {
      this.file = t0;
      this.memory = t1;
      this.pResOut = t2;
    },
    _InjectedValues_closure17: function _InjectedValues_closure17(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure18: function _InjectedValues_closure18(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure19: function _InjectedValues_closure19(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure20: function _InjectedValues_closure20(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure21: function _InjectedValues_closure21(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure22: function _InjectedValues_closure22(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure23: function _InjectedValues_closure23(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues_closure24: function _InjectedValues_closure24(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues_closure25: function _InjectedValues_closure25(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure26: function _InjectedValues_closure26(t0) {
      this.$this = t0;
    },
    DartCallbacks: function DartCallbacks(t0, t1, t2, t3) {
      var _ = this;
      _.functions = t0;
      _.aggregateContexts = t1;
      _.registeredVfs = t2;
      _.openedFiles = t3;
      _.installedRollbackHook = _.installedCommitHook = _.installedUpdateHook = null;
    },
    WebEndpoint_connect(_this) {
      return A._channel(A.getProperty(_this, "port", type$.JSObject), A.getProperty(_this, "lockName", type$.nullable_String), null);
    },
    createChannel() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_JSObject_and_StreamChannel_Message),
        $async$returnValue, lockName, lock, channel, t1, webChannel, locks;
      var $async$createChannel = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              webChannel = A._callConstructorUnchecked0(A._getPropertyTrustType(A.staticInteropGlobalContext(), "MessageChannel", type$.Object), t1);
              locks = $.$get$WebLocks_instance();
              $async$goto = locks != null ? 3 : 5;
              break;
            case 3:
              // then
              lockName = A._randomLockName();
              $async$goto = 6;
              return A._asyncAwait(locks.request$1(lockName), $async$createChannel);
            case 6:
              // returning from await.
              lock = $async$result;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              lock = null;
              lockName = null;
            case 4:
              // join
              channel = A._channel(A.getProperty(webChannel, "port2", t1), lockName, lock);
              $async$returnValue = new A._Record_2({port: A.getProperty(webChannel, "port1", t1), lockName: lockName}, channel);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$createChannel, $async$completer);
    },
    _randomLockName() {
      var i,
        buffer = A.StringBuffer$("channel-close-");
      for (i = 0; i < 16; ++i)
        buffer.writeCharCode$1(97 + $.$get$_random().nextInt$1(26));
      return buffer.toString$0(0);
    },
    _channel(port, lockName, lock) {
      var controller = A.StreamChannelController$(type$.Message_2);
      A._callMethodUnchecked0(port, "start", type$.void);
      B.EventStreamProvider_message.forTarget$1(port).listen$1(new A._channel_closure(controller));
      controller.get$local().get$stream().listen$2$onDone(new A._channel_closure0(port), new A._channel_closure1(port, lock));
      if (lock == null && lockName != null)
        $.$get$WebLocks_instance().request$1(lockName).then$1$1(new A._channel_closure2(controller), type$.Null);
      return controller.get$foreign();
    },
    _channel_closure: function _channel_closure(t0) {
      this.controller = t0;
    },
    _channel_closure0: function _channel_closure0(t0) {
      this.port = t0;
    },
    _channel_closure1: function _channel_closure1(t0, t1) {
      this.port = t0;
      this.lock = t1;
    },
    _channel_closure2: function _channel_closure2(t0) {
      this.controller = t0;
    },
    ProtocolChannel: function ProtocolChannel() {
    },
    ProtocolChannel_closure: function ProtocolChannel_closure(t0) {
      this.$this = t0;
    },
    WebSqlite_workerEntrypoint(controller) {
      A.WorkerRunner$(controller).handleRequests$0();
    },
    DatabaseController: function DatabaseController() {
    },
    WorkerDatabase: function WorkerDatabase() {
    },
    WebLocks$_(_lockManager) {
      return new A.WebLocks(_lockManager);
    },
    HeldLock$_(_completer) {
      return new A.HeldLock(_completer);
    },
    WebLocks: function WebLocks(t0) {
      this._lockManager = t0;
    },
    WebLocks_request_callback: function WebLocks_request_callback(t0) {
      this.gotLock = t0;
    },
    HeldLock: function HeldLock(t0) {
      this._completer = t0;
    },
    Message_deserialize(object) {
      var t1 = J.$index$asx($.$get$MessageType_byName(), A.JSStringToString_get_toDart(A._asString(A.JSObjectUnsafeUtilExtension___(object, "t"))));
      t1.toString;
      $label0$0: {
        if (B.MessageType_0 === t1) {
          t1 = A.CompatibilityCheck_CompatibilityCheck$deserialize(B.MessageType_0, object);
          break $label0$0;
        }
        if (B.MessageType_1 === t1) {
          t1 = A.CompatibilityCheck_CompatibilityCheck$deserialize(B.MessageType_1, object);
          break $label0$0;
        }
        if (B.MessageType_2 === t1) {
          t1 = A.CompatibilityCheck_CompatibilityCheck$deserialize(B.MessageType_2, object);
          break $label0$0;
        }
        if (B.MessageType_3 === t1) {
          t1 = A.CustomRequest_CustomRequest$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_4 === t1) {
          t1 = A.OpenRequest_OpenRequest$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_10 === t1) {
          t1 = A.StartFileSystemServer_StartFileSystemServer$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_5 === t1) {
          t1 = A.RunQuery_RunQuery$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_6 === t1) {
          t1 = A.FileSystemExistsQuery_FileSystemExistsQuery$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_7 === t1) {
          t1 = A.FileSystemAccess_FileSystemAccess$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_8 === t1) {
          t1 = A.FileSystemFlushRequest_FileSystemFlushRequest$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_9 === t1) {
          t1 = A.ConnectRequest_ConnectRequest$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_18 === t1) {
          t1 = A.CloseDatabase_CloseDatabase$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_19 === t1) {
          t1 = A.OpenAdditonalConnection_OpenAdditonalConnection$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_11 === t1 || B.MessageType_12 === t1 || B.MessageType_13 === t1) {
          t1 = A.StreamRequest_StreamRequest$deserialize(t1, object);
          break $label0$0;
        }
        if (B.MessageType_14 === t1) {
          t1 = A.SimpleSuccessResponse_SimpleSuccessResponse$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_17 === t1) {
          t1 = A.EndpointResponse_EndpointResponse$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_15 === t1) {
          t1 = A.RowsResponse_RowsResponse$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_16 === t1) {
          t1 = A.ErrorResponse_ErrorResponse$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_20 === t1) {
          t1 = A.UpdateNotification_UpdateNotification$deserialize(object);
          break $label0$0;
        }
        if (B.MessageType_21 === t1 || B.MessageType_22 === t1) {
          t1 = A.EmptyNotification_EmptyNotification$deserialize(t1, object);
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    },
    FileSystemImplementation_fromJS(js) {
      var t1, t2,
        toDart = A.JSStringToString_get_toDart(js);
      for (t1 = B.JSArray_methods.get$iterator(B.List_s2g); A.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (A.boolConversionCheck(J.$eq$(t2.jsRepresentation, toDart)))
          return t2;
      }
      throw A.wrapException(A.ArgumentError$("Unknown FS implementation: " + toDart, null));
    },
    OpenRequest$(databaseName, onlyOpenVfs, requestId, storageMode, wasmUri) {
      return new A.OpenRequest(wasmUri, databaseName, storageMode, onlyOpenVfs, requestId, null);
    },
    OpenRequest_OpenRequest$deserialize(object) {
      var t1 = A.FileSystemImplementation_fromJS(A._asString(A.JSObjectUnsafeUtilExtension___(object, "s"))),
        t2 = A.JSStringToString_get_toDart(A._asString(A.JSObjectUnsafeUtilExtension___(object, "d"))),
        t3 = A.Uri_parse(A.JSStringToString_get_toDart(A._asString(A.JSObjectUnsafeUtilExtension___(object, "u")))),
        t4 = A._extension_0_get_requestId(object),
        t5 = A._asBoolQ(A.JSObjectUnsafeUtilExtension___(object, "o"));
      return A.OpenRequest$(t2, J.$eq$(t5 == null ? null : A.JSBooleanToBool_get_toDart(t5), true), t4, t1, t3);
    },
    ConnectRequest$(endpoint, requestId) {
      return new A.ConnectRequest(endpoint, requestId, null);
    },
    ConnectRequest_ConnectRequest$deserialize(object) {
      var t1 = A._extension_0_get_requestId(object);
      return A.ConnectRequest$(type$.JSObject._as(A.JSObjectUnsafeUtilExtension___(object, "r")), t1);
    },
    StartFileSystemServer$(options) {
      return new A.StartFileSystemServer(options);
    },
    StartFileSystemServer_StartFileSystemServer$deserialize(object) {
      return A.StartFileSystemServer$(type$.JSObject._as(A.JSObjectUnsafeUtilExtension___(object, "r")));
    },
    CustomRequest$(databaseId, payload, requestId) {
      return new A.CustomRequest(payload, requestId, databaseId);
    },
    CustomRequest_CustomRequest$deserialize(object) {
      var t1 = A._extension_0_get_requestId(object),
        t2 = A.JSObjectUnsafeUtilExtension___(object, "r");
      return A.CustomRequest$(A.boolConversionCheck(A.JSBooleanToBool_get_toDart(A.JSObjectUnsafeUtilExtension_hasProperty(object, A.StringToJSString_get_toJS("d")))) ? A._extension_0_get_databaseId(object) : null, t2, t1);
    },
    FileSystemExistsQuery$(databaseId, fsType, requestId) {
      return new A.FileSystemExistsQuery(fsType, requestId, databaseId);
    },
    FileSystemExistsQuery_FileSystemExistsQuery$deserialize(object) {
      var t1 = B.JSArray_methods.$index(B.List_FileType_0_FileType_1, A.JSNumberToNumber_get_toDartInt(A._asDouble(A.JSObjectUnsafeUtilExtension___(object, "f"))));
      return A.FileSystemExistsQuery$(A._extension_0_get_databaseId(object), t1, A._extension_0_get_requestId(object));
    },
    FileSystemFlushRequest$(databaseId, requestId) {
      return new A.FileSystemFlushRequest(requestId, databaseId);
    },
    FileSystemFlushRequest_FileSystemFlushRequest$deserialize(object) {
      return A.FileSystemFlushRequest$(A._extension_0_get_databaseId(object), A._extension_0_get_requestId(object));
    },
    FileSystemAccess$(buffer, databaseId, fsType, requestId) {
      return new A.FileSystemAccess(buffer, fsType, requestId, databaseId);
    },
    FileSystemAccess_FileSystemAccess$deserialize(object) {
      var t1 = A._extension_0_get_databaseId(object),
        t2 = A._extension_0_get_requestId(object);
      return A.FileSystemAccess$(type$.nullable_NativeByteBuffer._as(A.JSObjectUnsafeUtilExtension___(object, "b")), t1, B.JSArray_methods.$index(B.List_FileType_0_FileType_1, A.JSNumberToNumber_get_toDartInt(A._asDouble(A.JSObjectUnsafeUtilExtension___(object, "f")))), t2);
    },
    RunQuery$(databaseId, parameters, requestId, returnRows, sql) {
      return new A.RunQuery(sql, parameters, returnRows, requestId, databaseId);
    },
    RunQuery_RunQuery$deserialize(object) {
      var t5,
        t1 = A._extension_0_get_requestId(object),
        t2 = A._extension_0_get_databaseId(object),
        t3 = A.JSStringToString_get_toDart(A._asString(A.JSObjectUnsafeUtilExtension___(object, "s"))),
        t4 = [];
      for (t5 = J.get$iterator$ax(A.JSArrayToList_get_toDart(type$.JSArray_nullable_Object._as(A.JSObjectUnsafeUtilExtension___(object, "p")), type$.nullable_Object)); A.boolConversionCheck(t5.moveNext$0());)
        t4.push(A.JSAnyUtilityExtension_dartify(t5.get$current()));
      return A.RunQuery$(t2, t4, t1, A.JSBooleanToBool_get_toDart(A._asBool(A.JSObjectUnsafeUtilExtension___(object, "r"))), t3);
    },
    CloseDatabase$(databaseId, requestId) {
      return new A.CloseDatabase(requestId, databaseId);
    },
    CloseDatabase_CloseDatabase$deserialize(object) {
      var t1 = A._extension_0_get_requestId(object);
      return A.CloseDatabase$(A._extension_0_get_databaseId(object), t1);
    },
    OpenAdditonalConnection$(databaseId, requestId) {
      return new A.OpenAdditonalConnection(requestId, databaseId);
    },
    OpenAdditonalConnection_OpenAdditonalConnection$deserialize(object) {
      var t1 = A._extension_0_get_requestId(object);
      return A.OpenAdditonalConnection$(A._extension_0_get_databaseId(object), t1);
    },
    SimpleSuccessResponse$(requestId, response) {
      return new A.SimpleSuccessResponse(response, requestId);
    },
    SimpleSuccessResponse_SimpleSuccessResponse$deserialize(object) {
      var t1 = A.JSObjectUnsafeUtilExtension___(object, "r");
      return A.SimpleSuccessResponse$(A._extension_0_get_requestId(object), t1);
    },
    EndpointResponse$(endpoint, requestId) {
      return new A.EndpointResponse(endpoint, requestId);
    },
    EndpointResponse_EndpointResponse$deserialize(object) {
      var t1 = A._extension_0_get_requestId(object);
      return A.EndpointResponse$(type$.JSObject._as(A.JSObjectUnsafeUtilExtension___(object, "r")), t1);
    },
    RowsResponse$(requestId, resultSet) {
      return new A.RowsResponse(resultSet, requestId);
    },
    RowsResponse_RowsResponse$deserialize(object) {
      var t3, t4, t5, rawTableNames, tableNames, rows, dartRow,
        t1 = type$.JSArray_String,
        t2 = A._setArrayType([], t1);
      for (t3 = type$.JSArray_nullable_Object, t4 = type$.nullable_Object, t5 = J.get$iterator$ax(A.JSArrayToList_get_toDart(t3._as(A.JSObjectUnsafeUtilExtension___(object, "c")), t4)); A.boolConversionCheck(t5.moveNext$0());)
        t2.push(A.JSStringToString_get_toDart(A._asString(t5.get$current())));
      rawTableNames = A.JSObjectUnsafeUtilExtension___(object, "n");
      if (rawTableNames != null) {
        t1 = A._setArrayType([], t1);
        for (t5 = J.get$iterator$ax(A.JSArrayToList_get_toDart(t3._as(rawTableNames), t4)); A.boolConversionCheck(t5.moveNext$0());)
          t1.push(A.JSStringToString_get_toDart(A._asString(t5.get$current())));
        tableNames = t1;
      } else
        tableNames = null;
      rows = A._setArrayType([], type$.JSArray_List_nullable_Object);
      for (t1 = J.get$iterator$ax(A.JSArrayToList_get_toDart(t3._as(A.JSObjectUnsafeUtilExtension___(object, "r")), t4)); A.boolConversionCheck(t1.moveNext$0());) {
        dartRow = [];
        for (t5 = J.get$iterator$ax(A.JSArrayToList_get_toDart(t3._as(t1.get$current()), t4)); A.boolConversionCheck(t5.moveNext$0());)
          dartRow.push(A.JSAnyUtilityExtension_dartify(t5.get$current()));
        B.JSArray_methods.add$1(rows, dartRow);
      }
      t1 = A.ResultSet$(t2, tableNames, rows);
      return A.RowsResponse$(A._extension_0_get_requestId(object), t1);
    },
    ErrorResponse$(message, requestId) {
      return new A.ErrorResponse(message, requestId);
    },
    ErrorResponse_ErrorResponse$deserialize(object) {
      return A.ErrorResponse$(A.JSStringToString_get_toDart(A._asString(A.JSObjectUnsafeUtilExtension___(object, "e"))), A._extension_0_get_requestId(object));
    },
    StreamRequest$(action, databaseId, requestId, type) {
      return new A.StreamRequest(action, type, requestId, databaseId);
    },
    StreamRequest_StreamRequest$deserialize(type, object) {
      var t1 = A.JSBooleanToBool_get_toDart(A._asBool(A.JSObjectUnsafeUtilExtension___(object, "a"))),
        t2 = A._extension_0_get_requestId(object);
      return A.StreamRequest$(t1, A._extension_0_get_databaseId(object), t2, type);
    },
    CompatibilityCheck$(databaseName, requestId, type) {
      return new A.CompatibilityCheck(type, databaseName, requestId, null);
    },
    CompatibilityCheck_CompatibilityCheck$deserialize(type, object) {
      var t1 = A._extension_0_get_requestId(object),
        t2 = A._asStringQ(A.JSObjectUnsafeUtilExtension___(object, "d"));
      return A.CompatibilityCheck$(t2 == null ? null : A.JSStringToString_get_toDart(t2), t1, type);
    },
    CompatibilityResult$(canUseIndexedDb, canUseOpfs, dedicatedWorkersCanNest, existingDatabases, sharedCanSpawnDedicated, supportsSharedArrayBuffers) {
      return new A.CompatibilityResult(existingDatabases, sharedCanSpawnDedicated, canUseOpfs, canUseIndexedDb, supportsSharedArrayBuffers, dedicatedWorkersCanNest);
    },
    CompatibilityResult_CompatibilityResult$fromJS(result) {
      var t3, t4,
        existing = A._setArrayType([], type$.JSArray_Record_2_StorageMode_and_String),
        encodedExisting = A.JSArrayToList_get_toDart(type$.JSArray_nullable_Object._as(A.JSObjectUnsafeUtilExtension___(result, "a")), type$.String),
        t1 = J.getInterceptor$asx(encodedExisting),
        t2 = type$.StorageMode,
        i = 0;
      while (true) {
        t3 = t1.get$length(encodedExisting);
        if (typeof t3 !== "number")
          return t3.$div();
        if (!(i < t3 / 2))
          break;
        t3 = i * 2;
        B.JSArray_methods.add$1(existing, new A._Record_2(A.EnumByName_byName(B.List_AmO, A.JSStringToString_get_toDart(t1.$index(encodedExisting, t3)), t2), A.JSStringToString_get_toDart(t1.$index(encodedExisting, t3 + 1))));
        ++i;
      }
      t1 = A.JSBooleanToBool_get_toDart(A._asBool(A.JSObjectUnsafeUtilExtension___(result, "b")));
      t2 = A.JSBooleanToBool_get_toDart(A._asBool(A.JSObjectUnsafeUtilExtension___(result, "c")));
      t3 = A.JSBooleanToBool_get_toDart(A._asBool(A.JSObjectUnsafeUtilExtension___(result, "d")));
      t4 = A.JSBooleanToBool_get_toDart(A._asBool(A.JSObjectUnsafeUtilExtension___(result, "e")));
      return A.CompatibilityResult$(t3, t2, A.JSBooleanToBool_get_toDart(A._asBool(A.JSObjectUnsafeUtilExtension___(result, "f"))), existing, t1, t4);
    },
    UpdateNotification$(databaseId, update) {
      return new A.UpdateNotification(update, databaseId);
    },
    UpdateNotification_UpdateNotification$deserialize(object) {
      var t1 = A.SqliteUpdate$(B.JSArray_methods.$index(B.List_IYL, A.JSNumberToNumber_get_toDartInt(A._asDouble(A.JSObjectUnsafeUtilExtension___(object, "k")))), A.JSStringToString_get_toDart(A._asString(A.JSObjectUnsafeUtilExtension___(object, "u"))), A.JSNumberToNumber_get_toDartInt(A._asDouble(A.JSObjectUnsafeUtilExtension___(object, "r"))));
      return A.UpdateNotification$(A._extension_0_get_databaseId(object), t1);
    },
    EmptyNotification$(databaseId, type) {
      return new A.EmptyNotification(databaseId, type);
    },
    EmptyNotification_EmptyNotification$deserialize(type, object) {
      return A.EmptyNotification$(A._extension_0_get_databaseId(object), type);
    },
    _extension_0_get_requestId(_this) {
      return A.JSNumberToNumber_get_toDartInt(A._asDouble(A.JSObjectUnsafeUtilExtension___(_this, "i")));
    },
    _extension_0_get_databaseId(_this) {
      return A.JSNumberToNumber_get_toDartInt(A._asDouble(A.JSObjectUnsafeUtilExtension___(_this, "d")));
    },
    MessageType: function MessageType(t0, t1, t2) {
      this.index = t0;
      this._core$_name = t1;
      this.$ti = t2;
    },
    Message0: function Message0() {
    },
    Message_sendToWorker_closure: function Message_sendToWorker_closure(t0) {
      this.worker = t0;
    },
    Message_sendToPort_closure: function Message_sendToPort_closure(t0) {
      this.port = t0;
    },
    Notification: function Notification() {
    },
    Request: function Request() {
    },
    Response: function Response() {
    },
    FileSystemImplementation: function FileSystemImplementation(t0, t1, t2) {
      this.jsRepresentation = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    OpenRequest: function OpenRequest(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.wasmUri = t0;
      _.databaseName = t1;
      _.storageMode = t2;
      _.onlyOpenVfs = t3;
      _.requestId = t4;
      _.databaseId = t5;
    },
    ConnectRequest: function ConnectRequest(t0, t1, t2) {
      this.endpoint = t0;
      this.requestId = t1;
      this.databaseId = t2;
    },
    StartFileSystemServer: function StartFileSystemServer(t0) {
      this.options = t0;
    },
    CustomRequest: function CustomRequest(t0, t1, t2) {
      this.payload = t0;
      this.requestId = t1;
      this.databaseId = t2;
    },
    FileSystemExistsQuery: function FileSystemExistsQuery(t0, t1, t2) {
      this.fsType = t0;
      this.requestId = t1;
      this.databaseId = t2;
    },
    FileSystemFlushRequest: function FileSystemFlushRequest(t0, t1) {
      this.requestId = t0;
      this.databaseId = t1;
    },
    FileSystemAccess: function FileSystemAccess(t0, t1, t2, t3) {
      var _ = this;
      _.buffer = t0;
      _.fsType = t1;
      _.requestId = t2;
      _.databaseId = t3;
    },
    RunQuery: function RunQuery(t0, t1, t2, t3, t4) {
      var _ = this;
      _.sql = t0;
      _.parameters = t1;
      _.returnRows = t2;
      _.requestId = t3;
      _.databaseId = t4;
    },
    CloseDatabase: function CloseDatabase(t0, t1) {
      this.requestId = t0;
      this.databaseId = t1;
    },
    OpenAdditonalConnection: function OpenAdditonalConnection(t0, t1) {
      this.requestId = t0;
      this.databaseId = t1;
    },
    SimpleSuccessResponse: function SimpleSuccessResponse(t0, t1) {
      this.response = t0;
      this.requestId = t1;
    },
    EndpointResponse: function EndpointResponse(t0, t1) {
      this.endpoint = t0;
      this.requestId = t1;
    },
    RowsResponse: function RowsResponse(t0, t1) {
      this.resultSet = t0;
      this.requestId = t1;
    },
    ErrorResponse: function ErrorResponse(t0, t1) {
      this.message = t0;
      this.requestId = t1;
    },
    StreamRequest: function StreamRequest(t0, t1, t2, t3) {
      var _ = this;
      _.action = t0;
      _.type = t1;
      _.requestId = t2;
      _.databaseId = t3;
    },
    CompatibilityCheck: function CompatibilityCheck(t0, t1, t2, t3) {
      var _ = this;
      _.type = t0;
      _.databaseName = t1;
      _.requestId = t2;
      _.databaseId = t3;
    },
    CompatibilityResult: function CompatibilityResult(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.existingDatabases = t0;
      _.sharedCanSpawnDedicated = t1;
      _.canUseOpfs = t2;
      _.canUseIndexedDb = t3;
      _.supportsSharedArrayBuffers = t4;
      _.dedicatedWorkersCanNest = t5;
    },
    UpdateNotification: function UpdateNotification(t0, t1) {
      this.update = t0;
      this.databaseId = t1;
    },
    EmptyNotification: function EmptyNotification(t0, t1) {
      this.databaseId = t0;
      this.type = t1;
    },
    checkIndexedDbSupport() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, idb, mockDb, t1, exception, $async$exception;
      var $async$checkIndexedDbSupport = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!A.boolConversionCheck(A.JSObjectUnsafeUtilExtension_has(A.globalContext(), "indexedDB")) || !A.boolConversionCheck(A.JSObjectUnsafeUtilExtension_has(A.globalContext(), "FileReader"))) {
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.JSObject;
              idb = t1._as(A.JSObjectUnsafeUtilExtension___(A.globalContext(), "indexedDB"));
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.CompleteOpenIdbRequest_completeOpen(A._callMethodUnchecked1(idb, "open", "drift_mock_db", t1), t1), $async$checkIndexedDbSupport);
            case 7:
              // returning from await.
              mockDb = $async$result;
              A._callMethodUnchecked0(mockDb, "close", type$.void);
              A._callMethodUnchecked1(idb, "deleteDatabase", "drift_mock_db", t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$checkIndexedDbSupport, $async$completer);
    },
    Lock$() {
      return new A.Lock();
    },
    CompleteOpenIdbRequest_completeOpen(_this, $T) {
      var completer = A.Completer_Completer$sync($T);
      B.EventStreamProvider_success.forTarget$1(_this).listen$1(new A.CompleteOpenIdbRequest_completeOpen_closure(completer, _this, $T));
      B.EventStreamProvider_error.forTarget$1(_this).listen$1(new A.CompleteOpenIdbRequest_completeOpen_closure0(completer, _this));
      B.EventStreamProvider_blocked.forTarget$1(_this).listen$1(new A.CompleteOpenIdbRequest_completeOpen_closure1(completer, _this));
      return completer.get$future();
    },
    Lock: function Lock() {
      this._shared$_last = null;
    },
    Lock_synchronized_callBlockAndComplete: function Lock_synchronized_callBlockAndComplete(t0, t1, t2) {
      this.block = t0;
      this.blockCompleted = t1;
      this.T = t2;
    },
    Lock_synchronized_closure: function Lock_synchronized_closure(t0, t1) {
      this.callBlockAndComplete = t0;
      this.T = t1;
    },
    CompleteOpenIdbRequest_completeOpen_closure: function CompleteOpenIdbRequest_completeOpen_closure(t0, t1, t2) {
      this.completer = t0;
      this._this = t1;
      this.T = t2;
    },
    CompleteOpenIdbRequest_completeOpen_closure0: function CompleteOpenIdbRequest_completeOpen_closure0(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    CompleteOpenIdbRequest_completeOpen_closure1: function CompleteOpenIdbRequest_completeOpen_closure1(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    FileType0: function FileType0(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    StorageMode: function StorageMode(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    WorkerEnvironment_WorkerEnvironment() {
      if (A.boolConversionCheck(A.JSAnyUtilityExtension_instanceOfString(A.globalContext(), "DedicatedWorkerGlobalScope")))
        return A.Dedicated$();
      else
        return A.Shared$();
    },
    Dedicated$() {
      return new A.Dedicated(A.globalContext());
    },
    Shared$() {
      return new A.Shared(A.globalContext());
    },
    _StreamState$() {
      return new A._StreamState();
    },
    _ConnectionDatabase$(database, id) {
      var t1 = A._StreamState$(),
        t2 = A._StreamState$(),
        t3 = A._StreamState$();
      return new A._ConnectionDatabase(database, id == null ? database.id : id, t1, t2, t3);
    },
    _ClientConnection$(channel, id, runner) {
      var t1 = new A._ClientConnection(runner, A._setArrayType([], type$.JSArray__ConnectionDatabase), channel, A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Completer_Response));
      t1.ProtocolChannel$1(channel);
      t1._ClientConnection$3$channel$id$runner(channel, id, runner);
      return t1;
    },
    _extension_0_get_pathInVfs(_this) {
      var t1;
      switch (_this.index) {
        case 0:
          t1 = "/database";
          break;
        case 1:
          t1 = "/database-journal";
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    DatabaseState$(id, mode, $name, runner) {
      return new A.DatabaseState(runner, id, $name, mode);
    },
    WorkerRunner$(_controller) {
      var t1 = A._setArrayType([], type$.JSArray__ClientConnection),
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.DatabaseState),
        t3 = A.Lock$(),
        t4 = A.WorkerEnvironment_WorkerEnvironment();
      return new A.WorkerRunner(t4, _controller, t1, t2, t3);
    },
    checkOpfsSupport() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], opfsRoot, fileHandle, openedFile, getSizeResult, t1, t2, exception, storage, $async$exception;
      var $async$checkOpfsSupport = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              storage = A.storageManager();
              if (storage == null) {
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              }
              opfsRoot = null;
              fileHandle = null;
              openedFile = null;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.StorageManagerApi_get_directory(storage), $async$checkOpfsSupport);
            case 7:
              // returning from await.
              opfsRoot = $async$result;
              $async$goto = 8;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_openFile(opfsRoot, "_drift_feature_detection", true), $async$checkOpfsSupport);
            case 8:
              // returning from await.
              fileHandle = $async$result;
              t1 = type$.JSObject;
              $async$goto = 9;
              return A._asyncAwait(A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked0(fileHandle, "createSyncAccessHandle", t1), t1), $async$checkOpfsSupport);
            case 9:
              // returning from await.
              openedFile = $async$result;
              t2 = type$.nullable_Object;
              getSizeResult = A.JSObjectUnsafeUtilExtension_callMethod(openedFile, A.StringToJSString_get_toJS("getSize"), null, null, null, t2);
              $async$goto = A.boolConversionCheck(A.JSAnyUtilityExtension_typeofEquals(getSizeResult, "object")) ? 10 : 11;
              break;
            case 10:
              // then
              $async$goto = 12;
              return A._asyncAwait(A.JSPromiseToFuture_get_toDart(t1._as(getSizeResult), t2), $async$checkOpfsSupport);
            case 12:
              // returning from await.
              $async$returnValue = false;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
            case 11:
              // join
              $async$returnValue = true;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              $async$returnValue = false;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              if (openedFile != null)
                A._callMethodUnchecked0(openedFile, "close", type$.void);
              $async$goto = opfsRoot != null && fileHandle != null ? 13 : 14;
              break;
            case 13:
              // then
              $async$goto = 15;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_remove(opfsRoot, "_drift_feature_detection"), $async$checkOpfsSupport);
            case 15:
              // returning from await.
            case 14:
              // join
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$checkOpfsSupport, $async$completer);
    },
    pathForOpfs(databaseName) {
      return "drift_db/" + databaseName;
    },
    WorkerEnvironment: function WorkerEnvironment() {
    },
    Dedicated: function Dedicated(t0) {
      this.scope = t0;
    },
    Dedicated_topLevelRequests_closure: function Dedicated_topLevelRequests_closure() {
    },
    Shared: function Shared(t0) {
      this.scope = t0;
    },
    Shared_topLevelRequests_closure: function Shared_topLevelRequests_closure(t0) {
      this.$this = t0;
    },
    Shared_topLevelRequests_closure_handlePort: function Shared_topLevelRequests_closure_handlePort(t0, t1, t2) {
      this.connectPorts = t0;
      this.subscriptions = t1;
      this.listener = t2;
    },
    Shared_topLevelRequests__handlePort_closure: function Shared_topLevelRequests__handlePort_closure(t0) {
      this.listener = t0;
    },
    Shared_topLevelRequests__closure: function Shared_topLevelRequests__closure(t0) {
      this.handlePort = t0;
    },
    Shared_topLevelRequests__closure0: function Shared_topLevelRequests__closure0(t0) {
      this.subscriptions = t0;
    },
    _StreamState: function _StreamState() {
      this.subscription = null;
    },
    _ConnectionDatabase: function _ConnectionDatabase(t0, t1, t2, t3, t4) {
      var _ = this;
      _.database = t0;
      _.id = t1;
      _.updates = t2;
      _.rollbacks = t3;
      _.commits = t4;
    },
    _ClientConnection: function _ClientConnection(t0, t1, t2, t3) {
      var _ = this;
      _._runner = t0;
      _._openedDatabases = t1;
      _._channel = t2;
      _._responses = t3;
    },
    _ClientConnection_closure: function _ClientConnection_closure(t0) {
      this.$this = t0;
    },
    _ClientConnection_handleRequest_closure: function _ClientConnection_handleRequest_closure(t0, t1) {
      this.$this = t0;
      this.database = t1;
    },
    _ClientConnection_handleRequest__closure1: function _ClientConnection_handleRequest__closure1(t0, t1) {
      this.$this = t0;
      this.database = t1;
    },
    _ClientConnection_handleRequest_closure0: function _ClientConnection_handleRequest_closure0(t0, t1) {
      this.$this = t0;
      this.database = t1;
    },
    _ClientConnection_handleRequest__closure0: function _ClientConnection_handleRequest__closure0(t0, t1) {
      this.$this = t0;
      this.database = t1;
    },
    _ClientConnection_handleRequest_closure1: function _ClientConnection_handleRequest_closure1(t0, t1) {
      this.$this = t0;
      this.database = t1;
    },
    _ClientConnection_handleRequest__closure: function _ClientConnection_handleRequest__closure(t0, t1) {
      this.$this = t0;
      this.database = t1;
    },
    _ClientConnection__databaseFor_closure: function _ClientConnection__databaseFor_closure(t0) {
      this._box_0 = t0;
    },
    DatabaseState: function DatabaseState(t0, t1, t2, t3) {
      var _ = this;
      _.runner = t0;
      _.id = t1;
      _.name = t2;
      _.mode = t3;
      _.refCount = 1;
      _.closeHandler = _._resolvedVfs = _._openVfs = _._database = null;
    },
    DatabaseState_vfs_closure: function DatabaseState_vfs_closure(t0) {
      this.$this = t0;
    },
    DatabaseState_opened_closure: function DatabaseState_opened_closure(t0) {
      this.$this = t0;
    },
    WorkerRunner: function WorkerRunner(t0, t1, t2, t3, t4) {
      var _ = this;
      _._environment = t0;
      _._controller = t1;
      _._connections = t2;
      _._nextConnectionId = 0;
      _.openedDatabases = t3;
      _._nextDatabaseId = 0;
      _._wasmUri = _._sqlite3 = null;
      _._compatibilityCheckLock = t4;
      _._innerWorker = null;
    },
    WorkerRunner__accept_closure: function WorkerRunner__accept_closure(t0, t1) {
      this.$this = t0;
      this.connection = t1;
    },
    WorkerRunner_checkCompatibility_closure: function WorkerRunner_checkCompatibility_closure(t0, t1) {
      this.$this = t0;
      this.check = t1;
    },
    WorkerRunner_loadWasmModule_closure: function WorkerRunner_loadWasmModule_closure(t0) {
      this.$this = t0;
    },
    CustomDatabaseMessage_constructor_(kind) {
      var t1, t2, rawParameters,
        rawSql = A.StringToJSString_get_toJS("");
      rawSql = rawSql;
      t1 = [];
      for (t2 = B.JSArray_methods.get$iterator(B.List_empty2); A.boolConversionCheck(t2.moveNext$0());)
        t1.push(A.NullableObjectUtilExtension_jsify(t2.get$current()));
      rawParameters = A.ListToJSArray_get_toJS(t1, type$.nullable_Object);
      return {rawKind: A.StringToJSString_get_toJS(A.EnumName_get_name(kind)), rawSql: rawSql, rawParameters: rawParameters};
    },
    CustomDatabaseMessage_get_kind(_this) {
      return A.EnumByName_byName(B.List_IqE, A.JSStringToString_get_toDart(A.getProperty(_this, "rawKind", type$.String)), type$.CustomDatabaseMessageKind);
    },
    CustomDatabaseMessageKind: function CustomDatabaseMessageKind(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ThrottledCommonDatabase$(_db) {
      return new A.ThrottledCommonDatabase(_db, A.StreamController_StreamController$broadcast(type$.bool));
    },
    throttledUpdates(source, transactionStream) {
      var t2, pendingUpdates, t3, controller, t1 = {};
      t1.controller = null;
      t2 = type$.SqliteUpdate;
      pendingUpdates = A.LinkedHashSet_LinkedHashSet$_empty(t2);
      t1.paused = false;
      t1.updateDebouncer = null;
      t3 = new A.throttledUpdates_maybeFireUpdates(t1, source, pendingUpdates);
      t1.sourceSubscription = t1.txSubscription = null;
      controller = A.StreamController_StreamController(new A.throttledUpdates_closure(t1), new A.throttledUpdates_closure0(t1, transactionStream, t3, source, new A.throttledUpdates_collectUpdate(t1, pendingUpdates, t3)), new A.throttledUpdates_closure1(t1), new A.throttledUpdates_closure2(t1, t3), false, t2);
      t1.controller = controller;
      return controller.get$stream();
    },
    ThrottledCommonDatabase: function ThrottledCommonDatabase(t0, t1) {
      this._db = t0;
      this._transactionController = t1;
    },
    throttledUpdates_maybeFireUpdates: function throttledUpdates_maybeFireUpdates(t0, t1, t2) {
      this._box_0 = t0;
      this.source = t1;
      this.pendingUpdates = t2;
    },
    throttledUpdates_collectUpdate: function throttledUpdates_collectUpdate(t0, t1, t2) {
      this._box_0 = t0;
      this.pendingUpdates = t1;
      this.maybeFireUpdates = t2;
    },
    throttledUpdates_closure0: function throttledUpdates_closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.transactionStream = t1;
      _.maybeFireUpdates = t2;
      _.source = t3;
      _.collectUpdate = t4;
    },
    throttledUpdates__closure: function throttledUpdates__closure(t0) {
      this.maybeFireUpdates = t0;
    },
    throttledUpdates__closure0: function throttledUpdates__closure0(t0) {
      this._box_0 = t0;
    },
    throttledUpdates__closure1: function throttledUpdates__closure1(t0) {
      this._box_0 = t0;
    },
    throttledUpdates_closure1: function throttledUpdates_closure1(t0) {
      this._box_0 = t0;
    },
    throttledUpdates_closure2: function throttledUpdates_closure2(t0, t1) {
      this._box_0 = t0;
      this.maybeFireUpdates = t1;
    },
    throttledUpdates_closure: function throttledUpdates_closure(t0) {
      this._box_0 = t0;
    },
    AsyncSqliteController$() {
      return new A.AsyncSqliteController();
    },
    AsyncSqliteDatabase$(database) {
      return new A.AsyncSqliteDatabase(database, A.ReadWriteMutex$());
    },
    AsyncSqliteController: function AsyncSqliteController() {
    },
    AsyncSqliteDatabase: function AsyncSqliteDatabase(t0, t1) {
      this.database = t0;
      this.mutex = t1;
    },
    GuaranteeChannel$(innerStream, innerSink, allowSinkErrors, $T) {
      var t2, t1 = {};
      t1.innerStream = t1.innerStream = innerStream;
      t2 = new A.GuaranteeChannel($T._eval$1("GuaranteeChannel<0>"));
      t2.GuaranteeChannel$3$allowSinkErrors(innerSink, allowSinkErrors, t1, $T);
      return t2;
    },
    _GuaranteeSink$(_inner, _channel, allowErrors, $T) {
      return new A._GuaranteeSink(_inner, _channel, A.Completer_Completer(type$.void), allowErrors, $T._eval$1("_GuaranteeSink<0>"));
    },
    GuaranteeChannel: function GuaranteeChannel(t0) {
      var _ = this;
      _.__GuaranteeChannel__streamController_F = _.__GuaranteeChannel__sink_F = $;
      _._subscription = null;
      _._disconnected = false;
      _.$ti = t0;
    },
    GuaranteeChannel_closure: function GuaranteeChannel_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.T = t2;
    },
    GuaranteeChannel__closure: function GuaranteeChannel__closure(t0) {
      this.$this = t0;
    },
    _GuaranteeSink: function _GuaranteeSink(t0, t1, t2, t3, t4) {
      var _ = this;
      _._inner = t0;
      _._guarantee_channel$_channel = t1;
      _._doneCompleter = t2;
      _._closed = _._disconnected = false;
      _._addStreamCompleter = _._addStreamSubscription = null;
      _._allowErrors = t3;
      _.$ti = t4;
    },
    _GuaranteeSink__addError_closure: function _GuaranteeSink__addError_closure() {
    },
    StreamChannelController$($T) {
      var t1 = new A.StreamChannelController($T._eval$1("StreamChannelController<0>"));
      t1.StreamChannelController$2$allowForeignErrors$sync(true, false, $T);
      return t1;
    },
    StreamChannelController: function StreamChannelController(t0) {
      this.__StreamChannelController__foreign_F = this.__StreamChannelController__local_F = $;
      this.$ti = t0;
    },
    StreamChannel_StreamChannel$withGuarantees(stream, sink, allowSinkErrors, $T) {
      return A.GuaranteeChannel$(stream, sink, allowSinkErrors, $T);
    },
    StreamChannelMixin: function StreamChannelMixin() {
    },
    TypedDataBuffer__reverse(buffer, start, end) {
      var t1, first, last;
      --end;
      for (t1 = J.getInterceptor$asx(buffer); start < end;) {
        first = t1.$index(buffer, start);
        last = t1.$index(buffer, end);
        t1.$indexSet(buffer, end, first);
        t1.$indexSet(buffer, start, last);
        ++start;
        --end;
      }
    },
    Uint8Buffer$() {
      var t1 = A.NativeUint8List_NativeUint8List(0);
      return new A.Uint8Buffer(t1, J.get$length$asx(t1));
    },
    TypedDataBuffer: function TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    Uint8Buffer: function Uint8Buffer(t0, t1) {
      this._typed_buffer$_buffer = t0;
      this._typed_buffer$_length = t1;
    },
    _EventStream$(_target, _eventType, _useCapture, $T) {
      return new A._EventStream(_target, _eventType, _useCapture, $T._eval$1("_EventStream<0>"));
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1;
      if (onData == null)
        t1 = null;
      else {
        t1 = A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.JSObject);
        t1 = t1 == null ? null : A._functionToJS1(t1);
      }
      t1 = new A._EventStreamSubscription(_target, _eventType, t1, _useCapture, $T._eval$1("_EventStreamSubscription<0>"));
      t1._EventStreamSubscription$4(_target, _eventType, onData, _useCapture, $T);
      return t1;
    },
    _wrapZone(callback, $T) {
      if (A.boolConversionCheck(J.$eq$(A.Zone_current(), B.C__RootZone)))
        return callback;
      if (callback == null)
        return null;
      return A.Zone_current().bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._streams$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._streams$_target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure: function _EventStreamSubscription_onData_closure(t0) {
      this.handleData = t0;
    },
    Recipe_isDigit(code) {
      return code >= 48 && code <= 57;
    },
    Recipe_digitValue(code) {
      return code - 48;
    },
    Recipe_isIdentifierStart(ch) {
      return (((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124;
    },
    SharedArrayBuffer_asInt32List(_this) {
      return A.JSInt32ArrayToInt32List_get_toDart(A.JSFunctionUnsafeUtilExtension_callAsConstructor(A.getProperty(A.staticInteropGlobalContext(), "Int32Array", type$.JavaScriptFunction), _this, null, null, type$.NativeInt32List));
    },
    SharedArrayBuffer_asByteData(_this, offset, $length) {
      return A.JSDataViewToByteData_get_toDart(A.JSFunctionUnsafeUtilExtension_callAsConstructor(A.getProperty(A.staticInteropGlobalContext(), "DataView", type$.JavaScriptFunction), _this, A.NumToJSExtension_get_toJS(offset), A.NumToJSExtension_get_toJS($length), type$.NativeByteData));
    },
    SharedArrayBuffer_asUint8List(_this) {
      return A.JSUint8ArrayToUint8List_get_toDart(A.JSFunctionUnsafeUtilExtension_callAsConstructor(A.getProperty(A.staticInteropGlobalContext(), "Uint8Array", type$.JavaScriptFunction), _this, null, null, type$.NativeUint8List));
    },
    SharedArrayBuffer_asUint8ListSlice(_this, offset, $length) {
      return A.JSUint8ArrayToUint8List_get_toDart(A.JSFunctionUnsafeUtilExtension_callAsConstructor(A.getProperty(A.staticInteropGlobalContext(), "Uint8Array", type$.JavaScriptFunction), _this, A.NumToJSExtension_get_toJS(offset), A.NumToJSExtension_get_toJS($length), type$.NativeUint8List));
    },
    Atomics_wait(typedArray, index, value) {
      return A.JSStringToString_get_toDart(A._callMethodUnchecked3(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Atomics", type$.Object), "wait", A.Int32ListToJSInt32Array_get_toJS(typedArray), index, value, type$.String));
    },
    Atomics_waitWithTimeout(typedArray, index, value, timeOutInMillis) {
      return A.JSStringToString_get_toDart(A._callMethodUnchecked4(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Atomics", type$.Object), "wait", A.Int32ListToJSInt32Array_get_toJS(typedArray), index, value, timeOutInMillis, type$.String));
    },
    Atomics_notify(typedArray, index) {
      A._callMethodUnchecked3(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Atomics", type$.Object), "notify", A.Int32ListToJSInt32Array_get_toJS(typedArray), index, 1 / 0, type$.void);
    },
    Atomics_store(typedArray, index, value) {
      return A._callMethodUnchecked3(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Atomics", type$.Object), "store", A.Int32ListToJSInt32Array_get_toJS(typedArray), index, value, type$.int);
    },
    Atomics_load(typedArray, index) {
      return A._callMethodUnchecked2(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Atomics", type$.Object), "load", A.Int32ListToJSInt32Array_get_toJS(typedArray), index, type$.int);
    },
    JsBigInt_constructor_(_jsBigInt) {
      return _jsBigInt;
    },
    JsBigInt_constructor_parse(s) {
      return A.JsBigInt_constructor_(A._callMethodUnchecked1(A.staticInteropGlobalContext(), "BigInt", A.StringToJSString_get_toJS(s), type$.JavaScriptBigInt));
    },
    JsBigInt_constructor_fromInt(i) {
      return A.JsBigInt_constructor_(A._callMethodUnchecked1(A.staticInteropGlobalContext(), "BigInt", A.NumToJSExtension_get_toJS(i), type$.JavaScriptBigInt));
    },
    JsBigInt_constructor_fromBigInt(i) {
      return A.JsBigInt_constructor_parse(i.toString$0(0));
    },
    JsBigInt_get_asDartInt(_this) {
      return A.JSNumberToNumber_get_toDartInt(A._callMethodUnchecked1(A.staticInteropGlobalContext(), "Number", _this, type$.double));
    },
    JsBigInt_get_asDartBigInt(_this) {
      return A.BigInt_parse(A.JsBigInt_jsToString(_this));
    },
    JsBigInt_get_jsObject(_this) {
      return _this;
    },
    JsBigInt_get_isSafeInteger(_this) {
      return A.boolConversionCheck(A.JSBooleanToBool_get_toDart(A.JSAnyOperatorExtension_lessThanOrEqualTo(A.NumToJSExtension_get_toJS(-9007199254740992), _this))) && A.boolConversionCheck(A.JSBooleanToBool_get_toDart(A.JSAnyOperatorExtension_lessThanOrEqualTo(_this, A.NumToJSExtension_get_toJS(9007199254740992))));
    },
    JsBigInt_toDart(_this) {
      return A.boolConversionCheck(A.JsBigInt_get_isSafeInteger(_this)) ? A.JsBigInt_get_asDartInt(_this) : A.JsBigInt_get_asDartBigInt(_this);
    },
    JsBigInt_jsToString(_this) {
      return A.JSStringToString_get_toDart(A._callMethodUnchecked0(_this, "toString", type$.String));
    },
    unmangleGlobalNameIfPreservedAnyways($name) {
      return init.mangledGlobalNames[$name];
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    JSObjectUnsafeUtilExtension_hasProperty(_this, property) {
      return A.BoolToJSBoolean_get_toJS(property in _this);
    },
    JSObjectUnsafeUtilExtension_getProperty(_this, property, $T) {
      return $T._as(_this[property]);
    },
    JSObjectUnsafeUtilExtension_setProperty(_this, property, value) {
      return _this[property] = value;
    },
    JSObjectUnsafeUtilExtension__callMethod(_this, method, arg1, arg2, arg3, arg4) {
      if (arg1 == null)
        return _this[method]();
      else if (arg2 == null)
        return _this[method](arg1);
      else if (arg3 == null)
        return _this[method](arg1, arg2);
      else if (arg4 == null)
        return _this[method](arg1, arg2, arg3);
      else
        return _this[method](arg1, arg2, arg3, arg4);
    },
    JSFunctionUnsafeUtilExtension__callAsConstructor(_this, arg1, arg2, arg3, arg4) {
      var t1;
      if (arg1 == null)
        t1 = null;
      else {
        t1 = [arg1];
        if (arg2 != null)
          t1.push(arg2);
        if (arg3 != null)
          t1.push(arg3);
        if (arg4 != null)
          t1.push(arg4);
      }
      return A.callConstructor(_this, t1, type$.JSObject);
    },
    JSObjectUnsafeUtilExtension_has(_this, property) {
      return A.JSBooleanToBool_get_toDart(A.JSObjectUnsafeUtilExtension_hasProperty(_this, A.StringToJSString_get_toJS(property)));
    },
    JSObjectUnsafeUtilExtension___(_this, property) {
      return A.JSObjectUnsafeUtilExtension_getProperty(_this, A.StringToJSString_get_toJS(property), type$.nullable_Object);
    },
    JSObjectUnsafeUtilExtension____(_this, property, value) {
      return A.JSObjectUnsafeUtilExtension_setProperty(_this, A.StringToJSString_get_toJS(property), value);
    },
    JSObjectUnsafeUtilExtension_callMethod(_this, method, arg1, arg2, arg3, $R) {
      return $R._as(A.JSObjectUnsafeUtilExtension__callMethod(_this, method, arg1, arg2, arg3, null));
    },
    JSFunctionUnsafeUtilExtension_callAsConstructor(_this, arg1, arg2, arg3, $R) {
      return $R._as(A.JSFunctionUnsafeUtilExtension__callAsConstructor(_this, arg1, arg2, arg3, null));
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (A.boolConversionCheck(J.$eq$(uri, $._currentUriBase))) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if (A.boolConversionCheck(J.$eq$($.$get$Style_platform(), $.$get$Style_url())))
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      t1.toString;
      return t1;
    },
    split(path) {
      return J.split$1$s($.$get$context(), path);
    },
    isWithin($parent, child) {
      return $.$get$context().isWithin$2($parent, child);
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    driveLetterEnd(path, index) {
      var t2, t3, _null = null,
        t1 = path.length,
        index0 = index + 2;
      if (t1 < index0)
        return _null;
      if (index >>> 0 !== index || index >= t1)
        return A.ioore(path, index);
      if (!A.boolConversionCheck(A.isAlphabetic(path.charCodeAt(index))))
        return _null;
      t2 = index + 1;
      if (!(t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 58) {
        t3 = index + 4;
        if (t1 < t3)
          return _null;
        if (!A.boolConversionCheck(J.$eq$(J.toLowerCase$0$s(B.JSString_methods.substring$2(path, t2, t3)), "%3a")))
          return _null;
        index = index0;
      }
      t2 = index + 2;
      if (t1 === t2)
        return t2;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return _null;
      return index + 3;
    },
    createExceptionRaw(bindings, db, returnCode, operation, previousStatement, statementArgs) {
      return A.createExceptionFromExtendedCode(bindings, db, returnCode, db.sqlite3_extended_errcode$0(), operation, previousStatement, statementArgs);
    },
    createExceptionFromExtendedCode(bindings, db, returnCode, extendedErrorCode, operation, previousStatement, statementArgs) {
      return A.SqliteException$(returnCode, db.sqlite3_errmsg$0(), bindings.sqlite3_errstr$1(extendedErrorCode) + " (code " + A.S(extendedErrorCode) + ")", previousStatement, statementArgs, operation);
    },
    createException(db, returnCode, operation, previousStatement, statementArgs) {
      return A.createExceptionRaw(db.bindings, db.database, returnCode, operation, previousStatement, statementArgs);
    },
    throwException(db, returnCode, operation, previousStatement, statementArgs) {
      throw A.wrapException(A.createException(db, returnCode, operation, previousStatement, statementArgs));
    },
    BigIntRangeCheck_get_checkRange(_this) {
      if (_this.$lt(0, $.$get$bigIntMinValue64()) || _this.$gt(0, $.$get$bigIntMaxValue64()))
        throw A.wrapException(A.Exception_Exception("BigInt value exceeds the range of 64 bits"));
      return _this;
    },
    GenerateFilename_randomFileName(_this, prefix) {
      var i, t1,
        _s61_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012346789",
        buffer = A.StringBuffer$(prefix);
      for (i = 0; i < 16; ++i) {
        t1 = _this.nextInt$1(61);
        if (!(t1 >= 0 && t1 < 61))
          return A.ioore(_s61_, t1);
        buffer.writeCharCode$1(_s61_.charCodeAt(t1));
      }
      return buffer.toString$0(0);
    },
    ReadBlob_byteBuffer(_this) {
      return A.ReadBlob_byteBuffer$body(_this);
    },
    ReadBlob_byteBuffer$body(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ByteBuffer),
        $async$returnValue, $async$temp1;
      var $async$ReadBlob_byteBuffer = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked0(_this, "arrayBuffer", type$.JSObject), type$.NativeByteBuffer), $async$ReadBlob_byteBuffer);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.JSArrayBufferToByteBuffer_get_toDart($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$ReadBlob_byteBuffer, $async$completer);
    },
    storageManager() {
      var t1 = type$.JSObject,
        $navigator = A.getProperty(A.staticInteropGlobalContext(), "navigator", t1);
      if (A.boolConversionCheck(A.JSObjectUnsafeUtilExtension_has($navigator, "storage")))
        return A.getProperty($navigator, "storage", t1);
      return null;
    },
    StorageManagerApi_get_directory(_this) {
      var t1 = type$.JSObject;
      return A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked0(_this, "getDirectory", t1), t1);
    },
    FileSystemSyncAccessHandleApi_readDart(_this, buffer, options) {
      var t1 = type$.int;
      if (options == null)
        return A._callMethodUnchecked1(_this, "read", A.Uint8ListToJSUint8Array_get_toJS(buffer), t1);
      else
        return A._callMethodUnchecked2(_this, "read", A.Uint8ListToJSUint8Array_get_toJS(buffer), options, t1);
    },
    FileSystemSyncAccessHandleApi_writeDart(_this, buffer, options) {
      var t1 = type$.int;
      if (options == null)
        return A._callMethodUnchecked1(_this, "write", A.Uint8ListToJSUint8Array_get_toJS(buffer), t1);
      else
        return A._callMethodUnchecked2(_this, "write", A.Uint8ListToJSUint8Array_get_toJS(buffer), options, t1);
    },
    FileSystemDirectoryHandleApi_openFile(_this, $name, create) {
      var t1 = type$.JSObject;
      return A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked2(_this, "getFileHandle", $name, {create: create}, t1), t1);
    },
    FileSystemDirectoryHandleApi_getDirectory(_this, $name, create) {
      var t1 = type$.JSObject;
      return A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked2(_this, "getDirectoryHandle", $name, {create: create}, t1), t1);
    },
    FileSystemDirectoryHandleApi_remove(_this, $name) {
      return A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked2(_this, "removeEntry", $name, {recursive: false}, type$.JSObject), type$.nullable_Object);
    },
    NativeUint8List_set(_this, from, offset) {
      A.JSObjectUnsafeUtilExtension_callMethod(A.Uint8ListToJSUint8Array_get_toJS(_this), A.StringToJSString_get_toJS("set"), A.Uint8ListToJSUint8Array_get_toJS(from), A.NumToJSExtension_get_toJS(offset), null, type$.nullable_Object);
    },
    NativeDataView_setBigInt64(_this, offset, value, littleEndian) {
      A.JSObjectUnsafeUtilExtension_callMethod(A.ByteDataToJSDataView_get_toJS(_this), A.StringToJSString_get_toJS("setBigInt64"), A.NumToJSExtension_get_toJS(offset), A.JsBigInt_get_jsObject(value), A.BoolToJSBoolean_get_toJS(littleEndian), type$.nullable_Object);
    },
    main() {
      A.WebSqlite_workerEntrypoint(A.AsyncSqliteController$());
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return A.Primitives_objectToHumanReadableString(receiver);
    },
    get$runtimeType(receiver) {
      return A.getRuntimeTypeOfInterceptorNotArray(this, receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + A.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    checkMutable$2(receiver, operation, verb) {
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, A._asString(operation), A._asString(verb));
    },
    checkGrowable$2(receiver, operation, verb) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, A._asString(operation), A._asString(verb));
    },
    cast$1$0(receiver, $R) {
      return A.List_castFrom(receiver, A._arrayInstanceType(receiver)._precomputed1, $R);
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      this.checkGrowable$2(receiver, "add", "add to");
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      A._asInt(index);
      this.checkGrowable$2(receiver, "removeAt", "remove from");
      if (index < 0 || index >= receiver.length)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      A._asInt(index);
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      this.checkGrowable$2(receiver, "insert", "add to");
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end, _this = this;
      A._asInt(index);
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      _this.checkGrowable$2(receiver, "insertAll", "add to");
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      _this._setLengthUnsafe$1(receiver, receiver.length + insertionLength);
      end = index + insertionLength;
      _this.setRange$4(receiver, end, receiver.length, receiver, index);
      _this.setRange$3(receiver, index, end, iterable);
    },
    setAll$2(receiver, index, iterable) {
      var t1, index0;
      A._asInt(index);
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      this.checkMutable$2(receiver, "setAll", "modify");
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      for (t1 = J.get$iterator$ax(iterable); A.boolConversionCheck(t1.moveNext$0()); index = index0) {
        index0 = index + 1;
        this.$indexSet(receiver, index, t1.get$current());
      }
    },
    removeLast$0(receiver) {
      this.checkGrowable$2(receiver, "removeLast", "remove from");
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1(receiver, element) {
      var i;
      this.checkGrowable$2(receiver, "remove", "remove from");
      for (i = 0; i < receiver.length; ++i)
        if (A.boolConversionCheck(J.$eq$(receiver[i], element))) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1(receiver, f) {
      var t1 = A._arrayInstanceType(receiver);
      return A.WhereIterable$(receiver, t1._eval$1("bool(1)")._as(f), t1._precomputed1);
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      this.checkGrowable$2(receiver, "addAll", "add to");
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); A.boolConversionCheck(t1.moveNext$0());)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      this.checkGrowable$2(receiver, "clear", "clear");
      this._clear$0(receiver);
    },
    _clear$0(receiver) {
      this._setLengthUnsafe$1(receiver, 0);
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return A.MappedListIterable$(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._precomputed1, $T);
    },
    join$1(receiver, separator) {
      var list, t1, i;
      A._asString(separator);
      list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (t1 = J.getInterceptor$ax(list), i = 0; i < receiver.length; ++i)
        t1.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(A._asInt(n), "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, A._asInt(n), null, A._arrayInstanceType(receiver)._precomputed1);
    },
    firstWhere$1(receiver, test) {
      var end, i, element;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      A._asIntQ(end);
      A.checkNull(start);
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return J.JSArray_JSArray$markGrowable(receiver.slice(start, end), A._arrayInstanceType(receiver)._precomputed1);
    },
    getRange$2(receiver, start, end) {
      A._asInt(start);
      A._asInt(end);
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, t2, i;
      A._asInt(start);
      A._asInt(end);
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      A._asInt(skipCount);
      this.checkMutable$2(receiver, "setRange", "modify");
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.toList$1$growable$ax(J.skip$1$ax(iterable, skipCount), false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (otherStart + $length > t2)
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    get$reversed(receiver) {
      return A.ReversedListIterable$(receiver, A._arrayInstanceType(receiver)._precomputed1);
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      this.checkMutable$2(receiver, "sort", "modify");
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      undefineds = 0;
      if (t1._precomputed1._is(null))
        for (i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    sort$0(receiver) {
      return this.sort$1(receiver, null);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i, i0;
      A._asInt(count);
      i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    lastIndexOf$1(receiver, element) {
      var i,
        t1 = receiver.length,
        start = t1 - 1;
      if (start < 0)
        return -1;
      start >= t1;
      for (i = start; i >= 0; --i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (A.boolConversionCheck(J.$eq$(receiver[i], element)))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (A.boolConversionCheck(J.$eq$(receiver[i], other)))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return !A.boolConversionCheck(this.get$isEmpty(receiver));
    },
    toString$0(receiver) {
      return A.ListBase_listToString(receiver);
    },
    toList$1$growable(receiver, growable) {
      return A._asBool(growable) ? this._toListGrowable$0(receiver) : this._toListFixed$0(receiver);
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    _toListGrowable$0(receiver) {
      return J.JSArray_JSArray$markGrowable(receiver.slice(0), A._arrayInstanceType(receiver)._precomputed1);
    },
    _toListFixed$0(receiver) {
      return J.JSArray_JSArray$markFixed(receiver.slice(0), A._arrayInstanceType(receiver)._precomputed1);
    },
    get$iterator(receiver) {
      return J.ArrayIterator$(receiver, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      A._asInt(newLength);
      this.checkGrowable$2(receiver, "set length", "change the length of");
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    _setLengthUnsafe$1(receiver, newLength) {
      receiver.length = A._asInt(newLength);
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asInt(index);
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    whereType$1$0(receiver, $T) {
      return A.WhereTypeIterable$(receiver, $T);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isIterable: 1,
    $is_ListIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this._iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!A.boolConversionCheck(J.$eq$(_this._length, $length))) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1 == null ? type$.Object._as(t1) : t1);
      }
      t3 = _this._index;
      if (typeof t3 !== "number")
        return t3.$ge();
      if (t3 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t2.$index(t1, t3));
      t1 = _this._index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_index(t1 + 1);
      return true;
    },
    set$_index(_index) {
      this._index = A._asInt(_index);
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative, _this = this;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = _this.get$isNegative(b);
          if (A.boolConversionCheck(J.$eq$(_this.get$isNegative(receiver), bIsNegative)))
            return 0;
          if (A.boolConversionCheck(_this.get$isNegative(receiver)))
            return -1;
          return 1;
        }
        return 0;
      } else if (A.boolConversionCheck(_this.get$isNaN(receiver))) {
        if (A.boolConversionCheck(_this.get$isNaN(b)))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN(receiver) {
      return isNaN(receiver);
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    toDouble$0(receiver) {
      return receiver;
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2;
      A._asInt(radix);
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      return J.JSNumber__handleIEtoString(result);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result;
      A._asNum(other);
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _isInt32$1(receiver, value) {
      return (value | 0) === value;
    },
    $tdiv(receiver, other) {
      A._asNum(other);
      if (A.boolConversionCheck(this._isInt32$1(receiver, receiver)))
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      A._asNum(other);
      return A.boolConversionCheck(this._isInt32$1(receiver, receiver)) ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient;
      A._asNum(other);
      quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + A.S(other)));
    },
    $shl(receiver, other) {
      A._asNum(other);
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shlPositive$1(receiver, other);
    },
    _shlPositive$1(receiver, other) {
      A._asNum(other);
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      A._asNum(other);
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrOtherPositive$1(receiver, other);
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      A._asNum(other);
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      A._asNum(other);
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$isOdd(receiver) {
      return (receiver & 1) === 1;
    },
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      t1 = J.JSInt__clz32(nonneg);
      if (typeof t1 !== "number")
        return A.iae(t1);
      return wordBits - t1;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $not(receiver) {
      return ~receiver >>> 0;
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      A._asInt(index);
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return this._codeUnitAt$1(receiver, index);
    },
    _codeUnitAt$1(receiver, index) {
      A._asInt(index);
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$1(receiver, string) {
      A._asString(string);
      return A.allMatchesInStringUnchecked(receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, t2, i, t3, _null = null;
      A._asString(string);
      A._asInt(start);
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return _null;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(string, t3);
        if (string.charCodeAt(t3) !== receiver.charCodeAt(i))
          return _null;
      }
      return A.StringMatch$(start, string, receiver);
    },
    $add(receiver, other) {
      A._asString(other);
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength, t1;
      A._asString(other);
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2(receiver, from, to) {
      return A.stringReplaceAllUnchecked(receiver, type$.Pattern._as(from), A._asString(to));
    },
    replaceRange$3(receiver, start, end, replacement) {
      A._asInt(start);
      A._asIntQ(end);
      A._asString(replacement);
      return A.stringReplaceRangeUnchecked(receiver, start, A.RangeError_checkValidRange(start, end, receiver.length), replacement);
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      type$.Pattern._as(pattern);
      A._asInt(index);
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1(receiver, pattern) {
      return this.startsWith$2(receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      A._asInt(start);
      return receiver.substring(start, A.RangeError_checkValidRange(start, A._asIntQ(end), receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    toLowerCase$0(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0(receiver) {
      return receiver.toUpperCase();
    },
    $mul(receiver, times) {
      var s, result;
      A._asInt(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta;
      A._asInt(width);
      A._asString(padding);
      delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return J.$add$ns(this.$mul(padding, delta), receiver);
    },
    get$codeUnits(receiver) {
      return A.CodeUnits$(receiver);
    },
    indexOf$2(receiver, pattern, start) {
      var match, t1, t2, i;
      type$.Pattern._as(pattern);
      A._asInt(start);
      A.checkNull(pattern);
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern == "string")
        return A.stringIndexOfStringUnchecked(receiver, pattern, start);
      if (pattern instanceof A.JSSyntaxRegExp) {
        match = A.firstMatchAfter(pattern, receiver, start);
        return match == null ? -1 : match.get$start();
      }
      for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2, i;
      type$.Pattern._as(pattern);
      A._asIntQ(start);
      A.checkNull(pattern);
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        t1 = pattern.length;
        t2 = receiver.length;
        return A._asInt(A.stringLastIndexOfUnchecked(receiver, pattern, start + t1 > t2 ? t2 - t1 : start));
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    lastIndexOf$1(receiver, pattern) {
      return this.lastIndexOf$2(receiver, pattern, null);
    },
    contains$1(receiver, other) {
      type$.Pattern._as(other);
      A.checkNull(other);
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return !A.boolConversionCheck(this.get$isEmpty(receiver));
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isJSIndexable: 1,
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return A.CastIterator$(J.get$iterator$ax(this.get$_source()), t1._precomputed1, t1._rest[1]);
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1;
      A._asInt(count);
      t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1(_, count) {
      var t1;
      A._asInt(count);
      t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      A._asInt(index);
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    get$last(_) {
      return A._instanceType(this)._rest[1]._as(J.get$last$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, A._asInt(index)));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, A._asInt(index), t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, A._asInt($length));
    },
    add$1(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    addAll$1(_, values) {
      var t1 = this.$ti;
      J.addAll$1$ax(this._source, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(values), t1._rest[1], t1._precomputed1));
    },
    sort$1(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)?")._as(compare);
      t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    sort$0(_) {
      return this.sort$1(0, null);
    },
    insert$2(_, index, element) {
      var t1 = this.$ti;
      J.insert$2$ax(this._source, A._asInt(index), t1._precomputed1._as(t1._rest[1]._as(element)));
    },
    insertAll$2(_, index, elements) {
      var t1 = this.$ti;
      J.insertAll$2$ax(this._source, A._asInt(index), A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(elements), t1._rest[1], t1._precomputed1));
    },
    setAll$2(_, index, elements) {
      var t1 = this.$ti;
      J.setAll$2$ax(this._source, A._asInt(index), A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(elements), t1._rest[1], t1._precomputed1));
    },
    remove$1(_, value) {
      return J.remove$1$ax(this._source, value);
    },
    removeAt$1(_, index) {
      return this.$ti._rest[1]._as(J.removeAt$1$ax(this._source, A._asInt(index)));
    },
    removeLast$0(_) {
      return this.$ti._rest[1]._as(J.removeLast$0$ax(this._source));
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, A._asInt(start), A._asInt(end)), t1._precomputed1, t1._rest[1]);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1;
      A._asInt(start);
      A._asInt(end);
      t1 = this.$ti;
      t1._eval$1("Iterable<2>")._as(iterable);
      A._asInt(skipCount);
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(iterable, t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isListBase: 1,
    $is_ListIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A.CastList.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      var message = this._message;
      return message != null ? "LateInitializationError: " + message : "LateInitializationError";
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return J.get$length$asx(this.__internal$_string);
    },
    $index(_, i) {
      return J.codeUnitAt$1$s(this.__internal$_string, A._asInt(i));
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.void);
    },
    $signature: 2
  };
  A.SentinelValue.prototype = {};
  A.NotNullableError.prototype = {
    toString$0(_) {
      return "Null is not a valid value for '" + A.S(this.__internal$_name) + "' of type '" + A.S(A.createRuntimeType(this.$ti._precomputed1)) + "'";
    },
    $isTypeError: 1
  };
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      return A.ListIterator$(this, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    get$isEmpty(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$first(_) {
      if (A.boolConversionCheck(J.$eq$(this.get$length(this), 0)))
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last(_) {
      var t1, _this = this;
      if (A.boolConversionCheck(J.$eq$(_this.get$length(_this), 0)))
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = _this.get$length(_this);
      if (typeof t1 !== "number")
        return t1.$sub();
      return _this.elementAt$1(0, t1 - 1);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (A.boolConversionCheck(J.$eq$(_this.elementAt$1(0, i), element)))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var $length, first, buffer, i, _this = this;
      A._asString(separator);
      $length = _this.get$length(_this);
      if (!A.boolConversionCheck(B.JSString_methods.get$isEmpty(separator))) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        buffer = A.StringBuffer$(first);
        for (i = 1; i < $length; ++i) {
          buffer.write$1(separator);
          buffer.write$1(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      } else {
        buffer = A.StringBuffer$("");
        for (i = 0; i < $length; ++i) {
          buffer.write$1(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, A._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedListIterable$(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("ListIterable.E"), $T);
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, A._asInt(count), null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1(_, count) {
      return A.SubListIterable$(this, 0, A.checkNotNullable(A._asInt(count), "count", type$.int), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, A._asBool(growable), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    $isHideEfficientLengthIterable: 1
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var t1, realIndex, _this = this;
      A._asInt(index);
      t1 = _this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      realIndex = t1 + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return A.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var t1, newStart, endOrLength, _this = this;
      A._asInt(count);
      A.RangeError_checkNotNegative(count, "count");
      t1 = _this._start;
      if (typeof t1 !== "number")
        return t1.$add();
      newStart = t1 + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return A.EmptyIterable$(_this.$ti._precomputed1);
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A._asInt(count);
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this._start;
      if (endOrLength == null) {
        if (typeof t1 !== "number")
          return t1.$add();
        return A.SubListIterable$(_this.__internal$_iterable, t1, t1 + count, _this.$ti._precomputed1);
      } else {
        if (typeof t1 !== "number")
          return t1.$add();
        newEnd = t1 + count;
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var start, t1, t2, end, endOrLength, $length, result, t3, i, t4, _this = this;
      A._asBool(growable);
      start = _this._start;
      t1 = _this.__internal$_iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0)
        return A.List_List$empty(growable, _this.$ti._precomputed1);
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (t3 = J.getInterceptor$ax(result), i = 1; i < $length; ++i) {
        t3.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        t4 = t2.get$length(t1);
        if (typeof t4 !== "number")
          return t4.$lt();
        if (t4 < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!A.boolConversionCheck(J.$eq$(_this.__internal$_length, $length)))
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (typeof t3 !== "number")
        return t3.$ge();
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      t1 = _this.__internal$_index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__internal$_index(t1 + 1);
      return true;
    },
    set$__internal$_index(_index) {
      this.__internal$_index = A._asInt(_index);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._precomputed1, t1._rest[1]);
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, A._asInt(index)));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, A._asInt(index)));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return A.WhereIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._precomputed1);
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return A.MappedIterable$_(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._precomputed1, $T);
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return A.TakeIterator$(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, A._instanceType(this)._precomputed1);
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (typeof t1 !== "number")
        return A.iae(t1);
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._remaining;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_remaining(t1 - 1);
      t1 = _this._remaining;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0)
        return _this._iterator.moveNext$0();
      _this._remaining = -1;
      return false;
    },
    get$current() {
      var t1 = this._remaining;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 0) {
        this.$ti._precomputed1._as(null);
        return null;
      }
      return this._iterator.get$current();
    },
    set$_remaining(_remaining) {
      this._remaining = A._asInt(_remaining);
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      var t1 = this._skipCount,
        t2 = A._checkCount(A._asInt(count));
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return A.SkipIterable$_(this.__internal$_iterable, t1 + t2, A._instanceType(this)._precomputed1);
    },
    get$iterator(_) {
      return A.SkipIterator$(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._precomputed1);
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length,
        t1 = J.get$length$asx(this.__internal$_iterable),
        t2 = this._skipCount;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return A.iae(t2);
      $length = t1 - t2;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      var t1 = this._skipCount,
        t2 = A._checkCount(A._asInt(count));
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return A.EfficientLengthSkipIterable$_(this.__internal$_iterable, t1 + t2, this.$ti._precomputed1);
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t2,
        t1 = this._iterator,
        i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(A._asInt(index), 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    join$1(_, separator) {
      A._asString(separator);
      return "";
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    where$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return this;
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return A.EmptyIterable$($T);
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(A._asInt(count), "count");
      return this;
    },
    take$1(_, count) {
      A.RangeError_checkNotNegative(A._asInt(count), "count");
      return this;
    },
    toList$1$growable(_, growable) {
      return A.List_List$empty(A._asBool(growable), this.$ti._precomputed1);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    $isHideEfficientLengthIterable: 1
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return A.WhereTypeIterator$(J.get$iterator$ax(this._source), this.$ti._precomputed1);
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      A._asInt(newLength);
      throw A.wrapException(A.UnsupportedError$(string$.Cannotc));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2(receiver, index, value) {
      A._asInt(index);
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insertAll$2(receiver, at, iterable) {
      A._asInt(at);
      A.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1(receiver, iterable) {
      A.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1(receiver, element) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    clear$0(receiver) {
      throw A.wrapException(A.UnsupportedError$("Cannot clear a fixed-length list"));
    },
    removeAt$1(receiver, index) {
      A._asInt(index);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeLast$0(receiver) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._asInt(index);
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      A._asInt(newLength);
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    setAll$2(_, at, iterable) {
      A._asInt(at);
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2(_, index, element) {
      A._asInt(index);
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(element);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insertAll$2(_, at, iterable) {
      A._asInt(at);
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1(_, iterable) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1(_, element) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    sort$1(_, compare) {
      A._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    sort$0(_) {
      return this.sort$1(0, null);
    },
    clear$0(_) {
      throw A.wrapException(A.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    removeAt$1(_, index) {
      A._asInt(index);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    removeLast$0(_) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      A._asInt(start);
      A._asInt(end);
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      A._asInt(skipCount);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isIterable: 1,
    $is_ListIterable: 1,
    $isList: 1
  };
  A.UnmodifiableListBase.prototype = {$isUnmodifiableListMixin: 1};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1, t2, t3;
      A._asInt(index);
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        return t3.$sub();
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1, $isListBase: 1, $is_ListIterable: 1, $isList: 1};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A._Record_2_file_outFlags.prototype = {$recipe: "+file,outFlags(1,2)", $shape: 2};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(this.get$isEmpty(0));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      A.ConstantMap__throwUnmodifiable();
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      A.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      A.ConstantMap__throwUnmodifiable();
    },
    clear$0(_) {
      A.ConstantMap__throwUnmodifiable();
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other);
      A.ConstantMap__throwUnmodifiable();
    },
    get$entries() {
      return A._makeSyncStarIterable(this.entries$body$ConstantMap(), A._instanceType(this)._eval$1("MapEntry<1,2>"));
    },
    entries$body$ConstantMap() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = J.get$iterator$ax($async$self.get$keys()), t2 = A._instanceType($async$self), t3 = t2._precomputed1, t2 = t2._rest[1];
              case 2:
                // for condition
                if (!A.boolConversionCheck(t1.moveNext$0())) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = A.MapEntry$_(key, t4 == null ? t2._as(t4) : t4, t3, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return J.get$length$asx(this._values);
    },
    get$__js_helper$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = A._keysFromIndex(this._jsIndex);
        this._setKeys$1(keys);
      }
      return keys;
    },
    _setKeys$1(keys) {
      this.$keys = keys;
      return this;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return A.jsHasOwnProperty(this._jsIndex, key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$__js_helper$_keys();
      values = this._values;
      for (i = 0; i < keys.length; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys() {
      return A._KeysOrValues$(this.get$__js_helper$_keys(), this.$ti._precomputed1);
    },
    get$values() {
      return A._KeysOrValues$(this._values, this.$ti._rest[1]);
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return J.get$length$asx(this._elements);
    },
    get$isEmpty(_) {
      return 0 === this.get$length(0);
    },
    get$isNotEmpty(_) {
      return 0 !== this.get$length(0);
    },
    get$iterator(_) {
      return A._KeysOrValuesOrElementsIterator$(this._elements, this.$ti._precomputed1);
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this.__js_helper$_length;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 >= t2) {
        _this.set$__js_helper$_current(null);
        return false;
      }
      _this.set$__js_helper$_current(_this._elements[t1]);
      t1 = _this.__js_helper$_index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__js_helper$_index(t1 + 1);
      return true;
    },
    set$__js_helper$_index(_index) {
      this.__js_helper$_index = A._asInt(_index);
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (!A.boolConversionCheck(J.$eq$(t1, -1)))
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (!A.boolConversionCheck(J.$eq$(t1, -1)))
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (!A.boolConversionCheck(J.$eq$(t1, -1)))
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (!A.boolConversionCheck(J.$eq$(t1, -1)))
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (!A.boolConversionCheck(J.$eq$(t1, -1)))
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    },
    $isNoSuchMethodError: 1
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + A.S(_this.__js_helper$_message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + A.S(t1) + "' (" + A.S(_this.__js_helper$_message) + ")";
      t1 = A.S(t1);
      return _s38_ + t1 + "' on '" + A.S(t2) + "' (" + A.S(_this.__js_helper$_message) + ")";
    },
    $isNoSuchMethodError: 1
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return A.boolConversionCheck(J.get$isEmpty$asx(t1)) ? "Error" : "Error: " + A.S(t1);
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.S(A.unminifyOrTag($name == null ? "unknown" : $name)) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.S(A.unminifyOrTag($name)) + "'";
    }
  };
  A.BoundClosure.prototype = {
    get$_name() {
      return this.$_name;
    },
    get$_target() {
      return this.$_target;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.get$_target() === other.get$_target() && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      var receiverHashCode = A.objectHashCode(this._receiver),
        t1 = A.Primitives_objectHashCode(this.get$_target());
      if (typeof t1 !== "number")
        return A.iae(t1);
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + A.S(this.get$_name()) + "' of " + A.S(A.Primitives_objectToHumanReadableString(this._receiver));
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      var variableName = this.variableName;
      return variableName == null ? "Reading static variable during its initialization" : "Reading static variable '" + variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + A.S(this.message);
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return B.JSString_methods.$add("Assertion failed: ", A.Error_safeToString(this.message));
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return J.$eq$(this.__js_helper$_length, 0);
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(this.get$isEmpty(0));
    },
    get$keys() {
      return A.LinkedHashMapKeyIterable$(this, A._instanceType(this)._precomputed1);
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this.get$keys(), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums, _this = this;
      if (A.boolConversionCheck(A.JsLinkedHashMap__isStringKey(key))) {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (A.boolConversionCheck(A.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (A.boolConversionCheck(A.JsLinkedHashMap__isStringKey(key))) {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (A.boolConversionCheck(A.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (A.boolConversionCheck(A.JsLinkedHashMap__isStringKey(key))) {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (A.boolConversionCheck(A.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this.__js_helper$_newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (A.boolConversionCheck(A.JsLinkedHashMap__isStringKey(key)))
        return _this.__js_helper$_removeHashTableEntry$2(_this.__js_helper$_strings, key);
      else if (A.boolConversionCheck(A.JsLinkedHashMap__isNumericKey(key)))
        return _this.__js_helper$_removeHashTableEntry$2(_this.__js_helper$_nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this.__js_helper$_unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    clear$0(_) {
      var _this = this,
        t1 = _this.__js_helper$_length;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        _this.__js_helper$_strings = _this.__js_helper$_nums = _this.__js_helper$_rest = _this.__js_helper$_first = _this.__js_helper$_last = null;
        _this.__js_helper$_length = 0;
        _this.__js_helper$_modified$0();
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3(table, key, value) {
      var cell, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this.__js_helper$_newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return null;
      this.__js_helper$_unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    __js_helper$_modified$0() {
      var t1 = this.__js_helper$_modifications;
      if (typeof t1 !== "number")
        return t1.$add();
      this.__js_helper$_modifications = t1 + 1 & 1073741823;
    },
    __js_helper$_newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = A.LinkedHashMapCell$(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else {
        t1 = _this.__js_helper$_last;
        t1.toString;
        cell.__js_helper$_previous = t1;
        _this.__js_helper$_last = t1.__js_helper$_next = cell;
      }
      t1 = _this.__js_helper$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__js_helper$_length(t1 + 1);
      _this.__js_helper$_modified$0();
      return cell;
    },
    __js_helper$_unlinkCell$1(cell) {
      var previous, next, t1, _this = this;
      type$.LinkedHashMapCell._as(cell);
      previous = cell.__js_helper$_previous;
      next = cell.__js_helper$_next;
      if (previous == null)
        _this.__js_helper$_first = next;
      else
        previous.__js_helper$_next = next;
      if (next == null)
        _this.__js_helper$_last = previous;
      else
        next.__js_helper$_previous = previous;
      t1 = _this.__js_helper$_length;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$__js_helper$_length(t1 - 1);
      _this.__js_helper$_modified$0();
    },
    internalComputeHashCode$1(key) {
      var t1 = J.get$hashCode$(key);
      if (typeof t1 !== "number")
        return A.iae(t1);
      return t1 & 1073741823;
    },
    _getBucket$2(table, key) {
      return this._getTableBucket$2(table, this.internalComputeHashCode$1(key));
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (A.boolConversionCheck(J.$eq$(bucket[i].hashMapCellKey, key)))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _getTableCell$2(table, key) {
      return table[key];
    },
    _getTableBucket$2(table, key) {
      return table[key];
    },
    _setTableEntry$3(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2(table, key) {
      delete table[key];
    },
    _containsTableEntry$2(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    set$__js_helper$_length(_length) {
      this.__js_helper$_length = A._asInt(_length);
    },
    $isInternalMap: 1,
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return J.$eq$(this._map.__js_helper$_length, 0);
    },
    get$iterator(_) {
      var t1 = this._map;
      return A.LinkedHashMapKeyIterator$(t1, t1.__js_helper$_modifications, this.$ti._precomputed1);
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    },
    $isHideEfficientLengthIterable: 1
  };
  A.LinkedHashMapKeyIterator.prototype = {
    LinkedHashMapKeyIterator$2(_map, _modifications, $E) {
      this.set$__js_helper$_cell(this._map.__js_helper$_first);
    },
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (!A.boolConversionCheck(J.$eq$(_this.__js_helper$_modifications, t1.__js_helper$_modifications)))
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this.__js_helper$_cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this.set$__js_helper$_cell(cell.__js_helper$_next);
        return true;
      }
    },
    set$__js_helper$_cell(_cell) {
      this.__js_helper$_cell = type$.nullable_LinkedHashMapCell._as(_cell);
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 78
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, A._asString(tag));
    },
    $signature: 77
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 71
  };
  A._Record.prototype = {
    get$_shapeTag() {
      return this.$shape;
    },
    _sameShape$1(other) {
      type$._Record._as(other);
      return J.$eq$(this.get$_shapeTag(), other.get$_shapeTag());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var keys, values, sb, t1, t2, separator, i, t3, key, value;
      A._asBool(safe);
      keys = this._fieldKeys$0();
      values = this._getFieldValues$0();
      sb = A.StringBuffer$("");
      if (safe)
        sb.write$1("Record ");
      sb.write$1("(");
      t1 = J.getInterceptor$asx(keys);
      t2 = J.getInterceptor$asx(values);
      separator = "";
      i = 0;
      while (true) {
        t3 = t1.get$length(keys);
        if (typeof t3 !== "number")
          return A.iae(t3);
        if (!(i < t3))
          break;
        sb.write$1(separator);
        key = t1.$index(keys, i);
        if (typeof key == "string") {
          sb.write$1(key);
          sb.write$1(": ");
        }
        value = t2.$index(values, i);
        if (safe)
          sb.write$1(A.Primitives_safeToString(value));
        else
          sb.write$1(value);
        ++i;
        separator = ", ";
      }
      sb.write$1(")");
      return sb.toString$0(0);
    },
    _fieldKeys$0() {
      var t2,
        shapeTag = this.get$_shapeTag(),
        t1 = J.getInterceptor$asx($._Record__computedFieldKeys);
      while (true) {
        t2 = t1.get$length($._Record__computedFieldKeys);
        if (typeof t2 !== "number")
          return t2.$le();
        if (!(t2 <= shapeTag))
          break;
        t1.add$1($._Record__computedFieldKeys, null);
      }
      t2 = t1.$index($._Record__computedFieldKeys, shapeTag);
      if (t2 == null) {
        t2 = this._computeFieldKeys$0();
        t1.$indexSet($._Record__computedFieldKeys, shapeTag, t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    _computeFieldKeys$0() {
      var t2, i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (t2 = result.$flags | 0, i = 0; i < arity; ++i) {
        t2 & 2 && A.throwUnsupportedOperation(result);
        result[i] = i;
      }
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    },
    $isRecord: 1
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    _equalFields$1(other) {
      type$._Record2._as(other);
      return A.boolConversionCheck(J.$eq$(this._0, other._0)) && A.boolConversionCheck(J.$eq$(this._1, other._1));
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this._sameShape$1(other) && this._equalFields$1(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this.get$_shapeTag(), this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + A.S(this.pattern) + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), _this.get$_isUnicode(), _this.get$_isDotAll(), true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(A.S(_this.pattern) + "|()", _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), _this.get$_isUnicode(), _this.get$_isDotAll(), true);
    },
    get$_isMultiLine() {
      return this._nativeRegExp.multiline;
    },
    get$_isCaseSensitive() {
      return !this._nativeRegExp.ignoreCase;
    },
    get$_isUnicode() {
      return this._nativeRegExp.unicode;
    },
    get$_isDotAll() {
      return this._nativeRegExp.dotAll;
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(A._asString(string));
      if (m == null)
        return null;
      return A._MatchImplementation$(this, m);
    },
    hasMatch$1(string) {
      return this._nativeRegExp.test(A._asString(string));
    },
    allMatches$1(_, string) {
      A._asString(string);
      return A._AllMatchesIterable$(this, string, 0);
    },
    _execGlobal$2(string, start) {
      var regexp, match;
      A._asString(string);
      A._asInt(start);
      regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return A._MatchImplementation$(this, match);
    },
    _execAnchored$2(string, start) {
      var regexp, match;
      A._asString(string);
      A._asInt(start);
      regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return A.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return A._MatchImplementation$(this, match);
    },
    matchAsPrefix$2(_, string, start) {
      A._asString(string);
      A._asInt(start);
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    get$isUnicode() {
      return this.get$_isUnicode();
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start() {
      return this._match.index;
    },
    get$end() {
      var t1 = this.get$start(),
        t2 = this._match[0].length;
      if (typeof t1 !== "number")
        return t1.$add();
      return A._asInt(t1 + t2);
    },
    group$1(index) {
      return J.$index$asx(this._match, A._asInt(index));
    },
    $index(_, index) {
      return this.group$1(A._asInt(index));
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return A._AllMatchesIterator$(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (A.boolConversionCheck(J.$eq$(match.get$start(), nextIndex))) {
            t1 = false;
            if (A.boolConversionCheck(t3.get$isUnicode())) {
              t3 = _this._nextIndex;
              if (typeof t3 !== "number")
                return t3.$add();
              if (t3 + 1 < t2)
                if (A.boolConversionCheck(A._AllMatchesIterator__isLeadSurrogate(B.JSString_methods.codeUnitAt$1(string, t3)))) {
                  t1 = _this._nextIndex;
                  if (typeof t1 !== "number")
                    return t1.$add();
                  t1 = A.boolConversionCheck(A._AllMatchesIterator__isTrailSurrogate(B.JSString_methods.codeUnitAt$1(string, t1 + 1)));
                }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end() {
      var t1 = this.start,
        t2 = J.get$length$asx(this.pattern);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return t1 + t2;
    },
    $isMatch: 1,
    get$start() {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return A._StringAllMatchesIterator$(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._input,
        t2 = this._pattern,
        index = A.stringIndexOfStringUnchecked(t1, t2, this.__js_helper$_index);
      if (index >= 0)
        return A.StringMatch$(index, t1, t2);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var t5, t6, t7, index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = J.getInterceptor$asx(t2),
        t4 = t3.get$length(t2);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t4 !== "number")
        return A.iae(t4);
      t5 = _this._input;
      t6 = J.getInterceptor$asx(t5);
      t7 = t6.get$length(t5);
      if (typeof t7 !== "number")
        return A.iae(t7);
      if (t1 + t4 > t7) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = A.stringIndexOfStringUnchecked(t5, t2, _this.__js_helper$_index);
      if (index < 0) {
        t1 = t6.get$length(t5);
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$__js_helper$_index(t1 + 1);
        _this.__js_helper$_current = null;
        return false;
      }
      t1 = t3.get$length(t2);
      if (typeof t1 !== "number")
        return A.iae(t1);
      end = index + t1;
      _this.__js_helper$_current = A.StringMatch$(index, t5, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    set$__js_helper$_index(_index) {
      this.__js_helper$_index = A._asInt(_index);
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _Cell$named$1(_name) {
      this.__late_helper$_value = this;
    },
    readLocal$1$0($T) {
      return this._readLocal$0();
    },
    readField$1$0($T) {
      return this._readField$0();
    },
    _readLocal$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$localNI(this.__late_helper$_name));
      return t1;
    },
    _readField$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    },
    set$value(v) {
      this.__late_helper$_value = v;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$lengthInBytes(receiver) {
      return receiver.byteLength;
    },
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_EOZ;
    },
    asUint8List$2(receiver, offsetInBytes, $length) {
      return A.NativeUint8List_NativeUint8List$view(receiver, A._asInt(offsetInBytes), A._asIntQ($length));
    },
    asUint8List$0(receiver) {
      return this.asUint8List$2(receiver, 0, null);
    },
    asUint8List$1(receiver, offsetInBytes) {
      return this.asUint8List$2(receiver, offsetInBytes, null);
    },
    asInt32List$2(receiver, offsetInBytes, $length) {
      return A.NativeInt32List_NativeInt32List$view(receiver, A._asInt(offsetInBytes), A._asIntQ($length));
    },
    asInt32List$0(receiver) {
      return this.asInt32List$2(receiver, 0, null);
    },
    asByteData$2(receiver, offsetInBytes, $length) {
      return A.NativeByteData_NativeByteData$view(receiver, A._asInt(offsetInBytes), A._asIntQ($length));
    },
    asByteData$0(receiver) {
      return this.asByteData$2(receiver, 0, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    get$buffer(receiver) {
      if (A.boolConversionCheck(this._isUnmodifiable$0(receiver)))
        return A._UnmodifiableNativeByteBufferView$(this.get$_nativeBuffer(receiver));
      else
        return this.get$_nativeBuffer(receiver);
    },
    get$_nativeBuffer(receiver) {
      return receiver.buffer;
    },
    get$offsetInBytes(receiver) {
      return receiver.byteOffset;
    },
    _isUnmodifiable$0(receiver) {
      return ((receiver.$flags | 0) & 2) !== 0;
    },
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(A._asInt(position), 0, A._asInt($length), A._asString($name), null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      A._asInt(position);
      A._asInt($length);
      A._asString($name);
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    _checkMutable$1(receiver, operation) {
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, A._asString(operation));
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  A._UnmodifiableNativeByteBufferView.prototype = {
    get$lengthInBytes(_) {
      return J.get$lengthInBytes$x(this._data);
    },
    asUint8List$2(_, offsetInBytes, $length) {
      var result = J.asUint8List$2$x(this._data, A._asInt(offsetInBytes), A._asIntQ($length));
      result.$flags = 3;
      return result;
    },
    asUint8List$0(_) {
      return this.asUint8List$2(0, 0, null);
    },
    asUint8List$1(_, offsetInBytes) {
      return this.asUint8List$2(0, offsetInBytes, null);
    },
    asInt32List$0(_) {
      var result = J.asInt32List$2$x(this._data, 0, null);
      result.$flags = 3;
      return result;
    },
    asByteData$0(_) {
      var result = J.asByteData$2$x(this._data, 0, null);
      result.$flags = 3;
      return result;
    },
    $isByteBuffer: 1
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_mF8;
    },
    getInt32$1(receiver, byteOffset) {
      return this._getInt32$2(receiver, A._asInt(byteOffset), false);
    },
    _getInt32$2(receiver, byteOffset, littleEndian) {
      return receiver.getInt32(byteOffset, littleEndian);
    },
    getUint32$1(receiver, byteOffset) {
      return this._getUint32$2(receiver, A._asInt(byteOffset), false);
    },
    _getUint32$2(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(byteOffset, littleEndian);
    },
    setInt32$2(receiver, byteOffset, value) {
      A._asInt(byteOffset);
      A._asInt(value);
      this._checkMutable$1(receiver, "setInt32");
      this._setInt32$3(receiver, byteOffset, value, false);
    },
    _setInt32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setInt32(byteOffset, value, littleEndian);
    },
    setUint32$2(receiver, byteOffset, value) {
      A._asInt(byteOffset);
      A._asInt(value);
      this._checkMutable$1(receiver, "setUint32");
      this._setUint32$3(receiver, byteOffset, value, false);
    },
    _setUint32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(byteOffset, value, littleEndian);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteData: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var targetLength, count, sourceLength;
      A._asInt(start);
      A._asInt(end);
      type$.NativeTypedArray_dynamic._as(source);
      A._asInt(skipCount);
      targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJSMutableIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asInt(index);
      A._asDouble(value);
      this._checkMutable$1(receiver, "[]=");
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      A._asInt(start);
      A._asInt(end);
      type$.Iterable_double._as(iterable);
      A._asInt(skipCount);
      this._checkMutable$1(receiver, "setRange");
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isFixedLengthListMixin: 1,
    $isListBase: 1,
    $isIterable: 1,
    $is_ListIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(index);
      A._asInt(value);
      this._checkMutable$1(receiver, "[]=");
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      A._asInt(start);
      A._asInt(end);
      type$.Iterable_int._as(iterable);
      A._asInt(skipCount);
      this._checkMutable$1(receiver, "setRange");
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isFixedLengthListMixin: 1,
    $isListBase: 1,
    $isIterable: 1,
    $is_ListIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_Ymk;
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeFloat32List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeFloat32List: 1,
    $isTypedDataList: 1,
    $is_TypedFloatList: 1,
    $isFloat32List: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_Ymk;
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeFloat64List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeFloat64List: 1,
    $isTypedDataList: 1,
    $is_TypedFloatList: 1,
    $isFloat64List: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_cot;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeInt16List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeInt16List: 1,
    $isTypedDataList: 1,
    $is_TypedIntList: 1,
    $isInt16List: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_m1p;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeInt32List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeInt32List: 1,
    $isTypedDataList: 1,
    $is_TypedIntList: 1,
    $isInt32List: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_woc;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeInt8List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeInt8List: 1,
    $isTypedDataList: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2mh;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeUint16List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint16List: 1,
    $isTypedDataList: 1,
    $is_TypedIntList: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2mh;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeUint32List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint32List: 1,
    $isTypedDataList: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_9Bb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeUint8ClampedList__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8ClampedList: 1,
    $isTypedDataList: 1,
    $is_TypedIntList: 1,
    $isUint8ClampedList: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_CSc;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      A._asInt(start);
      return A.NativeUint8List__create1(receiver.subarray(start, A._checkValidRange(start, A._asIntQ(end), receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isTypedDataList: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1, $isListBase: 1, $isIterable: 1, $is_ListIterable: 1, $isList: 1};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1, $isFixedLengthListMixin: 1, $isListBase: 1, $isIterable: 1, $is_ListIterable: 1, $isList: 1};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1, $isListBase: 1, $isIterable: 1, $is_ListIterable: 1, $isList: 1};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1, $isFixedLengthListMixin: 1, $isListBase: 1, $isIterable: 1, $is_ListIterable: 1, $isList: 1};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._rtiEval(this, A._Utils_asString(recipe));
    },
    _bind$1(typeOrTuple) {
      return A._rtiBind(this, A._Utils_asRti(typeOrTuple));
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    _Type$1(_rti) {
      A.Rti__setCachedRuntimeType(this._rti, this);
    },
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 5
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 70
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (A.boolConversionCheck(A._hasTimer()))
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    cancel$0() {
      if (A.boolConversionCheck(A._hasTimer())) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        self.clearTimeout(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._handle = null;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!A.boolConversionCheck(_this.isSync))
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    complete$0() {
      return this.complete$1(null);
    },
    completeError$2(e, st) {
      var t1;
      type$.Object._as(e);
      type$.nullable_StackTrace._as(st);
      if (st == null)
        st = A.AsyncError_defaultStackTrace(e);
      t1 = this._future;
      if (A.boolConversionCheck(this.isSync))
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    completeError$1(e) {
      return this.completeError$2(e, null);
    },
    get$future() {
      return this._future;
    },
    get$isCompleted() {
      return !A.boolConversionCheck(this._future.get$_mayComplete());
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 6
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, A.ExceptionAndStackTrace$(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 65
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 62
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, _null = null, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this.set$_async$_current(nestedIterator.get$current());
              return true;
            } else
              _this.set$_nestedIterator(_null);
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this.set$_nestedIterator(_null);
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this.set$_async$_current(_null);
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || A.boolConversionCheck(J.get$isEmpty$asx(suspendedBodies))) {
            _this._body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          _this._body = J.removeLast$0$ax(suspendedBodies);
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || A.boolConversionCheck(J.get$isEmpty$asx(suspendedBodies))) {
            _this.set$_async$_current(_null);
            _this._body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          _this._body = J.removeLast$0$ax(suspendedBodies);
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var inner, t1, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        inner = iterable.get$iterator(0);
        t1 = _this._suspendedBodies;
        if (t1 == null)
          t1 = _this._suspendedBodies = [];
        J.add$1$ax(t1, _this._body);
        _this._body = inner._body;
        return 2;
      } else {
        _this.set$_nestedIterator(J.get$iterator$ax(iterable));
        return 2;
      }
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return A._SyncStarIterator$(this._outerHelper(), this.$ti._precomputed1);
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastStream.prototype = {
    get$isBroadcast() {
      return true;
    }
  };
  A._BroadcastSubscription.prototype = {
    _BroadcastSubscription$5(controller, onData, onError, onDone, cancelOnError, $T) {
      var _this = this;
      _this.set$_async$_previous(_this);
      _this.set$_async$_next(_this);
    },
    get$_isFiring() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _setRemoveAfterFiring$0() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = (t1 | 4) >>> 0;
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_async$_next(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_async$_previous(_previous) {
      this._async$_previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    get$stream() {
      return A._BroadcastStream$(this, A._instanceType(this)._precomputed1);
    },
    get$sink() {
      return A._StreamSinkWrapper$(this, A._instanceType(this)._precomputed1);
    },
    get$isClosed() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    get$_isFiring() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$_mayAddEvent() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 4;
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      return t1 == null ? this._doneFuture = A._Future$(type$.void) : t1;
    },
    get$_isEmpty() {
      return this._firstSubscription == null;
    },
    _addListener$1(subscription) {
      var t1, oldLast, _this = this;
      A._instanceType(_this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      subscription._eventState = t1 & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      A._asBool(cancelOnError);
      if (A.boolConversionCheck(_this.get$isClosed()))
        return A._DoneStreamSubscription$(onDone, t1._precomputed1);
      subscription = A._BroadcastSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      _this._addListener$1(subscription);
      t1 = _this._firstSubscription;
      t2 = _this._lastSubscription;
      if (t1 == null ? t2 == null : t1 === t2)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      if (A.boolConversionCheck(sub.get$_isFiring()))
        sub._setRemoveAfterFiring$0();
      else {
        _this._removeListener$1(sub);
        if (!A.boolConversionCheck(_this.get$_isFiring()) && A.boolConversionCheck(_this.get$_isEmpty()))
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if (A.boolConversionCheck(this.get$isClosed()))
        return A.StateError$("Cannot add new events after calling close");
      return A.StateError$("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!A.boolConversionCheck(_this.get$_mayAddEvent()))
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2(error, stackTrace) {
      var _0_0;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (!A.boolConversionCheck(this.get$_mayAddEvent()))
        throw A.wrapException(this._addEventError$0());
      _0_0 = A._interceptUserError(error, stackTrace);
      this._addError$2(_0_0.error, _0_0.stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0() {
      var t1, doneFuture, _this = this;
      if (A.boolConversionCheck(_this.get$isClosed())) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!A.boolConversionCheck(_this.get$_mayAddEvent()))
        throw A.wrapException(_this._addEventError$0());
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 4) >>> 0;
      doneFuture = _this._ensureDoneFuture$0();
      _this._sendDone$0();
      return doneFuture;
    },
    get$done() {
      return this._ensureDoneFuture$0();
    },
    _async$_add$1(data) {
      this._sendData$1(A._instanceType(this)._precomputed1._as(data));
    },
    _addError$2(error, stackTrace) {
      this._sendError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _close$0() {
      var t2, _this = this,
        t1 = _this._addStreamState;
      t1.toString;
      _this.set$_addStreamState(null);
      t2 = _this._state;
      if (typeof t2 !== "number")
        return t2.$and();
      _this._state = (t2 & 4294967287) >>> 0;
      t1.complete$0();
    },
    _callOnCancel$0() {
      if (A.boolConversionCheck(this.get$isClosed())) {
        var t1 = this._doneFuture;
        t1.toString;
        if (A.boolConversionCheck(t1.get$_mayComplete()))
          t1._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    set$_firstSubscription(_firstSubscription) {
      this._firstSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_firstSubscription);
    },
    set$_lastSubscription(_lastSubscription) {
      this._lastSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_lastSubscription);
    },
    set$_addStreamState(_addStreamState) {
      this._addStreamState = A._instanceType(this)._eval$1("_AddStreamState<1>?")._as(_addStreamState);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._AsyncBroadcastStreamController.prototype = {
    _sendData$1(data) {
      var subscription,
        t1 = this.$ti._precomputed1;
      t1._as(data);
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(A._DelayedData$(data, t1));
    },
    _sendError$2(error, stackTrace) {
      var subscription;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(A._DelayedError$(error, stackTrace));
    },
    _sendDone$0() {
      if (!A.boolConversionCheck(this.get$_isEmpty()))
        for (var subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(B.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  A.Future_Future_closure.prototype = {
    call$0() {
      var e, s, exception, computationResult = null;
      try {
        computationResult = this.computation.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.result, e, s);
        return;
      }
      this.result._complete$1(computationResult);
    },
    $signature: 0
  };
  A.Future_Future$delayed_closure.prototype = {
    call$0() {
      var computationResult, e, s, exception, _this = this,
        t1 = _this.computation;
      if (t1 == null) {
        _this.T._as(null);
        _this.result._complete$1(null);
      } else {
        computationResult = null;
        try {
          computationResult = t1.call$0();
        } catch (exception) {
          e = A.unwrapException(exception);
          s = A.getTraceFromException(exception);
          A._completeWithErrorCallback(_this.result, e, s);
          return;
        }
        _this.result._complete$1(computationResult);
      }
    },
    $signature: 0
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var t1, t2, remaining, valueList, t3, value, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = t1.remaining;
      if (typeof t2 !== "number")
        return t2.$sub();
      remaining = t1.remaining = t2 - 1;
      valueList = t1.values;
      if (valueList != null) {
        t1.values = null;
        t1.error = theError;
        t1.stackTrace = theStackTrace;
        t1 = _this.cleanUp;
        if (t1 != null)
          for (t2 = J.get$iterator$ax(valueList), t3 = type$.Null; A.boolConversionCheck(t2.moveNext$0());) {
            value = t2.get$current();
            if (value != null)
              A.Future_Future$sync(new A.Future_wait_handleError_closure(t1, value), t3);
          }
        if (remaining === 0 || A.boolConversionCheck(_this.eagerError))
          _this._future._completeError$2(theError, theStackTrace);
      } else if (remaining === 0 && !A.boolConversionCheck(_this.eagerError)) {
        t2 = t1.error;
        t2.toString;
        t1 = t1.stackTrace;
        t1.toString;
        _this._future._completeError$2(t2, t1);
      }
    },
    $signature: 8
  };
  A.Future_wait_handleError_closure.prototype = {
    call$0() {
      this.cleanUp.call$1(this.cleanUpValue);
    },
    $signature: 3
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var remainingResults, valueList, t1, value0, t3, t4, remaining, _this = this,
        t2 = _this.T;
      t2._as(value);
      t3 = _this._box_0;
      t4 = t3.remaining;
      if (typeof t4 !== "number")
        return t4.$sub();
      remaining = t4 - 1;
      t3.remaining = remaining;
      remainingResults = remaining;
      valueList = t3.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (A.boolConversionCheck(J.$eq$(remainingResults, 0))) {
          t1 = A._setArrayType([], t2._eval$1("JSArray<0>"));
          for (t3 = J.get$iterator$ax(valueList); A.boolConversionCheck(t3.moveNext$0());) {
            value0 = t3.get$current();
            t4 = value0;
            if (t4 == null)
              t4 = t2._as(t4);
            J.add$1$ax(t1, t4);
          }
          _this._future._completeWithValue$1(t1);
        }
      } else {
        t1 = _this.cleanUp;
        if (t1 != null && value != null)
          A.Future_Future$sync(new A.Future_wait__closure(t1, value), type$.Null);
        if (A.boolConversionCheck(J.$eq$(remainingResults, 0)) && !A.boolConversionCheck(_this.eagerError)) {
          t1 = t3.error;
          t1.toString;
          t3 = t3.stackTrace;
          t3.toString;
          _this._future._completeError$2(t1, t3);
        }
      }
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A.Future_wait__closure.prototype = {
    call$0() {
      this.cleanUp.call$1(this.value);
    },
    $signature: 3
  };
  A.FutureExtensions_onError_onError.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      if (this.E._is(error)) {
        t1 = this.test;
        t1 = t1 != null && !A.boolConversionCheck(t1.call$1(error));
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(error);
      return this.handleError.call$2(error, stackTrace);
    },
    $signature() {
      return this.T._eval$1("0/(Object,StackTrace)");
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var _0_0;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (!A.boolConversionCheck(this.future.get$_mayComplete()))
        throw A.wrapException(A.StateError$("Future already completed"));
      _0_0 = A._interceptUserError(error, stackTrace);
      this._completeError$2(_0_0.error, _0_0.stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    get$isCompleted() {
      return !A.boolConversionCheck(this.future.get$_mayComplete());
    },
    $isCompleter: 1,
    get$future() {
      return this.future;
    }
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (!A.boolConversionCheck(t2.get$_mayComplete()))
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (!A.boolConversionCheck(t2.get$_mayComplete()))
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeError$2(error, stackTrace) {
      this.future._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    }
  };
  A._FutureListener.prototype = {
    get$_zone() {
      return this.result._zone;
    },
    get$handlesValue() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    get$handlesError() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$hasErrorTest() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 6;
    },
    get$handlesComplete() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 8;
    },
    get$_onValue() {
      return A.unsafeCast(this.callback, this.$ti._eval$1("2/(1)"));
    },
    get$_onError() {
      return this.errorCallback;
    },
    get$_errorTest() {
      return A.unsafeCast(this.callback, type$.bool_Function_Object);
    },
    get$_whenCompleteAction() {
      return A.unsafeCast(this.callback, type$.dynamic_Function);
    },
    get$hasErrorCallback() {
      return this.get$_onError() != null;
    },
    handleValue$1(sourceResult) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      t2._as(sourceResult);
      return this.get$_zone().runUnary$2$2(this.get$_onValue(), sourceResult, t1._eval$1("2/"), t2);
    },
    matchesErrorTest$1(asyncError) {
      type$.AsyncError._as(asyncError);
      if (!A.boolConversionCheck(this.get$hasErrorTest()))
        return true;
      return this.get$_zone().runUnary$2$2(this.get$_errorTest(), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var result, errorCallback, t1, t2, t3, exception, _this = this;
      type$.AsyncError._as(asyncError);
      errorCallback = _this.errorCallback;
      result = null;
      t1 = type$.dynamic;
      t2 = type$.Object;
      t3 = asyncError.error;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = _this.get$_zone().runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = _this.get$_zone().runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if (A.boolConversionCheck(_this.get$handlesValue()))
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    },
    handleWhenComplete$0() {
      return this.get$_zone().run$1$1(this.get$_whenCompleteAction(), type$.dynamic);
    },
    shouldChain$1(value) {
      var t1;
      type$.Future_dynamic._as(value);
      t1 = this.$ti;
      return t1._eval$1("Future<2>")._is(value) || !t1._rest[1]._is(value);
    }
  };
  A._Future.prototype = {
    _Future$immediate$1(result, $T) {
      this._asyncComplete$1(result);
    },
    _Future$zoneValue$2(value, _zone, $T) {
      this._setValue$1(value);
    },
    _Future$immediateError$2(error, stackTrace, $T) {
      this._asyncCompleteError$2(error == null ? type$.Object._as(error) : error, stackTrace);
    },
    get$_mayComplete() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 30) === 0;
    },
    get$_mayAddListener() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$le();
      return t1 <= 3;
    },
    get$_isChained() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    get$_isComplete() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 24) !== 0;
    },
    get$_hasError() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 16) !== 0;
    },
    get$_ignoreError() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    _setChained$1(source) {
      var t1;
      type$._Future_dynamic._as(source);
      t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      this._state = t1 & 1 | 4;
      this._resultOrListeners = source;
    },
    then$1$2$onError(f, onError, $R) {
      var currentZone, result,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      type$.nullable_Function._as(onError);
      currentZone = A.Zone_current();
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = A._Future$($R);
      this._addListener$1(A._FutureListener$then(result, f, onError, t1._precomputed1, $R));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      type$.Function._as(onError);
      result = A._Future$($E);
      this._addListener$1(A._FutureListener$thenAwait(result, f, onError, t1._precomputed1, $E));
      return result;
    },
    catchError$1(onError) {
      var t1, result, t2;
      type$.Function._as(onError);
      t1 = this.$ti._precomputed1;
      result = A._Future$(t1);
      t2 = result._zone;
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(A._FutureListener$catchError(result, onError, null, t1, t1));
      return result;
    },
    _safeOnError$1$1(onError, $R) {
      var result, t1;
      $R._eval$1("0/(Object,StackTrace)")._as(onError);
      result = A._Future$($R);
      t1 = result._zone;
      if (t1 !== B.C__RootZone)
        onError = t1.registerBinaryCallback$3$1(onError, $R._eval$1("0/"), type$.Object, type$.StackTrace);
      this._addListener$1(A._FutureListener$catchError(result, onError, null, this.$ti._precomputed1, $R));
      return result;
    },
    whenComplete$1(action) {
      var t1, result, t2;
      type$.dynamic_Function._as(action);
      t1 = this.$ti._precomputed1;
      result = A._Future$(t1);
      t2 = result._zone;
      this._addListener$1(A._FutureListener$whenComplete(result, t2 !== B.C__RootZone ? t2.registerCallback$1$1(action, type$.dynamic) : action, t1, t1));
      return result;
    },
    _setPendingComplete$0() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._state = (t1 ^ 2) >>> 0;
    },
    _clearPendingComplete$0() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._state = (t1 ^ 2) >>> 0;
    },
    get$_error() {
      return type$.AsyncError._as(this._resultOrListeners);
    },
    get$_chainSource() {
      return type$._Future_dynamic._as(this._resultOrListeners);
    },
    _setValue$1(value) {
      this.$ti._precomputed1._as(value);
      this._state = 8;
      this._resultOrListeners = value;
    },
    _setErrorObject$1(error) {
      var t1;
      type$.AsyncError._as(error);
      t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      this._state = t1 & 1 | 16;
      this._resultOrListeners = error;
    },
    _setError$2(error, stackTrace) {
      this._setErrorObject$1(A.AsyncError$(type$.Object._as(error), type$.StackTrace._as(stackTrace)));
    },
    _cloneResult$1(source) {
      var t1, t2;
      type$._Future_dynamic._as(source);
      t1 = source._state;
      if (typeof t1 !== "number")
        return t1.$and();
      t2 = this._state;
      if (typeof t2 !== "number")
        return t2.$and();
      this._state = t1 & 30 | t2 & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this;
      type$._FutureListener_dynamic_dynamic._as(listener);
      if (A.boolConversionCheck(_this.get$_mayAddListener())) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (A.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!A.boolConversionCheck(source.get$_isComplete())) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      t1 = type$.nullable__FutureListener_dynamic_dynamic;
      t1._as(listeners);
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      if (A.boolConversionCheck(_this.get$_mayAddListener())) {
        existingListeners = t1._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (A.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!A.boolConversionCheck(source.get$_isComplete())) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      type$.nullable__FutureListener_dynamic_dynamic._as(listeners);
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      type$.Future_dynamic._as(source);
      _this._setPendingComplete$0();
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFutureSync(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        _this._setValue$1(value);
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._setValue$1(value);
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._setPendingComplete$0();
      _this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1(value) {
      var t1 = this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        A._Future__chainCoreFutureAsync(value, this);
        return;
      }
      this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this._setPendingComplete$0();
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._clearPendingComplete$0();
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 5
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 15
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__chainCoreFutureAsync_closure.prototype = {
    call$0() {
      A._Future__chainCoreFutureSync(this._box_0.source, this.target);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, exception, t1, t2, originalSource, _this = this, completeResult = null;
      try {
        completeResult = _this._box_0.listener.handleWhenComplete$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (A.boolConversionCheck(_this.hasError)) {
          t1 = _this._box_1.source.get$_error().error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source.get$_error();
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && A.boolConversionCheck(completeResult.get$_isComplete())) {
        if (A.boolConversionCheck(completeResult.get$_hasError())) {
          t1 = _this._box_0;
          t1.listenerValueOrError = completeResult.get$_error();
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 59
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, exception;
      try {
        t1 = this._box_0;
        t1.listenerValueOrError = t1.listener.handleValue$1(this.sourceResult);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, t3, t4, _this = this;
      try {
        asyncError = _this._box_1.source.get$_error();
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && A.boolConversionCheck(t1.listener.get$hasErrorCallback())) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this._box_1;
        t2 = t1.source.get$_error().error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1.source.get$_error();
        else
          t4.listenerValueOrError = A.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {
    set$next(next) {
      this.next = type$.nullable__AsyncCallbackEntry._as(next);
    }
  };
  A.Stream.prototype = {
    get$isBroadcast() {
      return false;
    },
    map$1$1(_, convert, $S) {
      var t1 = A._instanceType(this);
      return A._MapStream$(this, t1._bind$1($S)._eval$1("1(Stream.T)")._as(convert), t1._eval$1("Stream.T"), $S);
    },
    transform$1$1(streamTransformer, $S) {
      return A._instanceType(this)._bind$1($S)._eval$1("StreamTransformer<Stream.T,1>")._as(streamTransformer).bind$1(this);
    },
    get$length(_) {
      var t1 = {},
        future = A._Future$(type$.int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$first(_) {
      var future = A._Future$(A._instanceType(this)._eval$1("Stream.T")),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_first_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_first_closure0(this, subscription, future));
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      var t1, t2;
      A._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      t1 = this._box_0;
      t2 = t1.count;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.count = t2 + 1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A.Stream_first_closure.prototype = {
    call$0() {
      var e, s, t1, exception;
      try {
        t1 = A.IterableElementError_noElement();
        throw A.wrapException(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.future, e, s);
      }
    },
    $signature: 0
  };
  A.Stream_first_closure0.prototype = {
    call$1(value) {
      A._cancelAndValue(this.subscription, this.future, A._instanceType(this.$this)._eval$1("Stream.T")._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  A._StreamController.prototype = {
    get$stream() {
      return A._ControllerStream$(this, A._instanceType(this)._precomputed1);
    },
    get$sink() {
      return A._StreamSinkWrapper$(this, A._instanceType(this)._precomputed1);
    },
    get$_isCanceled() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$hasListener() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    get$_isInitialState() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 3) === 0;
    },
    get$isClosed() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    get$_isAddingStream() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 8) !== 0;
    },
    get$_mayAddEvent() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 4;
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if (!A.boolConversionCheck(_this.get$_isAddingStream()))
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$_varData());
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if (!A.boolConversionCheck(_this.get$_isAddingStream())) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = A._PendingEvents$(A._instanceType(_this)._precomputed1);
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.get$_varData();
      if (events == null) {
        events = A._PendingEvents$(t1._precomputed1);
        state.set$_varData(events);
      }
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_async$_subscription() {
      var varData = this._varData;
      if (A.boolConversionCheck(this.get$_isAddingStream()))
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).get$_varData();
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if (A.boolConversionCheck(this.get$isClosed()))
        return A.StateError$("Cannot add event after closing");
      return A.StateError$("Cannot add event while adding a stream");
    },
    get$done() {
      return this._ensureDoneFuture$0();
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = A.boolConversionCheck(this.get$_isCanceled()) ? $.$get$Future__nullFuture() : A._Future$(type$.void);
        this.set$_doneFuture(t1);
      }
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (!A.boolConversionCheck(_this.get$_mayAddEvent()))
        throw A.wrapException(_this._badEventState$0());
      _this._async$_add$1(value);
    },
    addError$2(error, stackTrace) {
      var _0_0;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (!A.boolConversionCheck(this.get$_mayAddEvent()))
        throw A.wrapException(this._badEventState$0());
      _0_0 = A._interceptUserError(error, stackTrace);
      this._addError$2(_0_0.error, _0_0.stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0() {
      var _this = this;
      if (A.boolConversionCheck(_this.get$isClosed()))
        return _this._ensureDoneFuture$0();
      if (!A.boolConversionCheck(_this.get$_mayAddEvent()))
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 4) >>> 0;
      if (A.boolConversionCheck(_this.get$hasListener()))
        _this._sendDone$0();
      else if (A.boolConversionCheck(_this.get$_isInitialState()))
        _this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _async$_add$1(value) {
      var _this = this,
        t1 = A._instanceType(_this)._precomputed1;
      t1._as(value);
      if (A.boolConversionCheck(_this.get$hasListener()))
        _this._sendData$1(value);
      else if (A.boolConversionCheck(_this.get$_isInitialState()))
        _this._ensurePendingEvents$0().add$1(0, A._DelayedData$(value, t1));
    },
    _addError$2(error, stackTrace) {
      var _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      if (A.boolConversionCheck(_this.get$hasListener()))
        _this._sendError$2(error, stackTrace);
      else if (A.boolConversionCheck(_this.get$_isInitialState()))
        _this._ensurePendingEvents$0().add$1(0, A._DelayedError$(error, stackTrace));
    },
    _close$0() {
      var t1, _this = this,
        addState = A._instanceType(_this)._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      _this._varData = addState.get$_varData();
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967287) >>> 0;
      addState.complete$0();
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      A._asBool(cancelOnError);
      if (!A.boolConversionCheck(_this.get$_isInitialState()))
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._state;
      if (typeof t2 !== "number")
        return t2.$or();
      _this._state = (t2 | 1) >>> 0;
      if (A.boolConversionCheck(_this.get$_isAddingStream())) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.set$_varData(subscription);
        addState.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if (A.boolConversionCheck(_this.get$_isAddingStream()))
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967286 | 2) >>> 0;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (cancelResult instanceof A._Future)
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = A._Future$(type$.void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if (A.boolConversionCheck(_this.get$_isAddingStream()))
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).pause$0();
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if (A.boolConversionCheck(_this.get$_isAddingStream()))
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).resume$0();
      A._runGuarded(_this.onResume);
    },
    set$_doneFuture(_doneFuture) {
      this._doneFuture = type$.nullable__Future_void._as(_doneFuture);
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onPause(onPause) {
      this.onPause = type$.nullable_void_Function._as(onPause);
    },
    set$onResume(onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && A.boolConversionCheck(doneFuture.get$_mayComplete()))
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_async$_subscription()._async$_add$1(data);
    },
    _sendError$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this.get$_async$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_async$_subscription()._close$0();
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $isSynchronousStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_StreamController: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = A._instanceType(this)._precomputed1;
      t1._as(data);
      this.get$_async$_subscription()._addPending$1(A._DelayedData$(data, t1));
    },
    _sendError$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this.get$_async$_subscription()._addPending$1(A._DelayedError$(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_async$_subscription()._addPending$1(B.C__DelayedDone);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_StreamController: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._AsyncStreamController.prototype = {$is_AsyncStreamControllerDispatch: 1};
  A._SyncStreamController.prototype = {$isSynchronousStreamController: 1, $is_SyncStreamControllerDispatch: 1};
  A._ControllerStream.prototype = {
    _createSubscription$4(onData, onError, onDone, cancelOnError) {
      return this._async$_controller._subscribe$4(A._instanceType(this)._eval$1("~(1)?")._as(onData), type$.nullable_Function._as(onError), type$.nullable_void_Function._as(onDone), A._asBool(cancelOnError));
    },
    get$hashCode(_) {
      var t1 = J.get$hashCode$(this._async$_controller);
      if (typeof t1 !== "number")
        return t1.$xor();
      return (t1 ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A._ControllerStream) {
        t1 = other._async$_controller;
        t2 = this._async$_controller;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._async$_controller._recordPause$1(this);
    },
    _onResume$0() {
      this._async$_controller._recordResume$1(this);
    }
  };
  A._StreamSinkWrapper.prototype = {
    add$1(_, data) {
      J.add$1$ax(this._async$_target, this.$ti._precomputed1._as(data));
    },
    addError$2(error, stackTrace) {
      this._async$_target.addError$2(type$.Object._as(error), type$.nullable_StackTrace._as(stackTrace));
    },
    close$0() {
      return this._async$_target.close$0();
    },
    get$done() {
      return this._async$_target.get$done();
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isSink: 1
  };
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var t1, _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (!A.boolConversionCheck(pendingEvents.get$isEmpty(0))) {
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$or();
        _this._state = (t1 | 128) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this.set$_async$_onData(A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    pause$0() {
      var wasPaused, wasInputPaused, t1, _this = this;
      if (A.boolConversionCheck(_this.get$_isCanceled()))
        return;
      wasPaused = _this.get$_isPaused();
      wasInputPaused = _this.get$_isInputPaused();
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$add();
      _this._state = (t1 + 256 | 4) >>> 0;
      if (!wasPaused) {
        t1 = _this._pending;
        if (t1 != null)
          t1.cancelSchedule$0();
      }
      if (!wasInputPaused && !A.boolConversionCheck(_this.get$_inCallback()))
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0() {
      var t1, _this = this;
      if (A.boolConversionCheck(_this.get$_isCanceled()))
        return;
      if (A.boolConversionCheck(_this.get$_isPaused())) {
        _this._decrementPauseCount$0();
        if (!A.boolConversionCheck(_this.get$_isPaused())) {
          if (A.boolConversionCheck(_this.get$_hasPending())) {
            t1 = _this._pending;
            t1.toString;
            t1 = !A.boolConversionCheck(J.get$isEmpty$asx(t1));
          } else
            t1 = false;
          if (t1)
            _this._pending.schedule$1(_this);
          else {
            t1 = _this._state;
            if (typeof t1 !== "number")
              return t1.$and();
            _this._state = (t1 & 4294967291) >>> 0;
            if (!A.boolConversionCheck(_this.get$_inCallback()))
              _this._guardCallback$1(_this.get$_onResume());
          }
        }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967279) >>> 0;
      if (!A.boolConversionCheck(_this.get$_isCanceled()))
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    get$_isInputPaused() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    get$_async$_isClosed() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$_isCanceled() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 8) !== 0;
    },
    get$_waitsForCancel() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 16) !== 0;
    },
    get$_inCallback() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 64) !== 0;
    },
    get$_hasPending() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 128) !== 0;
    },
    get$_isPaused() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 256;
    },
    get$_canFire() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 64;
    },
    get$_mayResumeInput() {
      if (!A.boolConversionCheck(this.get$_isPaused())) {
        var t1 = this._pending;
        t1 = t1 == null ? null : J.get$isEmpty$asx(t1);
        t1 = A.boolConversionCheck(t1 == null ? true : t1);
      } else
        t1 = false;
      return t1;
    },
    get$_cancelOnError() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    _cancel$0() {
      var _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 8) >>> 0;
      if (A.boolConversionCheck(_this.get$_hasPending()))
        _this._pending.cancelSchedule$0();
      if (!A.boolConversionCheck(_this.get$_inCallback()))
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _decrementPauseCount$0() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$sub();
      this.set$_state(t1 - 256);
    },
    _async$_add$1(data) {
      var _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      if (A.boolConversionCheck(_this.get$_isCanceled()))
        return;
      if (A.boolConversionCheck(_this.get$_canFire()))
        _this._sendData$1(data);
      else
        _this._addPending$1(A._DelayedData$(data, t1));
    },
    _addError$2(error, stackTrace) {
      var _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      A._trySetStackTrace(error, stackTrace);
      if (A.boolConversionCheck(_this.get$_isCanceled()))
        return;
      if (A.boolConversionCheck(_this.get$_canFire()))
        _this._sendError$2(error, stackTrace);
      else
        _this._addPending$1(A._DelayedError$(error, stackTrace));
    },
    _close$0() {
      var t1, _this = this;
      if (A.boolConversionCheck(_this.get$_isCanceled()))
        return;
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 2) >>> 0;
      if (A.boolConversionCheck(_this.get$_canFire()))
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var pending, t1, _this = this;
      type$._DelayedEvent_dynamic._as($event);
      pending = _this._pending;
      if (pending == null) {
        pending = A._PendingEvents$(A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T"));
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      if (!A.boolConversionCheck(_this.get$_hasPending())) {
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$or();
        _this._state = (t1 | 128) >>> 0;
        if (!A.boolConversionCheck(_this.get$_isPaused()))
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var wasInputPaused, t2, _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      wasInputPaused = _this.get$_isInputPaused();
      t2 = _this._state;
      if (typeof t2 !== "number")
        return t2.$or();
      _this._state = (t2 | 64) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967231) >>> 0;
      _this._checkState$1(wasInputPaused);
    },
    _sendError$2(error, stackTrace) {
      var wasInputPaused, t1, t2, cancelFuture, _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      wasInputPaused = _this.get$_isInputPaused();
      t1 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if (A.boolConversionCheck(_this.get$_cancelOnError())) {
        t2 = _this._state;
        if (typeof t2 !== "number")
          return t2.$or();
        _this._state = (t2 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t1);
        else
          t1.call$0();
      } else {
        t1.call$0();
        _this._checkState$1(wasInputPaused);
      }
    },
    _sendDone$0() {
      var t2, cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      t2 = _this._state;
      if (typeof t2 !== "number")
        return t2.$or();
      _this._state = (t2 | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var wasInputPaused, t1, _this = this;
      type$.void_Function._as(callback);
      wasInputPaused = _this.get$_isInputPaused();
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 64) >>> 0;
      callback.call$0();
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967231) >>> 0;
      _this._checkState$1(wasInputPaused);
    },
    _checkState$1(wasInputPaused) {
      var t1, isInputPaused, _this = this;
      A._asBool(wasInputPaused);
      if (A.boolConversionCheck(_this.get$_hasPending())) {
        t1 = _this._pending;
        t1.toString;
        t1 = A.boolConversionCheck(J.get$isEmpty$asx(t1));
      } else
        t1 = false;
      if (t1) {
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$and();
        _this._state = (t1 & 4294967167) >>> 0;
        if (A.boolConversionCheck(_this.get$_isInputPaused()) && A.boolConversionCheck(_this.get$_mayResumeInput())) {
          t1 = _this._state;
          if (typeof t1 !== "number")
            return t1.$and();
          _this._state = (t1 & 4294967291) >>> 0;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if (A.boolConversionCheck(_this.get$_isCanceled())) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = _this.get$_isInputPaused();
        if (wasInputPaused === isInputPaused)
          break;
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$xor();
        _this._state = (t1 ^ 64) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$and();
        _this._state = (t1 & 4294967231) >>> 0;
      }
      if (A.boolConversionCheck(_this.get$_hasPending()) && !A.boolConversionCheck(_this.get$_isPaused()))
        _this._pending.schedule$1(_this);
    },
    set$_async$_onData(_onData) {
      this._async$_onData = A._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_state(_state) {
      this._state = A._asInt(_state);
    },
    set$_pending(_pending) {
      this._pending = A._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var t2, onError, t3, t4,
        t1 = this.$this;
      if (A.boolConversionCheck(t1.get$_isCanceled()) && !A.boolConversionCheck(t1.get$_waitsForCancel()))
        return;
      t2 = t1._state;
      if (typeof t2 !== "number")
        return t2.$or();
      t1._state = (t2 | 64) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t2 = t1._state;
      if (typeof t2 !== "number")
        return t2.$and();
      t1._state = (t2 & 4294967231) >>> 0;
    },
    $signature: 0
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (!A.boolConversionCheck(t1.get$_waitsForCancel()))
        return;
      t2 = t1._state;
      if (typeof t2 !== "number")
        return t2.$or();
      t1._state = (t2 | 74) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t2 = t1._state;
      if (typeof t2 !== "number")
        return t2.$and();
      t1._state = (t2 & 4294967231) >>> 0;
    },
    $signature: 0
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var subscription;
      A._instanceType(this)._eval$1("~(1)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      A._asBoolQ(cancelOnError);
      subscription = this._createSubscription$4(onData, onError, onDone, cancelOnError === true);
      this._onListen$1(subscription);
      return subscription;
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$onError(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$2$onDone(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _onListen$1(subscription) {
      type$.StreamSubscription_dynamic._as(subscription);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      type$._EventDispatch_dynamic._as(dispatch)._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      type$._EventDispatch_dynamic._as(dispatch)._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(_) {
      type$.nullable__DelayedEvent_dynamic._as(_);
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    get$isScheduled() {
      return J.$eq$(this._state, 1);
    },
    get$_eventScheduled() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 1;
    },
    schedule$1(dispatch) {
      var _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      if (A.boolConversionCheck(_this.get$isScheduled()))
        return;
      if (A.boolConversionCheck(_this.get$_eventScheduled())) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    cancelSchedule$0() {
      if (A.boolConversionCheck(this.get$isScheduled()))
        this._state = 3;
    },
    get$isEmpty(_) {
      return this.lastPendingEvent == null;
    },
    add$1(_, $event) {
      var lastEvent, _this = this;
      type$._DelayedEvent_dynamic._as($event);
      lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    },
    handleNext$1(dispatch) {
      var t1, nextEvent, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this.firstPendingEvent;
      t1.toString;
      nextEvent = t1.get$next();
      _this.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        _this.lastPendingEvent = null;
      t1.perform$1(dispatch);
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    $signature: 0
  };
  A._DoneStreamSubscription.prototype = {
    _DoneStreamSubscription$1(onDone, $T) {
      A.scheduleMicrotask(this.get$_onMicrotask());
      if (onDone != null)
        this.set$_onDone(this._zone.registerCallback$1$1(onDone, type$.void));
    },
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    pause$0() {
      var t1 = this._state;
      if (!A.boolConversionCheck(A._DoneStreamSubscription__isDone(t1)))
        this.set$_state(A._DoneStreamSubscription__incrementPauseCount(t1));
    },
    resume$0() {
      var _this = this,
        resumeState = A._DoneStreamSubscription__decrementPauseCount(_this._state);
      if (resumeState < 0)
        return;
      if (resumeState === 0) {
        _this._state = 1;
        A.scheduleMicrotask(_this.get$_onMicrotask());
      } else
        _this._state = resumeState;
    },
    cancel$0() {
      this._state = -1;
      this.set$_onDone(null);
      return $.$get$Future__nullFuture();
    },
    _onMicrotask$0() {
      var unscheduledState, _0_0, _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$sub();
      unscheduledState = t1 - 1;
      if (unscheduledState === 0) {
        _this._state = -1;
        _0_0 = _this._onDone;
        if (_0_0 != null) {
          _this.set$_onDone(null);
          _this._zone.runGuarded$1(_0_0);
        }
      } else
        _this._state = unscheduledState;
    },
    set$_state(_state) {
      this._state = A._asInt(_state);
    },
    set$_onDone(_onDone) {
      this._onDone = type$.nullable_void_Function._as(_onDone);
    },
    $isStreamSubscription: 1
  };
  A._StreamIterator.prototype = {
    get$current() {
      var _this = this;
      if (A.boolConversionCheck(_this._async$_hasValue))
        return _this.$ti._precomputed1._as(_this._stateData);
      return _this.$ti._precomputed1._as(null);
    },
    moveNext$0() {
      var future, _this = this,
        subscription = _this._async$_subscription;
      if (subscription != null) {
        if (A.boolConversionCheck(_this._async$_hasValue)) {
          future = A._Future$(type$.bool);
          _this._stateData = future;
          _this._async$_hasValue = false;
          subscription.resume$0();
          return future;
        }
        throw A.wrapException(A.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0() {
      var future, subscription, _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this.$ti._eval$1("Stream<1>")._as(stateData);
        future = A._Future$(type$.bool);
        _this._stateData = future;
        subscription = stateData.listen$4$cancelOnError$onDone$onError(_this.get$_async$_onData(), true, _this.get$_onDone(), _this.get$_onError());
        if (_this._stateData != null)
          _this.set$_async$_subscription(subscription);
        return future;
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0() {
      var _this = this,
        subscription = _this._async$_subscription,
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this.set$_async$_subscription(null);
        if (!A.boolConversionCheck(_this._async$_hasValue))
          type$._Future_bool._as(stateData)._asyncComplete$1(false);
        else
          _this._async$_hasValue = false;
        return subscription.cancel$0();
      }
      return $.$get$Future__nullFuture();
    },
    _async$_onData$1(data) {
      var moveNextFuture, t1, _this = this;
      _this.$ti._precomputed1._as(data);
      if (_this._async$_subscription == null)
        return;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = data;
      _this._async$_hasValue = true;
      moveNextFuture._complete$1(true);
      if (A.boolConversionCheck(_this._async$_hasValue)) {
        t1 = _this._async$_subscription;
        if (t1 != null)
          t1.pause$0();
      }
    },
    _onError$2(error, stackTrace) {
      var subscription, moveNextFuture, _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      subscription = _this._async$_subscription;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_async$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeError$2(error, stackTrace);
      else
        moveNextFuture._asyncCompleteError$2(error, stackTrace);
    },
    _onDone$0() {
      var _this = this,
        subscription = _this._async$_subscription,
        moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_async$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeWithValue$1(false);
      else
        moveNextFuture._asyncCompleteWithValue$1(false);
    },
    set$_async$_subscription(_subscription) {
      this._async$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    },
    $isStreamIterator: 1
  };
  A._MultiStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var controller,
        t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      A._asBoolQ(cancelOnError);
      controller = A._MultiStreamController$(t1._precomputed1);
      controller.set$onListen(new A._MultiStream_listen_closure(this, controller));
      return controller._subscribe$4(onData, onError, onDone, cancelOnError === true);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$onError(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$2$onDone(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _onListen$1(arg0) {
      return this._onListen.call$1(arg0);
    },
    get$isBroadcast() {
      return this.isBroadcast;
    }
  };
  A._MultiStream_listen_closure.prototype = {
    call$0() {
      this.$this._onListen$1(this.controller);
    },
    $signature: 0
  };
  A._MultiStreamController.prototype = {
    addSync$1(data) {
      var _this = this;
      _this.$ti._precomputed1._as(data);
      if (!A.boolConversionCheck(_this.get$_mayAddEvent()))
        throw A.wrapException(_this._badEventState$0());
      if (A.boolConversionCheck(_this.get$hasListener()))
        _this.get$_async$_subscription()._async$_add$1(data);
    },
    get$stream() {
      throw A.wrapException(A.UnsupportedError$("Not available"));
    },
    $isMultiStreamController: 1
  };
  A._cancelAndValue_closure.prototype = {
    call$0() {
      return this.future._complete$1(this.value);
    },
    $signature: 0
  };
  A._ForwardingStream.prototype = {
    get$isBroadcast() {
      return this._async$_source.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      this.$ti._eval$1("~(2)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      A._asBoolQ(cancelOnError);
      return this._createSubscription$4(onData, onError, onDone, cancelOnError === true);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$onError(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$2$onDone(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4(onData, onError, onDone, cancelOnError) {
      var t1 = this.$ti;
      return A._ForwardingStreamSubscription$(this, t1._eval$1("~(2)?")._as(onData), type$.nullable_Function._as(onError), type$.nullable_void_Function._as(onDone), A._asBool(cancelOnError), t1._precomputed1, t1._rest[1]);
    },
    _handleError$3(error, stackTrace, sink) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this.$ti._eval$1("_EventSink<2>")._as(sink)._addError$2(error, stackTrace);
    },
    _handleDone$1(sink) {
      this.$ti._eval$1("_EventSink<2>")._as(sink)._close$0();
    }
  };
  A._ForwardingStreamSubscription.prototype = {
    _ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var _this = this;
      _this.set$_async$_subscription(_this._stream._async$_source.listen$3$onDone$onError(_this.get$_handleData(), _this.get$_handleDone(), _this.get$_handleError()));
    },
    _async$_add$1(data) {
      this.$ti._rest[1]._as(data);
      if (A.boolConversionCheck(this.get$_async$_isClosed()))
        return;
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      if (A.boolConversionCheck(this.get$_async$_isClosed()))
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.pause$0();
    },
    _onResume$0() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.resume$0();
    },
    _onCancel$0() {
      var subscription = this._async$_subscription;
      if (subscription != null) {
        this.set$_async$_subscription(null);
        return subscription.cancel$0();
      }
      return null;
    },
    _handleData$1(data) {
      this._stream._handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _handleError$2(error, stackTrace) {
      var t1;
      type$.StackTrace._as(stackTrace);
      t1 = error == null ? type$.Object._as(error) : error;
      this._stream._handleError$3(t1, stackTrace, this);
    },
    _handleDone$0() {
      this._stream._handleDone$1(this);
    },
    set$_async$_subscription(_subscription) {
      this._async$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._MapStream.prototype = {
    _handleData$2(inputEvent, sink) {
      var outputEvent, e, s, exception,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._addErrorWithReplacement(sink, e, s);
        return;
      }
      sink._async$_add$1(outputEvent);
    }
  };
  A._EventSinkWrapper.prototype = {
    add$1(_, data) {
      this._async$_sink._async$_add$1(this.$ti._precomputed1._as(data));
    },
    addError$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      t1 = stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace;
      this._async$_sink._addError$2(error, t1);
    },
    close$0() {
      this._async$_sink._close$0();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A._SinkTransformerStreamSubscription.prototype = {
    get$_transformerSink() {
      return this.___SinkTransformerStreamSubscription__transformerSink_A;
    },
    set$_transformerSink(value) {
      this.set$___SinkTransformerStreamSubscription__transformerSink_A(this.$ti._eval$1("EventSink<1>")._as(value));
    },
    _SinkTransformerStreamSubscription$6(source, mapper, onData, onError, onDone, cancelOnError, $S, $T) {
      var _this = this;
      _this.set$_transformerSink(mapper.call$1(A._EventSinkWrapper$(_this, $T)));
      _this.set$_async$_subscription(source.listen$3$onDone$onError(_this.get$_handleData(), _this.get$_handleDone(), _this.get$_handleError()));
    },
    _async$_add$1(data) {
      this.$ti._rest[1]._as(data);
      if (A.boolConversionCheck(this.get$_async$_isClosed()))
        throw A.wrapException(A.StateError$("Stream is already closed"));
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      if (A.boolConversionCheck(this.get$_async$_isClosed()))
        throw A.wrapException(A.StateError$("Stream is already closed"));
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _close$0() {
      if (A.boolConversionCheck(this.get$_async$_isClosed()))
        throw A.wrapException(A.StateError$("Stream is already closed"));
      this.super$_BufferingStreamSubscription$_close();
    },
    _onPause$0() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.pause$0();
    },
    _onResume$0() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.resume$0();
    },
    _onCancel$0() {
      var subscription = this._async$_subscription;
      if (subscription != null) {
        this.set$_async$_subscription(null);
        return subscription.cancel$0();
      }
      return null;
    },
    _handleData$1(data) {
      var e, s, exception;
      this.$ti._precomputed1._as(data);
      try {
        J.add$1$ax(this.get$_transformerSink(), data);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._addError$2(e, s);
      }
    },
    _handleError$2(error, stackTrace) {
      var e, s, exception;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      try {
        this.get$_transformerSink().addError$2(error, stackTrace);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (e === error)
          this._addError$2(error, stackTrace);
        else
          this._addError$2(e, s);
      }
    },
    _handleDone$0() {
      var e, s, exception;
      try {
        this.set$_async$_subscription(null);
        this.get$_transformerSink().close$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._addError$2(e, s);
      }
    },
    set$___SinkTransformerStreamSubscription__transformerSink_A(___SinkTransformerStreamSubscription__transformerSink_A) {
      this.___SinkTransformerStreamSubscription__transformerSink_A = this.$ti._eval$1("EventSink<1>")._as(___SinkTransformerStreamSubscription__transformerSink_A);
    },
    set$_async$_subscription(_subscription) {
      this._async$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._BoundSinkStream.prototype = {
    get$isBroadcast() {
      return this._stream.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      A._asBoolQ(cancelOnError);
      return A._SinkTransformerStreamSubscription$(this._stream, this._sinkMapper, onData, onError, onDone, cancelOnError === true, t1._precomputed1, t1._rest[1]);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$onError(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$2$onDone(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._ZoneFunction.prototype = {};
  A._Zone.prototype = {
    inSameErrorZone$1(otherZone) {
      var t1, t2;
      type$.Zone._as(otherZone);
      if (this !== otherZone) {
        t1 = this.get$errorZone();
        t2 = otherZone.get$errorZone();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    $isZone: 1
  };
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    get$_scheduleMicrotask() {
      return B.C__ZoneFunction;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    handleUncaughtError$2(error, stackTrace) {
      A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2(error, stackTrace) {
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1(f) {
      A._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    },
    createTimer$2(duration, f) {
      return A.Timer__createTimer(type$.Duration._as(duration), type$.void_Function._as(f));
    }
  };
  A._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(this.get$isEmpty(0));
    },
    get$keys() {
      return A._HashMapKeyIterable$(this, this.$ti._precomputed1);
    },
    get$values() {
      var t1 = this.$ti;
      return A.MappedIterable_MappedIterable(this.get$keys(), new A._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (A.boolConversionCheck(A._HashMap__isStringKey(key))) {
        strings = this._strings;
        return strings == null ? false : A._HashMap__hasTableEntry(strings, key);
      } else if (A.boolConversionCheck(A._HashMap__isNumericKey(key))) {
        nums = this._nums;
        return nums == null ? false : A._HashMap__hasTableEntry(nums, key);
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._collection$_getBucket$2(rest, key), key) >= 0;
    },
    addAll$1(_, other) {
      this.$ti._eval$1("Map<1,2>")._as(other).forEach$1(0, new A._HashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, t1, nums;
      if (A.boolConversionCheck(A._HashMap__isStringKey(key))) {
        strings = this._strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (A.boolConversionCheck(A._HashMap__isNumericKey(key))) {
        nums = this._nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._collection$_getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (A.boolConversionCheck(A._HashMap__isStringKey(key))) {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (A.boolConversionCheck(A._HashMap__isNumericKey(key))) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_collection$_length(t1 + 1);
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          t1 = _this._collection$_length;
          if (typeof t1 !== "number")
            return t1.$add();
          _this.set$_collection$_length(t1 + 1);
          _this._keys = null;
        }
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (A.boolConversionCheck(A._HashMap__isStringKey(key)))
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (A.boolConversionCheck(A._HashMap__isNumericKey(key)))
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this._remove$1(key);
    },
    _remove$1(key) {
      var hash, bucket, index, t1, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_collection$_length(t1 - 1);
      _this._keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        A._HashMap__deleteTableEntry(rest, hash);
      return result;
    },
    clear$0(_) {
      var _this = this,
        t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        _this._strings = _this._nums = _this._collection$_rest = _this._keys = null;
        _this._collection$_length = 0;
      }
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = J.get$length$asx(keys), t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, index, names, entries, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._strings;
      index = 0;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      }
      nums = _this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _addHashTableEntry$3(table, key, value) {
      var _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (!A.boolConversionCheck(A._HashMap__hasTableEntry(table, key))) {
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_collection$_length(t1 + 1);
        _this._keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2(table, key) {
      var value, t1, _this = this;
      if (table != null && A.boolConversionCheck(A._HashMap__hasTableEntry(table, key))) {
        value = _this.$ti._rest[1]._as(A._HashMap__getTableEntry(table, key));
        A._HashMap__deleteTableEntry(table, key);
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_collection$_length(t1 - 1);
        _this._keys = null;
        return value;
      } else
        return null;
    },
    _collection$_getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    set$_collection$_length(_length) {
      this._collection$_length = A._asInt(_length);
    },
    $isHashMap: 1
  };
  A._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return this.$this.$ti._eval$1("2(1)");
    }
  };
  A._HashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1,2)");
    }
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return A.identityHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty(_) {
      return J.$eq$(this._collection$_map._collection$_length, 0);
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(J.$eq$(this._collection$_map._collection$_length, 0));
    },
    get$iterator(_) {
      var t1 = this._collection$_map;
      return A._HashMapKeyIterator$(t1, t1._computeKeys$0(), this.$ti._precomputed1);
    },
    contains$1(_, element) {
      return this._collection$_map.containsKey$1(element);
    },
    $isHideEfficientLengthIterable: 1
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      return A._LinkedHashSetIterator$(this, this._modifications, this.$ti._precomputed1);
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(this.get$isEmpty(0));
    },
    contains$1(_, object) {
      var strings, nums;
      if (A.boolConversionCheck(A._LinkedHashSet__isStringElement(object))) {
        strings = this._strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(A._LinkedHashSet__getTableEntry(strings, object)) != null;
      } else if (A.boolConversionCheck(A._LinkedHashSet__isNumericElement(object))) {
        nums = this._nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(A._LinkedHashSet__getTableEntry(nums, object)) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._collection$_getBucket$2(rest, object), object) >= 0;
    },
    get$first(_) {
      var first = this._first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return this.$ti._precomputed1._as(first._element);
    },
    get$last(_) {
      var last = this._last;
      if (last == null)
        throw A.wrapException(A.StateError$("No elements"));
      return this.$ti._precomputed1._as(last._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      _this.$ti._precomputed1._as(element);
      if (A.boolConversionCheck(A._LinkedHashSet__isStringElement(element))) {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (A.boolConversionCheck(A._LinkedHashSet__isNumericElement(element))) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      _this.$ti._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        A._LinkedHashSet__setTableEntry(rest, hash, [_this._newLinkedCell$1(element)]);
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (A.boolConversionCheck(A._LinkedHashSet__isStringElement(object)))
        return _this._removeHashTableEntry$2(_this._strings, object);
      else if (A.boolConversionCheck(A._LinkedHashSet__isNumericElement(object)))
        return _this._removeHashTableEntry$2(_this._nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        A._LinkedHashSet__deleteTableEntry(rest, hash);
      _this._unlinkCell$1(cell);
      return true;
    },
    clear$0(_) {
      var _this = this,
        t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        _this._strings = _this._nums = _this._collection$_rest = _this._first = _this._last = null;
        _this._collection$_length = 0;
        _this._modified$0();
      }
    },
    _addHashTableEntry$2(table, element) {
      this.$ti._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(A._LinkedHashSet__getTableEntry(table, element)) != null)
        return false;
      A._LinkedHashSet__setTableEntry(table, element, this._newLinkedCell$1(element));
      return true;
    },
    _removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$.nullable__LinkedHashSetCell._as(A._LinkedHashSet__getTableEntry(table, element));
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      A._LinkedHashSet__deleteTableEntry(table, element);
      return true;
    },
    _modified$0() {
      var t1 = this._modifications;
      if (typeof t1 !== "number")
        return t1.$add();
      this._modifications = t1 + 1 & 1073741823;
    },
    _newLinkedCell$1(element) {
      var t1, _this = this,
        cell = A._LinkedHashSetCell$(_this.$ti._precomputed1._as(element));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_collection$_length(t1 + 1);
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var previous, next, t1, _this = this;
      type$._LinkedHashSetCell._as(cell);
      previous = cell._previous;
      next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_collection$_length(t1 - 1);
      _this._modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _collection$_getBucket$2(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (A.boolConversionCheck(J.$eq$(bucket[i]._element, element)))
          return i;
      return -1;
    },
    set$_collection$_length(_length) {
      this._collection$_length = A._asInt(_length);
    },
    $isLinkedHashSet: 1
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    _LinkedHashSetIterator$2(_set, _modifications, $E) {
      this.set$_cell(this._set._first);
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._cell,
        t1 = _this._set;
      if (!A.boolConversionCheck(J.$eq$(_this._modifications, t1._modifications)))
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this.set$_cell(cell._next);
        return true;
      }
    },
    set$_cell(_cell) {
      this._cell = type$.nullable__LinkedHashSetCell._as(_cell);
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.LinkedList.prototype = {
    add$1(_, entry) {
      this.$ti._precomputed1._as(entry);
      this._insertBefore$3$updateFirst(this._first, entry, false);
    },
    remove$1(_, entry) {
      this.$ti._precomputed1._as(entry);
      if (!A.boolConversionCheck(J.$eq$(entry._list, this)))
        return false;
      this._unlink$1(entry);
      return true;
    },
    contains$1(_, entry) {
      return entry instanceof A._IndexedDbWorkItem && this === entry.get$list();
    },
    get$iterator(_) {
      return A._LinkedListIterator$(this, this.$ti._precomputed1);
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$first(_) {
      var t1;
      if (A.boolConversionCheck(this.get$isEmpty(0)))
        throw A.wrapException(A.StateError$("No such element"));
      t1 = this._first;
      t1.toString;
      return t1;
    },
    get$last(_) {
      var t1;
      if (A.boolConversionCheck(this.get$isEmpty(0)))
        throw A.wrapException(A.StateError$("No such element"));
      t1 = this._first._previous;
      t1.toString;
      return t1;
    },
    get$isEmpty(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    _insertBefore$3$updateFirst(entry, newEntry, updateFirst) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("1?")._as(entry);
      t1._precomputed1._as(newEntry);
      A._asBool(updateFirst);
      if (newEntry.get$list() != null)
        throw A.wrapException(A.StateError$("LinkedListEntry is already in a LinkedList"));
      t1 = _this._modificationCount;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_modificationCount(t1 + 1);
      newEntry.set$_list(_this);
      if (A.boolConversionCheck(_this.get$isEmpty(0))) {
        newEntry.set$_next(newEntry);
        newEntry.set$_previous(newEntry);
        _this.set$_first(newEntry);
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_collection$_length(t1 + 1);
        return;
      }
      t1 = entry._previous;
      t1.toString;
      newEntry.set$_previous(t1);
      newEntry.set$_next(entry);
      t1.set$_next(newEntry);
      entry.set$_previous(newEntry);
      if (updateFirst) {
        t1 = _this._first;
        t1 = entry == null ? t1 == null : entry === t1;
      } else
        t1 = false;
      if (t1)
        _this.set$_first(newEntry);
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_collection$_length(t1 + 1);
    },
    _unlink$1(entry) {
      var t1, next, _this = this, _null = null;
      _this.$ti._precomputed1._as(entry);
      t1 = _this._modificationCount;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_modificationCount(t1 + 1);
      entry._next.set$_previous(entry._previous);
      t1 = entry._previous;
      next = entry._next;
      t1.set$_next(next);
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_collection$_length(t1 - 1);
      entry.set$_previous(_null);
      entry.set$_next(_null);
      entry.set$_list(_null);
      if (A.boolConversionCheck(_this.get$isEmpty(0)))
        _this.set$_first(_null);
      else if (entry === _this._first)
        _this.set$_first(next);
    },
    set$_modificationCount(_modificationCount) {
      this._modificationCount = A._asInt(_modificationCount);
    },
    set$_collection$_length(_length) {
      this._collection$_length = A._asInt(_length);
    },
    set$_first(_first) {
      this._first = this.$ti._eval$1("1?")._as(_first);
    }
  };
  A._LinkedListIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._list;
      if (!A.boolConversionCheck(J.$eq$(_this._modificationCount, t1._modificationCount)))
        throw A.wrapException(A.ConcurrentModificationError$(_this));
      t2 = J.getInterceptor$asx(t1);
      if (!A.boolConversionCheck(t2.get$isEmpty(t1)))
        if (A.boolConversionCheck(_this._visitedFirst)) {
          t3 = _this._next;
          t1 = t2.get$first(t1);
          t1 = t3 == null ? t1 == null : t3 === t1;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        _this.set$_collection$_current(null);
        return false;
      }
      _this._visitedFirst = true;
      _this.set$_collection$_current(_this._next);
      _this.set$_next(_this._next._next);
      return true;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_next(_next) {
      this._next = this.$ti._eval$1("1?")._as(_next);
    },
    $isIterator: 1
  };
  A.LinkedListEntry.prototype = {
    get$list() {
      return this._list;
    },
    unlink$0() {
      var t1 = this._list;
      t1.toString;
      t1._unlink$1(A._instanceType(this)._eval$1("LinkedListEntry.E")._as(this));
    },
    get$previous() {
      var t1 = this._list;
      if (t1 == null || this === J.get$first$ax(t1))
        return null;
      return this._previous;
    },
    set$_list(_list) {
      this._list = A._instanceType(this)._eval$1("LinkedList<LinkedListEntry.E>?")._as(_list);
    },
    set$_next(_next) {
      this._next = A._instanceType(this)._eval$1("LinkedListEntry.E?")._as(_next);
    },
    set$_previous(_previous) {
      this._previous = A._instanceType(this)._eval$1("LinkedListEntry.E?")._as(_previous);
    }
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return A.ListIterator$(receiver, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, A._asInt(index));
    },
    forEach$1(receiver, action) {
      var $length, i;
      A.instanceType(receiver)._eval$1("~(ListBase.E)")._as(action);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty(receiver) {
      return !A.boolConversionCheck(this.get$isEmpty(receiver));
    },
    get$first(receiver) {
      if (A.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last(receiver) {
      var t1;
      if (A.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      return this.$index(receiver, t1 - 1);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (A.boolConversionCheck(J.$eq$(this.$index(receiver, i), element)))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$1(receiver, test) {
      var $length, i, element;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    join$1(receiver, separator) {
      var buffer;
      A._asString(separator);
      if (A.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        return "";
      buffer = A.StringBuffer$("");
      buffer.writeAll$2(receiver, separator);
      return buffer.toString$0(0);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    where$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return A.WhereIterable$(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("ListBase.E"));
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return A.MappedListIterable$(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("ListBase.E"), $T);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, A._asInt(count), null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(A._asInt(count), "count", type$.int), A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    toList$1$growable(receiver, growable) {
      var first, result, t1, i, t2, _this = this;
      A._asBool(growable);
      if (A.boolConversionCheck(_this.get$isEmpty(receiver)))
        return A.List_List$empty(growable, A.instanceType(receiver)._eval$1("ListBase.E"));
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, growable, A.instanceType(receiver)._eval$1("ListBase.E"));
      t1 = J.getInterceptor$ax(result);
      i = 1;
      while (true) {
        t2 = _this.get$length(receiver);
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(i < t2))
          break;
        t1.$indexSet(result, i, _this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    addAll$1(receiver, iterable) {
      var i, t1;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      i = this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); A.boolConversionCheck(t1.moveNext$0());) {
        this.add$1(receiver, t1.get$current());
        ++i;
      }
    },
    remove$1(receiver, element) {
      var t1, i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return A.iae(t1);
        if (!(i < t1))
          break;
        if (A.boolConversionCheck(J.$eq$(this.$index(receiver, i), element))) {
          this._closeGap$2(receiver, i, i + 1);
          return true;
        }
        ++i;
      }
      return false;
    },
    _closeGap$2(receiver, start, end) {
      var $length, size, i, _this = this;
      A._asInt(start);
      A._asInt(end);
      $length = _this.get$length(receiver);
      size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    clear$0(receiver) {
      this.set$length(receiver, 0);
    },
    removeLast$0(receiver) {
      var t1, result, _this = this;
      if (A.boolConversionCheck(J.$eq$(_this.get$length(receiver), 0)))
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      result = _this.$index(receiver, t1 - 1);
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$length(receiver, t1 - 1);
      return result;
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A.instanceType(receiver);
      t1._eval$1("int(ListBase.E,ListBase.E)?")._as(compare);
      t2 = compare == null ? A.collection_ListBase__compareAny$closure() : compare;
      A.Sort_sort(receiver, t2, t1._eval$1("ListBase.E"));
    },
    sort$0(receiver) {
      return this.sort$1(receiver, null);
    },
    sublist$2(receiver, start, end) {
      var listLength;
      A._asInt(start);
      A._asIntQ(end);
      listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      A.RangeError_checkValidRange(start, end, listLength);
      return A.List_List$of(this.getRange$2(receiver, start, end), true, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    getRange$2(receiver, start, end) {
      A._asInt(start);
      A._asInt(end);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    fillRange$3(receiver, start, end, fill) {
      var t1, value, i;
      A._asInt(start);
      A._asInt(end);
      t1 = A.instanceType(receiver);
      t1._eval$1("ListBase.E?")._as(fill);
      value = fill == null ? t1._eval$1("ListBase.E")._as(fill) : fill;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, value);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var t1, $length, otherStart, otherList, t2, i;
      A._asInt(start);
      A._asInt(end);
      t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListBase.E>")._as(iterable);
      A._asInt(skipCount);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListBase.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(J.skip$1$ax(iterable, skipCount), false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (otherStart + $length > t2)
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    lastIndexOf$1(receiver, element) {
      var start, i,
        t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      start = t1 - 1;
      start = start;
      for (i = start; i >= 0; --i)
        if (A.boolConversionCheck(J.$eq$(this.$index(receiver, i), element)))
          return i;
      return -1;
    },
    insert$2(receiver, index, element) {
      var $length, _this = this;
      A._asInt(index);
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      A.checkNotNullable(index, "index", type$.int);
      $length = _this.get$length(receiver);
      A.RangeError_checkValueInInterval(index, 0, $length, "index");
      _this.add$1(receiver, element);
      if (index !== $length) {
        _this.setRange$4(receiver, index + 1, $length + 1, receiver, index);
        _this.$indexSet(receiver, index, element);
      }
    },
    removeAt$1(receiver, index) {
      var result;
      A._asInt(index);
      result = this.$index(receiver, index);
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    insertAll$2(receiver, index, iterable) {
      var t1, insertionLength, oldLength, i, oldCopyStart, _this = this;
      A._asInt(index);
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      if (index === _this.get$length(receiver)) {
        _this.addAll$1(receiver, iterable);
        return;
      }
      if (!type$.EfficientLengthIterable_dynamic._is(iterable) || iterable === receiver)
        iterable = J.toList$0$ax(iterable);
      t1 = J.getInterceptor$asx(iterable);
      insertionLength = t1.get$length(iterable);
      if (insertionLength === 0)
        return;
      oldLength = _this.get$length(receiver);
      for (i = oldLength - insertionLength; i < oldLength; ++i)
        _this.add$1(receiver, _this.$index(receiver, i > 0 ? i : 0));
      if (!A.boolConversionCheck(J.$eq$(t1.get$length(iterable), insertionLength))) {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$length(receiver, t1 - insertionLength);
        throw A.wrapException(A.ConcurrentModificationError$(iterable));
      }
      oldCopyStart = index + insertionLength;
      if (oldCopyStart < oldLength)
        _this.setRange$4(receiver, oldCopyStart, oldLength, receiver, index);
      _this.setAll$2(receiver, index, iterable);
    },
    setAll$2(receiver, index, iterable) {
      var t1, index0;
      A._asInt(index);
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      if (type$.List_dynamic._is(iterable)) {
        t1 = J.get$length$asx(iterable);
        if (typeof t1 !== "number")
          return A.iae(t1);
        this.setRange$3(receiver, index, index + t1, iterable);
      } else
        for (t1 = J.get$iterator$ax(iterable); A.boolConversionCheck(t1.moveNext$0()); index = index0) {
          index0 = index + 1;
          this.$indexSet(receiver, index, t1.get$current());
        }
    },
    toString$0(receiver) {
      return A.ListBase_listToString(receiver);
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isIterable: 1,
    $is_ListIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys()), t1 = t1._eval$1("MapBase.V"); A.boolConversionCheck(t2.moveNext$0());) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<MapBase.K,MapBase.V>")._as(other).forEach$1(0, new A.MapBase_addAll_closure(this));
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("MapBase.K")._as(key);
      t1._eval$1("MapBase.V()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._eval$1("MapBase.V")._as(t2) : t2;
      }
      t1 = ifAbsent.call$0();
      _this.$indexSet(0, key, t1);
      return t1;
    },
    get$entries() {
      return J.map$1$1$ax(this.get$keys(), new A.MapBase_entries_closure(this), A._instanceType(this)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    containsKey$1(key) {
      return J.contains$1$asx(this.get$keys(), key);
    },
    get$length(_) {
      return J.get$length$asx(this.get$keys());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$keys());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$keys());
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A._MapBaseValueIterable$(this, t1._eval$1("MapBase.K"), t1._eval$1("MapBase.V"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._eval$1("MapBase.K")._as(key), t2._eval$1("MapBase.V")._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(MapBase.K,MapBase.V)");
    }
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1),
        t3 = t2._eval$1("MapBase.K");
      t3._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return A.MapEntry$_(key, t1, t3, t2._eval$1("MapBase.V"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t1 = this._box_0;
      if (!A.boolConversionCheck(t1.first))
        this.result.write$1(", ");
      t1.first = false;
      t1 = this.result;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    $signature: 53
  };
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$first(_) {
      var t1 = this._collection$_map;
      t1 = J.$index$asx(t1, J.get$first$ax(t1.get$keys()));
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    get$last(_) {
      var t1 = this._collection$_map;
      t1 = J.$index$asx(t1, J.get$last$ax(t1.get$keys()));
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    get$iterator(_) {
      var t1 = this.$ti;
      return A._MapBaseValueIterator$(this._collection$_map, t1._precomputed1, t1._rest[1]);
    },
    $isHideEfficientLengthIterable: 1
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return J.$eq$(this.get$length(0), 0);
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(J.$eq$(this.get$length(0), 0));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, A._asBool(growable), this.$ti._precomputed1);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    map$1$1(_, f, $T) {
      var t1 = this.$ti;
      return A.EfficientLengthMappedIterable$(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._precomputed1, $T);
    },
    toString$0(_) {
      return A.SetBase_setToString(this);
    },
    where$1(_, f) {
      var t1 = this.$ti;
      return A.WhereIterable$(this, t1._eval$1("bool(1)")._as(f), t1._precomputed1);
    },
    join$1(_, separator) {
      var iterator, first, buffer, t1;
      A._asString(separator);
      iterator = this.get$iterator(0);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current());
      if (!iterator.moveNext$0())
        return first;
      buffer = A.StringBuffer$(first);
      t1 = A.boolConversionCheck(B.JSString_methods.get$isEmpty(separator));
      if (t1) {
        do
          buffer.write$1(iterator.get$current());
        while (iterator.moveNext$0());
      } else
        do {
          buffer.write$1(separator);
          buffer.write$1(iterator.get$current());
        } while (iterator.moveNext$0());
      return buffer.toString$0(0);
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    take$1(_, n) {
      return A.TakeIterable_TakeIterable(this, A._asInt(n), this.$ti._precomputed1);
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, A._asInt(n), this.$ti._precomputed1);
    },
    get$first(_) {
      var it = this.get$iterator(0);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(0);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A._asInt(index);
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(0);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isIterable: 1,
    $is_SetIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 20
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 20
  };
  A.AsciiCodec.prototype = {
    encode$1(source) {
      A._asString(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = B.AsciiDecoder_false_127.convert$1(bytes);
      return t1;
    },
    get$encoder() {
      return B.AsciiEncoder_127;
    },
    get$decoder() {
      return B.AsciiDecoder_false_127;
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var stringLength, end, result, t1, t2, i, codeUnit, t3;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      if (typeof end !== "number")
        return end.$sub();
      result = A.NativeUint8List_NativeUint8List(end);
      for (t1 = this._subsetMask, t2 = J.getInterceptor$i(t1), i = 0; i < end; ++i) {
        if (!(i < stringLength))
          return A.ioore(string, i);
        codeUnit = string.charCodeAt(i);
        t3 = t2.$not(t1);
        if (typeof t3 !== "number")
          return A.iae(t3);
        if ((codeUnit & t3) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        result.$flags & 2 && A.throwUnsupportedOperation(result);
        if (!(i < result.length))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    startChunkedConversion$1(sink) {
      var t1;
      type$.Sink_List_int._as(sink);
      t1 = sink instanceof A.ByteConversionSink ? sink : A._ByteAdapterSink$(sink);
      return A._UnicodeSubsetEncoderSink$(this._subsetMask, t1);
    },
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_String._as(stream));
    }
  };
  A.AsciiEncoder.prototype = {};
  A._UnicodeSubsetEncoderSink.prototype = {
    close$0() {
      this._convert$_sink.close$0();
    },
    addSlice$4(source, start, end, isLast) {
      var t1, t2, t3, i, codeUnit, t4;
      A._asString(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      t1 = source.length;
      A.RangeError_checkValidRange(start, end, t1);
      for (t2 = this._subsetMask, t3 = J.getInterceptor$i(t2), i = start; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        codeUnit = source.charCodeAt(i);
        t4 = t3.$not(t2);
        if (typeof t4 !== "number")
          return A.iae(t4);
        if ((codeUnit & t4) !== 0)
          throw A.wrapException(A.ArgumentError$("Source contains invalid character with code point: " + codeUnit + ".", null));
      }
      J.add$1$ax(this._convert$_sink, J.sublist$2$ax(B.JSString_methods.get$codeUnits(source), start, end));
      if (isLast)
        this.close$0();
    }
  };
  A._UnicodeSubsetDecoder.prototype = {
    convert$1(bytes) {
      var t1, end, t2, t3, i, byte, t4;
      type$.List_int._as(bytes);
      t1 = J.getInterceptor$asx(bytes);
      end = A.RangeError_checkValidRange(0, null, t1.get$length(bytes));
      if (typeof end !== "number")
        return A.iae(end);
      t2 = this._subsetMask;
      t3 = J.getInterceptor$i(t2);
      i = 0;
      for (; i < end; ++i) {
        byte = t1.$index(bytes, i);
        t4 = t3.$not(t2);
        if (typeof t4 !== "number")
          return A.iae(t4);
        if ((byte & t4) >>> 0 !== 0) {
          if (!A.boolConversionCheck(this._allowInvalid))
            throw A.wrapException(A.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, end);
        }
      }
      return A.String_String$fromCharCodes(bytes, 0, end);
    },
    _convertInvalid$3(bytes, start, end) {
      var buffer, t1, t2, t3, i, value, t4;
      type$.List_int._as(bytes);
      A._asInt(start);
      A._asInt(end);
      buffer = A.StringBuffer$("");
      for (t1 = this._subsetMask, t2 = J.getInterceptor$i(t1), t3 = J.getInterceptor$asx(bytes), i = start; i < end; ++i) {
        value = t3.$index(bytes, i);
        t4 = t2.$not(t1);
        if (typeof t4 !== "number")
          return A.iae(t4);
        buffer.writeCharCode$1((value & t4) >>> 0 !== 0 ? 65533 : value);
      }
      return buffer.toString$0(0);
    },
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_List_int._as(stream));
    }
  };
  A.AsciiDecoder.prototype = {
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : A._StringAdapterSink$(sink);
      if (A.boolConversionCheck(this._allowInvalid))
        return A._ErrorHandlingAsciiDecoderSink$(stringSink.asUtf8Sink$1(false));
      else
        return A._SimpleAsciiDecoderSink$(stringSink);
    }
  };
  A._ErrorHandlingAsciiDecoderSink.prototype = {
    close$0() {
      this._utf8Sink.close$0();
    },
    add$1(_, source) {
      type$.List_int._as(source);
      this.addSlice$4(source, 0, J.get$length$asx(source), false);
    },
    addSlice$4(source, start, end, isLast) {
      var t1, t2, t3, i;
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      t1 = J.getInterceptor$asx(source);
      A.RangeError_checkValidRange(start, end, t1.get$length(source));
      for (t2 = this._utf8Sink, t3 = J.getInterceptor$ax(t2), i = start; i < end; ++i)
        if ((t1.$index(source, i) & 4294967168) >>> 0 !== 0) {
          if (i > start)
            t2.addSlice$4(source, start, i, false);
          t3.add$1(t2, B.List_239_191_189);
          start = i + 1;
        }
      if (start < end)
        t2.addSlice$4(source, start, end, isLast);
      else if (isLast)
        this.close$0();
    }
  };
  A._SimpleAsciiDecoderSink.prototype = {
    close$0() {
      this._convert$_sink.close$0();
    },
    add$1(_, source) {
      var t1, i, t2;
      type$.List_int._as(source);
      t1 = J.getInterceptor$asx(source);
      i = 0;
      while (true) {
        t2 = t1.get$length(source);
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(i < t2))
          break;
        if ((t1.$index(source, i) & 4294967168) >>> 0 !== 0)
          throw A.wrapException(A.FormatException$("Source contains non-ASCII bytes.", null, null));
        ++i;
      }
      J.add$1$ax(this._convert$_sink, A.String_String$fromCharCodes(source, 0, null));
    },
    addSlice$4(source, start, end, isLast) {
      var t1, $length;
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      t1 = J.getInterceptor$asx(source);
      $length = t1.get$length(source);
      A.RangeError_checkValidRange(start, end, $length);
      if (start < end)
        this.add$1(0, start !== 0 || end !== $length ? t1.sublist$2(source, start, end) : source);
      if (isLast)
        this.close$0();
    }
  };
  A.Base64Codec.prototype = {
    get$encoder() {
      return B.C_Base64Encoder;
    },
    get$decoder() {
      return B.C_Base64Decoder;
    },
    normalize$3(source, start, end) {
      var t1, inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, char0, value, t3, endLength, $length,
        _s64_ = string$.ABCDEFx2b,
        _s31_ = "Invalid base64 encoding length ";
      A._asString(source);
      A._asInt(start);
      t1 = source.length;
      end = A.RangeError_checkValidRange(start, A._asIntQ(end), t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      if (typeof end !== "number")
        return A.iae(end);
      t2 = J.getInterceptor$asx(inverseAlphabet);
      i = start;
      sliceStart = i;
      buffer = null;
      firstPadding = -1;
      firstPaddingSourceIndex = -1;
      paddingCount = 0;
      for (; i < end; i = i0) {
        i0 = i + 1;
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            char0 = A.parseHexByte(source, i0);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          value = t2.$index(inverseAlphabet, char0);
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer.get$length(0);
                if (t3 == null)
                  t3 = 0;
                if (typeof t3 !== "number")
                  return t3.$add();
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = A.StringBuffer$("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3.write$1(B.JSString_methods.substring$2(source, sliceStart, i));
            t3.writeCharCode$1(char);
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        buffer.write$1(B.JSString_methods.substring$2(source, sliceStart, end));
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, buffer.get$length(0));
        else {
          t1 = buffer.get$length(0);
          if (typeof t1 !== "number")
            return t1.$sub();
          endLength = B.JSNumber_methods.$mod(t1 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            buffer.write$1("=");
            ++endLength;
          }
        }
        return B.JSString_methods.replaceRange$3(source, start, end, buffer.toString$0(0));
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1;
      type$.List_int._as(input);
      t1 = J.getInterceptor$asx(input);
      if (A.boolConversionCheck(t1.get$isEmpty(input)))
        return "";
      t1 = A._Base64Encoder$(false).encode$4(input, 0, t1.get$length(input), true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    },
    startChunkedConversion$1(sink) {
      type$.Sink_String._as(sink);
      if (type$.StringConversionSink._is(sink))
        return A._Utf8Base64EncoderSink$(sink.asUtf8Sink$1(false), false);
      return A._AsciiBase64EncoderSink$(sink, false);
    }
  };
  A._Base64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      return A.NativeUint8List_NativeUint8List(A._asInt(bufferLength));
    },
    encode$4(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      type$.List_int._as(bytes);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      byteCount = A._Base64Encoder__stateCount(_this._convert$_state) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this.set$_convert$_state(A._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state));
      if (bufferLength > 0)
        return output;
      return null;
    },
    set$_convert$_state(_state) {
      this._convert$_state = A._asInt(_state);
    }
  };
  A._BufferCachingBase64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      var buffer;
      A._asInt(bufferLength);
      buffer = this.bufferCache;
      if (buffer == null || buffer.length < bufferLength)
        buffer = this.bufferCache = A.NativeUint8List_NativeUint8List(bufferLength);
      return A.Uint8List_Uint8List$view((buffer && B.NativeUint8List_methods).get$buffer(buffer), B.NativeUint8List_methods.get$offsetInBytes(buffer), bufferLength);
    }
  };
  A._Base64EncoderSink.prototype = {
    add$1(_, source) {
      type$.List_int._as(source);
      this._convert$_add$4(source, 0, J.get$length$asx(source), false);
    },
    close$0() {
      this._convert$_add$4(B.List_empty1, 0, 0, true);
    },
    addSlice$4(source, start, end, isLast) {
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      A.RangeError_checkValidRange(start, end, J.get$length$asx(source));
      this._convert$_add$4(source, start, end, isLast);
    }
  };
  A._AsciiBase64EncoderSink.prototype = {
    _convert$_add$4(source, start, end, isLast) {
      var buffer;
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      buffer = this._encoder.encode$4(source, start, end, isLast);
      if (buffer != null)
        J.add$1$ax(this._convert$_sink, A.String_String$fromCharCodes(buffer, 0, null));
      if (isLast)
        this._convert$_sink.close$0();
    }
  };
  A._Utf8Base64EncoderSink.prototype = {
    _convert$_add$4(source, start, end, isLast) {
      var buffer;
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      buffer = this._encoder.encode$4(source, start, end, isLast);
      if (buffer != null)
        this._convert$_sink.addSlice$4(buffer, 0, buffer.length, isLast);
    }
  };
  A.Base64Decoder.prototype = {
    convert$1(input) {
      var end, decoder, t1;
      A._asString(input);
      end = A.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return A.NativeUint8List_NativeUint8List(0);
      decoder = A._Base64Decoder$();
      t1 = decoder.decode$3(input, 0, end);
      t1.toString;
      decoder.close$2(input, end);
      return t1;
    },
    startChunkedConversion$1(sink) {
      return A._Base64DecoderSink$(type$.Sink_List_int._as(sink));
    }
  };
  A._Base64Decoder.prototype = {
    decode$3(input, start, end) {
      var t1, buffer;
      A._asString(input);
      A._asInt(start);
      A._asInt(end);
      t1 = this._convert$_state;
      if (A.boolConversionCheck(A._Base64Decoder__hasSeenPadding(t1))) {
        this.set$_convert$_state(A._Base64Decoder__checkPadding(input, start, end, t1));
        return null;
      }
      if (start === end)
        return A.NativeUint8List_NativeUint8List(0);
      buffer = A._Base64Decoder__allocateBuffer(input, start, end, t1);
      this.set$_convert$_state(A._Base64Decoder_decodeChunk(input, start, end, buffer, 0, t1));
      return buffer;
    },
    close$2(input, end) {
      var t1, t2;
      A._asStringQ(input);
      A._asIntQ(end);
      t1 = this._convert$_state;
      t2 = A._Base64Decoder__encodePaddingState(0);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 < t2)
        throw A.wrapException(A.FormatException$("Missing padding character", input, end));
      if (t1 > 0)
        throw A.wrapException(A.FormatException$("Invalid length, must be multiple of four", input, end));
      this.set$_convert$_state(A._Base64Decoder__encodePaddingState(0));
    },
    set$_convert$_state(_state) {
      this._convert$_state = A._asInt(_state);
    }
  };
  A._Base64DecoderSink.prototype = {
    add$1(_, string) {
      var buffer;
      A._asString(string);
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(string)))
        return;
      buffer = this._decoder.decode$3(string, 0, string.length);
      if (buffer != null)
        J.add$1$ax(this._convert$_sink, buffer);
    },
    close$0() {
      this._decoder.close$2(null, null);
      this._convert$_sink.close$0();
    },
    addSlice$4(string, start, end, isLast) {
      var t1, buffer;
      A._asString(string);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      A.RangeError_checkValidRange(start, end, string.length);
      if (start === end)
        return;
      t1 = this._decoder;
      buffer = t1.decode$3(string, start, end);
      if (buffer != null)
        J.add$1$ax(this._convert$_sink, buffer);
      if (isLast) {
        t1.close$2(string, end);
        this._convert$_sink.close$0();
      }
    }
  };
  A.ByteConversionSink.prototype = {
    addSlice$4(chunk, start, end, isLast) {
      type$.List_int._as(chunk);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      this.add$1(0, J.sublist$2$ax(chunk, start, end));
      if (isLast)
        this.close$0();
    },
    $isChunkedConversionSink: 1,
    $isSink: 1
  };
  A._ByteAdapterSink.prototype = {
    add$1(_, chunk) {
      J.add$1$ax(this._convert$_sink, type$.List_int._as(chunk));
    },
    close$0() {
      this._convert$_sink.close$0();
    }
  };
  A._ConverterStreamEventSink.prototype = {
    add$1(_, o) {
      J.add$1$ax(this._chunkedSink, this.$ti._precomputed1._as(o));
    },
    addError$2(error, stackTrace) {
      var t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      this._eventSink.addError$2(error, stackTrace);
    },
    close$0() {
      this._chunkedSink.close$0();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A.Codec.prototype = {
    encode$1(input) {
      A._instanceType(this)._eval$1("Codec.S")._as(input);
      return this.get$encoder().convert$1(input);
    },
    decode$1(encoded) {
      A._instanceType(this)._eval$1("Codec.T")._as(encoded);
      return this.get$decoder().convert$1(encoded);
    }
  };
  A.Converter.prototype = {
    startChunkedConversion$1(sink) {
      A._instanceType(this)._eval$1("Sink<Converter.T>")._as(sink);
      throw A.wrapException(A.UnsupportedError$("This converter does not support chunked conversions: " + A.S(this)));
    },
    bind$1(stream) {
      var t1 = A._instanceType(this);
      return A.Stream_Stream$eventTransformed(t1._eval$1("Stream<Converter.S>")._as(stream), new A.Converter_bind_closure(this), t1._eval$1("Converter.T"));
    },
    $isStreamTransformer: 1,
    $isStreamTransformerBase: 1
  };
  A.Converter_bind_closure.prototype = {
    call$1(sink) {
      var t1 = type$.dynamic;
      return A._ConverterStreamEventSink$(this.$this, type$.EventSink_dynamic._as(sink), t1, t1);
    },
    $signature: 52
  };
  A.Encoding.prototype = {};
  A.Latin1Codec.prototype = {
    encode$1(source) {
      A._asString(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = B.Latin1Decoder_false_255.convert$1(bytes);
      return t1;
    },
    get$encoder() {
      return B.Latin1Encoder_255;
    },
    get$decoder() {
      return B.Latin1Decoder_false_255;
    }
  };
  A.Latin1Encoder.prototype = {};
  A.Latin1Decoder.prototype = {
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : A._StringAdapterSink$(sink);
      if (!A.boolConversionCheck(this._allowInvalid))
        return A._Latin1DecoderSink$(stringSink);
      return A._Latin1AllowInvalidDecoderSink$(stringSink);
    }
  };
  A._Latin1DecoderSink.prototype = {
    close$0() {
      this._convert$_sink.close$0();
      this._convert$_sink = null;
    },
    add$1(_, source) {
      type$.List_int._as(source);
      this.addSlice$4(source, 0, J.get$length$asx(source), false);
    },
    _addSliceToSink$4(source, start, end, isLast) {
      var t1;
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      t1 = this._convert$_sink;
      t1.toString;
      J.add$1$ax(t1, A.String_String$fromCharCodes(source, start, end));
      if (isLast)
        this.close$0();
    },
    addSlice$4(source, start, end, isLast) {
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      A.RangeError_checkValidRange(start, end, J.get$length$asx(source));
      if (start === end)
        return;
      if (!type$.Uint8List._is(source))
        A._Latin1DecoderSink__checkValidLatin1(source, start, end);
      this._addSliceToSink$4(source, start, end, isLast);
    }
  };
  A._Latin1AllowInvalidDecoderSink.prototype = {
    addSlice$4(source, start, end, isLast) {
      var t1, i, char, _this = this;
      type$.List_int._as(source);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      t1 = J.getInterceptor$asx(source);
      A.RangeError_checkValidRange(start, end, t1.get$length(source));
      for (i = start; i < end; ++i) {
        char = t1.$index(source, i);
        if (char > 255 || char < 0) {
          if (i > start)
            _this._addSliceToSink$4(source, start, i, false);
          _this._addSliceToSink$4(B.List_65533, 0, 1, false);
          start = i + 1;
        }
      }
      if (start < end)
        _this._addSliceToSink$4(source, start, end, isLast);
      if (isLast)
        _this.close$0();
    }
  };
  A.StringConversionSink.prototype = {
    add$1(_, str) {
      A._asString(str);
      this.addSlice$4(str, 0, str.length, false);
    },
    asUtf8Sink$1(allowMalformed) {
      return A._Utf8ConversionSink$(this, A._asBool(allowMalformed));
    },
    $isChunkedConversionSink: 1,
    $isSink: 1
  };
  A._StringAdapterSink.prototype = {
    add$1(_, str) {
      J.add$1$ax(this._convert$_sink, A._asString(str));
    },
    addSlice$4(str, start, end, isLast) {
      A._asString(str);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      if (start === 0 && end === str.length)
        this.add$1(0, str);
      else
        this.add$1(0, B.JSString_methods.substring$2(str, start, end));
      if (isLast)
        this.close$0();
    },
    close$0() {
      this._convert$_sink.close$0();
    }
  };
  A._Utf8ConversionSink.prototype = {
    close$0() {
      var t2, t3, accumulated,
        t1 = this._buffer;
      this._decoder.flush$1(t1);
      t2 = J.getInterceptor$asx(t1);
      t3 = this._chunkedSink;
      if (A.boolConversionCheck(t2.get$isNotEmpty(t1))) {
        accumulated = t2.toString$0(t1);
        t2.clear$0(t1);
        t3.addSlice$4(accumulated, 0, accumulated.length, true);
      } else
        t3.close$0();
    },
    add$1(_, chunk) {
      type$.List_int._as(chunk);
      this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
    },
    addSlice$4(chunk, startIndex, endIndex, isLast) {
      var t1, t2, accumulated, _this = this;
      type$.List_int._as(chunk);
      A._asInt(startIndex);
      A._asInt(endIndex);
      A._asBool(isLast);
      t1 = _this._buffer;
      t1.write$1(_this._decoder.convertChunked$3(chunk, startIndex, endIndex));
      t2 = J.getInterceptor$asx(t1);
      if (A.boolConversionCheck(t2.get$isNotEmpty(t1))) {
        accumulated = t2.toString$0(t1);
        _this._chunkedSink.addSlice$4(accumulated, 0, accumulated.length, isLast);
        t2.clear$0(t1);
        return;
      }
      if (isLast)
        _this.close$0();
    }
  };
  A.Utf8Codec.prototype = {
    decode$1(codeUnits) {
      type$.List_int._as(codeUnits);
      return B.Utf8Decoder_false.convert$1(codeUnits);
    },
    encode$1(string) {
      return B.C_Utf8Encoder.convert$1(A._asString(string));
    },
    get$encoder() {
      return B.C_Utf8Encoder;
    },
    get$decoder() {
      return B.Utf8Decoder_false;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var stringLength, end, encoder, t1;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      if (typeof end !== "number")
        return end.$sub();
      if (end === 0)
        return A.NativeUint8List_NativeUint8List(0);
      encoder = A._Utf8Encoder$withBufferSize(end * 3);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < stringLength))
          return A.ioore(string, t1);
        encoder._writeReplacementCharacter$0();
      }
      return J.sublist$2$ax(encoder._buffer, 0, encoder._bufferIndex);
    },
    startChunkedConversion$1(sink) {
      type$.Sink_List_int._as(sink);
      return A._Utf8EncoderSink$(sink instanceof A.ByteConversionSink ? sink : A._ByteAdapterSink$(sink));
    },
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_String._as(stream));
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var t3, _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$_bufferIndex(t2 + 1);
      t3 = J.getInterceptor$ax(t1);
      t3.$indexSet(t1, t2, 239);
      t2 = _this._bufferIndex;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$_bufferIndex(t2 + 1);
      t3.$indexSet(t1, t2, 191);
      t2 = _this._bufferIndex;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$_bufferIndex(t2 + 1);
      t3.$indexSet(t1, t2, 189);
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, _this = this;
      A._asInt(leadingSurrogate);
      A._asInt(nextCodeUnit);
      if (A.boolConversionCheck(A._isTailSurrogate(nextCodeUnit))) {
        rune = A._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_bufferIndex(t2 + 1);
        t3 = J.getInterceptor$ax(t1);
        t3.$indexSet(t1, t2, (B.JSInt_methods._shrOtherPositive$1(rune, 18) | 240) >>> 0);
        t2 = _this._bufferIndex;
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_bufferIndex(t2 + 1);
        t3.$indexSet(t1, t2, B.JSInt_methods._shrOtherPositive$1(rune, 12) & 63 | 128);
        t2 = _this._bufferIndex;
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_bufferIndex(t2 + 1);
        t3.$indexSet(t1, t2, B.JSInt_methods._shrOtherPositive$1(rune, 6) & 63 | 128);
        t2 = _this._bufferIndex;
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_bufferIndex(t2 + 1);
        t3.$indexSet(t1, t2, rune & 63 | 128);
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, t5, _this = this;
      A._asString(str);
      A._asInt(start);
      A._asInt(end);
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = A.boolConversionCheck(A._isLeadSurrogate(str.charCodeAt(t1)));
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._buffer, t2 = J.getInterceptor$asx(t1), t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex >= 0 && stringIndex < t3))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t4 = _this._bufferIndex;
          t5 = t2.get$length(t1);
          if (typeof t4 !== "number")
            return t4.$ge();
          if (typeof t5 !== "number")
            return A.iae(t5);
          if (t4 >= t5)
            break;
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this.set$_bufferIndex(t4 + 1);
          t2.$indexSet(t1, t4, codeUnit);
        } else if (A.boolConversionCheck(A._isLeadSurrogate(codeUnit))) {
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return A.iae(t5);
          if (t4 + 4 > t5)
            break;
          t4 = stringIndex + 1;
          if (!(t4 < t3))
            return A.ioore(str, t4);
          if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t4)))
            stringIndex = t4;
        } else if (A.boolConversionCheck(A._isTailSurrogate(codeUnit))) {
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return A.iae(t5);
          if (t4 + 3 > t5)
            break;
          _this._writeReplacementCharacter$0();
        } else if (codeUnit <= 2047) {
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return A.iae(t5);
          if (t4 + 1 >= t5)
            break;
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this.set$_bufferIndex(t4 + 1);
          t2.$indexSet(t1, t4, codeUnit >>> 6 | 192);
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this.set$_bufferIndex(t4 + 1);
          t2.$indexSet(t1, t4, codeUnit & 63 | 128);
        } else {
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return A.iae(t5);
          if (t4 + 2 >= t5)
            break;
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this.set$_bufferIndex(t4 + 1);
          t2.$indexSet(t1, t4, codeUnit >>> 12 | 224);
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this.set$_bufferIndex(t4 + 1);
          t2.$indexSet(t1, t4, codeUnit >>> 6 & 63 | 128);
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this.set$_bufferIndex(t4 + 1);
          t2.$indexSet(t1, t4, codeUnit & 63 | 128);
        }
      }
      return stringIndex;
    },
    set$_bufferIndex(_bufferIndex) {
      this._bufferIndex = A._asInt(_bufferIndex);
    }
  };
  A._Utf8EncoderSink.prototype = {
    close$0() {
      if (!A.boolConversionCheck(J.$eq$(this._carry, 0))) {
        this.addSlice$4("", 0, 0, true);
        return;
      }
      this._convert$_sink.close$0();
    },
    addSlice$4(str, start, end, isLast) {
      var t1, nextCodeUnit, t2, t3, t4, t5, isLastSlice, t6, t7, _this = this;
      A._asString(str);
      A._asInt(start);
      A._asInt(end);
      A._asBool(isLast);
      _this._bufferIndex = 0;
      t1 = start === end;
      if (t1 && !isLast)
        return;
      if (!A.boolConversionCheck(J.$eq$(_this._carry, 0))) {
        if (!t1) {
          if (!(start >= 0 && start < str.length))
            return A.ioore(str, start);
          nextCodeUnit = str.charCodeAt(start);
        } else
          nextCodeUnit = 0;
        if (_this._writeSurrogate$2(_this._carry, nextCodeUnit))
          ++start;
        _this._carry = 0;
      }
      t1 = _this._convert$_sink;
      t2 = _this._buffer;
      t3 = end - 1;
      t4 = str.length;
      t5 = J.getInterceptor$asx(t2);
      do {
        start = _this._fillBuffer$3(str, start, end);
        isLastSlice = isLast && start === end;
        if (start === t3) {
          if (!(start >= 0 && start < t4))
            return A.ioore(str, start);
          t6 = A.boolConversionCheck(A._isLeadSurrogate(str.charCodeAt(start)));
        } else
          t6 = false;
        if (t6) {
          if (isLast) {
            t6 = _this._bufferIndex;
            t7 = t5.get$length(t2);
            if (typeof t7 !== "number")
              return t7.$sub();
            if (typeof t6 !== "number")
              return t6.$lt();
            t7 = t6 < t7 - 3;
            t6 = t7;
          } else
            t6 = false;
          if (t6)
            _this._writeReplacementCharacter$0();
          else {
            if (!(start >= 0 && start < t4))
              return A.ioore(str, start);
            _this._carry = str.charCodeAt(start);
          }
          ++start;
        }
        t1.addSlice$4(t2, 0, _this._bufferIndex, isLastSlice);
        _this._bufferIndex = 0;
      } while (start < end);
      if (isLast)
        _this.close$0();
    },
    $isChunkedConversionSink: 1,
    $isStringConversionSink: 1,
    $isSink: 1
  };
  A.Utf8Decoder.prototype = {
    convert$3(codeUnits, start, end) {
      type$.List_int._as(codeUnits);
      A._asInt(start);
      A._asIntQ(end);
      return A._Utf8Decoder$(this._allowMalformed).convertSingle$3(codeUnits, start, end);
    },
    convert$1(codeUnits) {
      return this.convert$3(codeUnits, 0, null);
    },
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : A._StringAdapterSink$(sink);
      return stringSink.asUtf8Sink$1(this._allowMalformed);
    },
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_List_int._as(stream));
    }
  };
  A._Utf8Decoder.prototype = {
    convertSingle$3(codeUnits, start, maybeEnd) {
      return this._convertGeneral$4(type$.List_int._as(codeUnits), A._asInt(start), A._asIntQ(maybeEnd), true);
    },
    convertChunked$3(codeUnits, start, maybeEnd) {
      return this._convertGeneral$4(type$.List_int._as(codeUnits), A._asInt(start), A._asIntQ(maybeEnd), false);
    },
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      A._asInt(start);
      A._asIntQ(maybeEnd);
      A._asBool(single);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (single && end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!A.boolConversionCheck(t1))
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, single);
      t1 = _this._convert$_state;
      if (A.boolConversionCheck(A._Utf8Decoder_isErrorState(t1))) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        t1 = _this._charOrIndex;
        if (typeof t1 !== "number")
          return A.iae(t1);
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + t1));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      type$.Uint8List._as(bytes);
      A._asInt(start);
      A._asInt(end);
      A._asBool(single);
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if (A.boolConversionCheck(A._Utf8Decoder_isErrorState(_this._convert$_state)))
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    flush$1(sink) {
      var state;
      type$.StringSink._as(sink);
      state = this._convert$_state;
      this._convert$_state = 0;
      if (state <= 32)
        return;
      if (A.boolConversionCheck(this.allowMalformed))
        sink.writeCharCode$1(65533);
      else
        throw A.wrapException(A.FormatException$(A._Utf8Decoder_errorDescription(77), null, null));
    },
    decodeGeneral$4(bytes, start, end, single) {
      var state, char, buffer, i, t1, byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533;
      type$.Uint8List._as(bytes);
      A._asInt(start);
      A._asInt(end);
      A._asBool(single);
      state = _this._convert$_state;
      char = _this._charOrIndex;
      buffer = A.StringBuffer$("");
      i = start + 1;
      t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              buffer.writeCharCode$1(char);
              if (i === end)
                break $label0$0;
              break;
            } else if (A.boolConversionCheck(A._Utf8Decoder_isErrorState(state))) {
              if (A.boolConversionCheck(t2))
                switch (state) {
                  case 69:
                  case 67:
                    buffer.writeCharCode$1(_65533);
                    break;
                  case 65:
                    buffer.writeCharCode$1(_65533);
                    --i;
                    break;
                  default:
                    buffer.writeCharCode$1(_65533);
                    buffer.writeCharCode$1(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                buffer.writeCharCode$1(bytes[m]);
              }
            else
              buffer.write$1(A.String_String$fromCharCodes(bytes, i, markEnd));
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (A.boolConversionCheck(t2))
          buffer.writeCharCode$1(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      return buffer.toString$0(0);
    }
  };
  A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink.prototype = {$isChunkedConversionSink: 1, $isStringConversionSink: 1, $isSink: 1};
  A._BigIntImpl.prototype = {
    get$_isZero() {
      return J.$eq$(this._used, 0);
    },
    $negate(_) {
      var _this = this,
        t1 = _this._used;
      if (A.boolConversionCheck(J.$eq$(t1, 0)))
        return _this;
      return A._BigIntImpl$_(!A.boolConversionCheck(_this._isNegative), t1, _this._digits);
    },
    _drShift$1(n) {
      var used, resultUsed, digits, resultDigits, t1, t2, i, t3, t4, result, _this = this;
      A._asInt(n);
      used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return A.boolConversionCheck(_this._isNegative) ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = A.NativeUint16List_NativeUint16List(resultUsed);
      for (t1 = digits.length, t2 = resultDigits.$flags | 0, i = n; i < used; ++i) {
        t3 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      t2 = _this._isNegative;
      result = A._BigIntImpl$_(t2, resultUsed, resultDigits);
      if (A.boolConversionCheck(t2))
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shr(_, shiftAmount) {
      var digitShift, bitShift, used, resultUsed, digits, resultDigits, t1, result, i, _this = this;
      A._asInt(shiftAmount);
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      if (A.boolConversionCheck(_this.get$_isZero()))
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      used = _this._used;
      resultUsed = used - digitShift;
      if (resultUsed <= 0)
        return A.boolConversionCheck(_this._isNegative) ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = A.NativeUint16List_NativeUint16List(resultUsed);
      A._BigIntImpl__rsh(digits, used, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      result = A._BigIntImpl$_(t1, resultUsed, resultDigits);
      if (A.boolConversionCheck(t1)) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) >>> 0 !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    _absCompare$1(other) {
      type$._BigIntImpl._as(other);
      return A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (A.boolConversionCheck(J.$eq$(t1, other._isNegative))) {
        result = this._absCompare$1(other);
        return A.boolConversionCheck(t1) ? 0 - result : result;
      }
      return A.boolConversionCheck(t1) ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var used, otherUsed, resultUsed, resultDigits, _this = this;
      type$._BigIntImpl._as(other);
      A._asBool(isNegative);
      used = _this._used;
      otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return A.boolConversionCheck(J.$eq$(_this._isNegative, isNegative)) ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = A.NativeUint16List_NativeUint16List(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      return A._BigIntImpl$_(isNegative, resultUsed, resultDigits);
    },
    _absSubSetSign$2(other, isNegative) {
      var used, otherUsed, resultDigits, _this = this;
      type$._BigIntImpl._as(other);
      A._asBool(isNegative);
      used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return A.boolConversionCheck(J.$eq$(_this._isNegative, isNegative)) ? _this : _this.$negate(0);
      resultDigits = A.NativeUint16List_NativeUint16List(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      return A._BigIntImpl$_(isNegative, used, resultDigits);
    },
    $add(_, other) {
      var isNegative, _this = this;
      type$._BigIntImpl._as(other);
      if (A.boolConversionCheck(_this.get$_isZero()))
        return other;
      if (A.boolConversionCheck(other.get$_isZero()))
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (_this._absCompare$1(other) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var isNegative, _this = this;
      type$._BigIntImpl._as(other);
      if (A.boolConversionCheck(_this.get$_isZero()))
        return other.$negate(0);
      if (A.boolConversionCheck(other.get$_isZero()))
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (_this._absCompare$1(other) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var used, otherUsed, resultUsed, digits, otherDigits, resultDigits, t1, i;
      type$._BigIntImpl._as(other);
      used = this._used;
      otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = A.NativeUint16List_NativeUint16List(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      return A._BigIntImpl$_(!A.boolConversionCheck(J.$eq$(this._isNegative, other._isNegative)), resultUsed, resultDigits);
    },
    _div$1(other) {
      var t1, t2, lastQuo_used, quo;
      type$._BigIntImpl._as(other);
      t1 = this._used;
      t2 = other._used;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 < t2)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      t1 = A._BigIntImpl__lastQuoRemUsed();
      t2 = A._BigIntImpl__lastRemUsed();
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return A.iae(t2);
      lastQuo_used = t1 - t2;
      quo = A._BigIntImpl$_(false, lastQuo_used, A._BigIntImpl__cloneDigits(A._BigIntImpl__lastQuoRemDigits(), A._BigIntImpl__lastRemUsed(), A._BigIntImpl__lastQuoRemUsed(), lastQuo_used));
      if (!A.boolConversionCheck(J.$eq$(this._isNegative, other._isNegative))) {
        t1 = quo._used;
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 0;
      } else
        t1 = false;
      return t1 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var t1, t2, remDigits, rem, _this = this;
      type$._BigIntImpl._as(other);
      t1 = _this._used;
      t2 = other._used;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 < t2)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits(A._BigIntImpl__lastQuoRemDigits(), 0, A._BigIntImpl__lastRemUsed(), A._BigIntImpl__lastRemUsed());
      rem = A._BigIntImpl$_(false, A._BigIntImpl__lastRemUsed(), remDigits);
      t1 = A._BigIntImpl__lastRem_nsh0();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        rem = rem.$shr(0, A._BigIntImpl__lastRem_nsh0());
      if (A.boolConversionCheck(_this._isNegative)) {
        t1 = rem._used;
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 0;
      } else
        t1 = false;
      return t1 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var t1, t2, t3, t4, yDigits, nsh, yDigits0, yUsed, resultDigits, resultUsed, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed0, t5, nyDigits, i, estimatedQuotientDigit;
      type$._BigIntImpl._as(other);
      t1 = this._used;
      t2 = false;
      if (A.boolConversionCheck(J.$eq$(t1, $._BigIntImpl__lastDividendUsed)))
        if (A.boolConversionCheck(J.$eq$(other._used, $._BigIntImpl__lastDivisorUsed))) {
          t3 = this._digits;
          t4 = $._BigIntImpl__lastDividendDigits;
          if (t3 == null ? t4 == null : t3 === t4) {
            t2 = other._digits;
            t3 = $._BigIntImpl__lastDivisorDigits;
            t3 = t2 == null ? t3 == null : t2 === t3;
            t2 = t3;
          }
        }
      if (t2)
        return;
      yDigits = other._digits;
      t2 = other._used;
      if (typeof t2 !== "number")
        return t2.$sub();
      t3 = B.JSInt_methods.get$bitLength(J.$index$asx(yDigits, t2 - 1));
      if (typeof t3 !== "number")
        return A.iae(t3);
      nsh = 16 - t3;
      t3 = this._digits;
      if (nsh > 0) {
        yDigits0 = A.NativeUint16List_NativeUint16List(t2 + 5);
        yUsed = A._BigIntImpl__lShiftDigits(yDigits, t2, nsh, yDigits0);
        if (typeof t1 !== "number")
          return t1.$add();
        resultDigits = A.NativeUint16List_NativeUint16List(t1 + 5);
        resultUsed = A._BigIntImpl__lShiftDigits(t3, t1, nsh, resultDigits);
      } else {
        if (typeof t1 !== "number")
          return t1.$add();
        resultDigits = A._BigIntImpl__cloneDigits(t3, 0, t1, t1 + 2);
        yUsed = t2;
        yDigits0 = yDigits;
        resultUsed = t1;
      }
      t4 = yUsed - 1;
      if (!(t4 >= 0 && t4 < yDigits0.length))
        return A.ioore(yDigits0, t4);
      topDigitDivisor = yDigits0[t4];
      j = resultUsed - yUsed;
      tmpDigits = A.NativeUint16List_NativeUint16List(resultUsed);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed, j, tmpDigits);
      t4 = A._BigIntImpl__compareDigits(resultDigits, resultUsed, tmpDigits, tmpUsed);
      if (typeof t4 !== "number")
        return t4.$ge();
      resultUsed0 = resultUsed + 1;
      t5 = resultDigits.$flags | 0;
      if (t4 >= 0) {
        t5 & 2 && A.throwUnsupportedOperation(resultDigits);
        t4 = resultDigits.length;
        if (!(resultUsed >= 0 && resultUsed < t4))
          return A.ioore(resultDigits, resultUsed);
        resultDigits[resultUsed] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed0, tmpDigits, tmpUsed, resultDigits);
      } else {
        t5 & 2 && A.throwUnsupportedOperation(resultDigits);
        t4 = resultDigits.length;
        if (!(resultUsed >= 0 && resultUsed < t4))
          return A.ioore(resultDigits, resultUsed);
        resultDigits[resultUsed] = 0;
      }
      nyDigits = A.NativeUint16List_NativeUint16List(yUsed + 2);
      nyDigits.$flags & 2 && A.throwUnsupportedOperation(nyDigits);
      if (!(yUsed >= 0 && yUsed < nyDigits.length))
        return A.ioore(nyDigits, yUsed);
      nyDigits[yUsed] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed + 1, yDigits0, yUsed, nyDigits);
      i = resultUsed - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed);
        if (!(i >= 0 && i < t4))
          return A.ioore(resultDigits, i);
        t5 = resultDigits[i];
        if (t5 < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed0, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, t5 < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed0, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = t3;
      $._BigIntImpl__lastDividendUsed = t1;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = t2;
      A._BigIntImpl__lastQuoRemDigits0(resultDigits);
      A._BigIntImpl__lastQuoRemUsed0(resultUsed0);
      A._BigIntImpl__lastRemUsed0(yUsed);
      A._BigIntImpl__lastRem_nsh(nsh);
    },
    get$hashCode(_) {
      var hash, t1, t2, t3, i, _this = this,
        combine = new A._BigIntImpl_hashCode_combine();
      if (A.boolConversionCheck(_this.get$_isZero()))
        return 6707;
      hash = A.boolConversionCheck(_this._isNegative) ? 83585 : 429689;
      t1 = _this._used;
      if (typeof t1 !== "number")
        return A.iae(t1);
      t2 = _this._digits;
      t3 = J.getInterceptor$asx(t2);
      i = 0;
      for (; i < t1; ++i)
        hash = combine.call$2(hash, t3.$index(t2, i));
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    $tdiv(_, other) {
      type$._BigIntImpl._as(other);
      if (A.boolConversionCheck(J.$eq$(other._used, 0)))
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._div$1(other);
    },
    remainder$1(_, other) {
      type$._BigIntImpl._as(other);
      if (A.boolConversionCheck(J.$eq$(other._used, 0)))
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._rem$1(other);
    },
    $lt(_, other) {
      return this.compareTo$1(0, type$._BigIntImpl._as(other)) < 0;
    },
    $gt(_, other) {
      return this.compareTo$1(0, type$._BigIntImpl._as(other)) > 0;
    },
    get$isNegative(_) {
      return this._isNegative;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, digits4, _this = this,
        t1 = _this._used,
        t2 = J.getInterceptor$(t1);
      if (A.boolConversionCheck(t2.$eq(t1, 0)))
        return "0";
      if (A.boolConversionCheck(t2.$eq(t1, 1))) {
        if (A.boolConversionCheck(_this._isNegative))
          return B.JSInt_methods.toString$0(-J.$index$asx(_this._digits, 0));
        return B.JSInt_methods.toString$0(J.$index$asx(_this._digits, 0));
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      rest = A.boolConversionCheck(_this.get$isNegative(0)) ? _this.$negate(0) : _this;
      while (true) {
        t1 = rest._used;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (!(t1 > 1))
          break;
        t1 = $.$get$_BigIntImpl__bigInt10000();
        digits4 = rest.remainder$1(0, t1).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t2 = digits4.length;
        if (t2 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t2 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t2 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest.$tdiv(0, t1);
      }
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(J.$index$asx(rest._digits, 0)));
      if (A.boolConversionCheck(_this._isNegative))
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return J.join$0$ax(B.JSArray_methods.get$reversed(decimalDigitChunks));
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = A._asInt(hash) + A._asInt(value) & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 4
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      A._asInt(hash);
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 13
  };
  A._FinalizationRegistryWrapper.prototype = {
    attach$3$detach(value, token, detach) {
      var t1;
      type$.Object._as(value);
      this.$ti._precomputed1._as(token);
      t1 = this._registry;
      if (t1 != null)
        if (detach != null)
          t1.register(value, token, detach);
        else
          t1.register(value, token);
    },
    detach$1(detachToken) {
      var t1;
      type$.Object._as(detachToken);
      t1 = this._registry;
      if (t1 != null)
        t1.unregister(detachToken);
    },
    $isFinalizer: 1
  };
  A._Uri__makeQueryFromParameters_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (typeof value == "string")
        this.params.set(key, value);
      else if (value == null)
        this.params.set(key, "");
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.params; A.boolConversionCheck(t1.moveNext$0());) {
          value = t1.get$current();
          if (typeof value == "string")
            t2.append(key, value);
          else if (value == null)
            t2.append(key, "");
          else
            A._asStringQ(value);
        }
    },
    $signature: 24
  };
  A.DateTime.prototype = {
    get$millisecondsSinceEpoch() {
      return this._value;
    },
    get$year() {
      return A.Primitives_getYear(this);
    },
    get$month() {
      return A.Primitives_getMonth(this);
    },
    get$day() {
      return A.Primitives_getDay(this);
    },
    get$hour() {
      return A.Primitives_getHours(this);
    },
    get$minute() {
      return A.Primitives_getMinutes(this);
    },
    get$second() {
      return A.Primitives_getSeconds(this);
    },
    get$millisecond() {
      return A.Primitives_getMilliseconds(this);
    },
    get$microsecond() {
      return this._microsecond;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && A.boolConversionCheck(J.$eq$(this.get$millisecondsSinceEpoch(), other.get$millisecondsSinceEpoch())) && A.boolConversionCheck(J.$eq$(this.get$microsecond(), other.get$microsecond())) && A.boolConversionCheck(J.$eq$(this.isUtc, other.isUtc));
    },
    get$hashCode(_) {
      return A.Object_hash(this._value, this._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    compareTo$1(_, other) {
      var r;
      type$.DateTime._as(other);
      r = J.compareTo$1$ns(this.get$millisecondsSinceEpoch(), other.get$millisecondsSinceEpoch());
      if (r !== 0)
        return r;
      return J.compareTo$1$ns(this.get$microsecond(), other.get$microsecond());
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(_this.get$year()),
        m = A.DateTime__twoDigits(_this.get$month()),
        d = A.DateTime__twoDigits(_this.get$day()),
        h = A.DateTime__twoDigits(_this.get$hour()),
        min = A.DateTime__twoDigits(_this.get$minute()),
        sec = A.DateTime__twoDigits(_this.get$second()),
        ms = A.DateTime__threeDigits(_this.get$millisecond()),
        us = A.boolConversionCheck(J.$eq$(_this.get$microsecond(), 0)) ? "" : A.DateTime__threeDigits(_this.get$microsecond()),
        t1 = y + "-" + m;
      if (A.boolConversionCheck(_this.isUtc))
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    },
    $isComparable: 1
  };
  A.Duration.prototype = {
    get$inMilliseconds() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return B.JSNumber_methods._tdivFast$1(t1, 1000);
    },
    get$inMicroseconds() {
      return this._duration;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && A.boolConversionCheck(J.$eq$(this._duration, other.get$inMicroseconds()));
    },
    get$hashCode(_) {
      return J.get$hashCode$(this._duration);
    },
    compareTo$1(_, other) {
      return J.compareTo$1$ns(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this.get$inMicroseconds(),
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + J.padLeft$2$s(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    },
    $isEnum: 1
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.S(A.Error_safeToString(t1));
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!A.boolConversionCheck(this._hasValue) ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = A.S(_this.get$_errorName()) + nameString + messageString;
      if (!A.boolConversionCheck(_this._hasValue))
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (this.get$invalidValue() < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (A.boolConversionCheck(J.$eq$(t1, 0)))
        return ": no indices are valid";
      return ": index should be less than " + A.S(t1);
    },
    $isRangeError: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + A.S(this.message);
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    },
    $isUnsupportedError: 1
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + A.S(this.message);
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.S(A.Error_safeToString(t1)) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      var message = this.message;
      if (message == null)
        return "Exception";
      return "Exception: " + A.S(message);
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, prefix, postfix, end, start,
        message = this.message,
        report = message != null && "" !== message ? "FormatException: " + A.S(message) : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null)
          return report + "\n" + A.S(source.length > 78 ? J.$add$ns(B.JSString_methods.substring$2(source, 0, 75), "...") : source);
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        prefix = "";
        if (lineEnd - lineStart > 78) {
          postfix = "...";
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
            }
            prefix = "...";
          }
        } else {
          end = lineEnd;
          start = lineStart;
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + A.S(B.JSString_methods.$mul(" ", offset - start + prefix.length)) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isUnsupportedError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return A.WhereIterable$(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("Iterable.E"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); A.boolConversionCheck(t1.moveNext$0());)
        if (A.boolConversionCheck(J.$eq$(t1.get$current(), element)))
          return true;
      return false;
    },
    forEach$1(_, action) {
      var t1;
      A._instanceType(this)._eval$1("~(Iterable.E)")._as(action);
      for (t1 = this.get$iterator(this); A.boolConversionCheck(t1.moveNext$0());)
        action.call$1(t1.get$current());
    },
    join$1(_, separator) {
      var iterator, first, buffer, t1;
      A._asString(separator);
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current());
      if (!iterator.moveNext$0())
        return first;
      buffer = A.StringBuffer$(first);
      t1 = A.boolConversionCheck(B.JSString_methods.get$isEmpty(separator));
      if (t1) {
        do
          buffer.write$1(J.toString$0$(iterator.get$current()));
        while (iterator.moveNext$0());
      } else
        do {
          buffer.write$1(separator);
          buffer.write$1(J.toString$0$(iterator.get$current()));
        } while (iterator.moveNext$0());
      return buffer.toString$0(0);
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, A._asBool(growable), A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(this.get$isEmpty(this));
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, A._asInt(count), A._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, A._asInt(count), A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    firstWhere$1(_, test) {
      var t1, element;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); A.boolConversionCheck(t1.moveNext$0());) {
        element = t1.get$current();
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A._asInt(index);
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return A.Primitives_objectToHumanReadableString(this);
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return J.get$length$asx(this._contents);
    },
    write$1(obj) {
      this._writeString$1(A.S(obj));
    },
    writeCharCode$1(charCode) {
      this._writeString$1(A.String_String$fromCharCode(A._asInt(charCode)));
    },
    writeAll$2(objects, separator) {
      type$.Iterable_dynamic._as(objects);
      A._asString(separator);
      this.set$_contents(A.StringBuffer__writeAll(this._contents, objects, separator));
    },
    writeln$0() {
      this._writeString$1("\n");
    },
    clear$0(_) {
      this._contents = "";
    },
    toString$0(_) {
      return A.Primitives_flattenString(this._contents);
    },
    _writeString$1(str) {
      A._asString(str);
      this.set$_contents(A.Primitives_stringConcatUnchecked(this._contents, str));
    },
    get$isEmpty(_) {
      return J.$eq$(this.get$length(0), 0);
    },
    get$isNotEmpty(_) {
      return !A.boolConversionCheck(this.get$isEmpty(0));
    },
    set$_contents(_contents) {
      this._contents = A._asString(_contents);
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + A._asString(msg), this.host, A._asInt(position)));
    },
    $signature: 41
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + A._asString(msg), this.host, A._asIntQ(position)));
    },
    $signature: 34
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      A._asInt(start);
      A._asInt(end);
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(J.substring$2$s(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 4
  };
  A._Uri.prototype = {
    get$_text() {
      var result, _this = this,
        value = _this.___Uri__text_FI;
      if (A.boolConversionCheck(A.isSentinel(value))) {
        result = _this._initializeText$0();
        _this.___Uri__text_FI !== $ && A.throwLateFieldADI("_text");
        _this.___Uri__text_FI = result;
        value = result;
      }
      return value;
    },
    get$pathSegments() {
      var result,
        value = this.___Uri_pathSegments_FI;
      if (A.boolConversionCheck(A.isSentinel(value))) {
        result = A._Uri__computePathSegments(this.path);
        value !== $ && A.throwLateFieldADI("pathSegments");
        this.set$___Uri_pathSegments_FI(result);
        value = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (A.boolConversionCheck(A.isSentinel(value))) {
        result = J.get$hashCode$(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (A.boolConversionCheck(B.JSString_methods.startsWith$1(host, "[")))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme;
      A._asString(scheme);
      thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveStartsWith(scheme, thisScheme, 0);
    },
    replace$1$scheme(scheme) {
      var scheme0, schemeChanged, isFile, userInfo, port, host, currentPath, t1, path, query, fragment, _this = this;
      A._asStringQ(scheme);
      scheme0 = _this.scheme;
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = scheme == null ? scheme0 != null : scheme !== scheme0;
      } else {
        scheme = scheme0;
        schemeChanged = false;
      }
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._port;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      if (A.boolConversionCheck(_this.get$hasAuthority()))
        host = _this._host;
      else
        host = A.boolConversionCheck(J.get$isNotEmpty$asx(userInfo)) || port != null || isFile ? "" : null;
      currentPath = _this.path;
      if (!isFile)
        t1 = host != null && !A.boolConversionCheck(B.JSString_methods.get$isEmpty(currentPath));
      else
        t1 = true;
      if (t1 && !A.boolConversionCheck(B.JSString_methods.startsWith$1(currentPath, "/")))
        currentPath = "/" + currentPath;
      path = currentPath;
      query = _this._query;
      fragment = _this._fragment;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    get$isAbsolute() {
      return !A.boolConversionCheck(J.$eq$(this.scheme, "")) && A.boolConversionCheck(J.$eq$(this.get$fragment(), ""));
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, t1, newEnd, delta, t2, t3, t4;
      A._asString(base);
      A._asString(reference);
      for (backCount = 0, refStart = 0; A.boolConversionCheck(B.JSString_methods.startsWith$2(reference, "../", refStart));) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      t1 = base.length;
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t2 = delta !== 2;
        t3 = false;
        if (!t2 || delta === 3) {
          t4 = newEnd + 1;
          if (!(t4 < t1))
            return A.ioore(base, t4);
          if (base.charCodeAt(t4) === 46)
            if (t2) {
              t2 = newEnd + 2;
              if (!(t2 < t1))
                return A.ioore(base, t2);
              t2 = base.charCodeAt(t2) === 46;
            } else
              t2 = true;
          else
            t2 = t3;
        } else
          t2 = t3;
        if (t2)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(A._asString(reference)));
    },
    resolveUri$1(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, split, packageNameEnd, packageName, mergedPath, fragment, t1, _this = this, _null = null;
      type$.Uri._as(reference);
      if (A.boolConversionCheck(J.get$isNotEmpty$asx(reference.get$scheme()))) {
        if (type$._PlatformUri._is(reference))
          return reference;
        targetScheme = reference.get$scheme();
        if (A.boolConversionCheck(reference.get$hasAuthority())) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = A.boolConversionCheck(reference.get$hasPort()) ? reference.get$port() : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = A._Uri__removeDotSegments(reference.get$path());
        targetQuery = A.boolConversionCheck(reference.get$hasQuery()) ? reference.get$query() : _null;
        split = 0;
      } else {
        targetScheme = _this.scheme;
        if (A.boolConversionCheck(reference.get$hasAuthority())) {
          if (type$._PlatformUri._is(reference))
            return reference.replace$1$scheme(targetScheme);
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = A._Uri__makePort(A.boolConversionCheck(reference.get$hasPort()) ? reference.get$port() : _null, targetScheme);
          targetPath = A._Uri__removeDotSegments(reference.get$path());
          targetQuery = A.boolConversionCheck(reference.get$hasQuery()) ? reference.get$query() : _null;
          split = 1;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (A.boolConversionCheck(reference.get$hasEmptyPath()))
            if (A.boolConversionCheck(reference.get$hasQuery())) {
              targetQuery = reference.get$query();
              split = 3;
            } else {
              targetQuery = _this._query;
              split = 4;
            }
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = A.boolConversionCheck(reference.get$hasAbsolutePath()) ? B.JSString_methods.$add(packageName, A._Uri__removeDotSegments(reference.get$path())) : B.JSString_methods.$add(packageName, A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path())));
            } else if (A.boolConversionCheck(reference.get$hasAbsolutePath()))
              targetPath = A._Uri__removeDotSegments(reference.get$path());
            else if (A.boolConversionCheck(_this.get$hasEmptyPath()))
              if (!A.boolConversionCheck(_this.get$hasAuthority()))
                targetPath = !A.boolConversionCheck(_this.get$hasScheme()) ? reference.get$path() : A._Uri__removeDotSegments(reference.get$path());
              else
                targetPath = A._Uri__removeDotSegments(B.JSString_methods.$add("/", reference.get$path()));
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path());
              if (A.boolConversionCheck(_this.get$hasScheme()) || A.boolConversionCheck(_this.get$hasAuthority()) || A.boolConversionCheck(_this.get$hasAbsolutePath()))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, A.boolConversionCheck(_this.get$hasScheme()) || A.boolConversionCheck(_this.get$hasAuthority()));
            }
            targetQuery = A.boolConversionCheck(reference.get$hasQuery()) ? reference.get$query() : _null;
            split = 2;
          }
        }
      }
      fragment = A.boolConversionCheck(reference.get$hasFragment()) ? reference.get$fragment() : _null;
      if (!type$._PlatformUri._is(reference)) {
        if (split === 0)
          targetScheme = A._Uri__makeScheme(targetScheme, 0, targetScheme.length);
        if (split <= 1) {
          targetUserInfo = A._Uri__makeUserInfo(targetUserInfo, 0, targetUserInfo.length);
          if (targetPort != null)
            targetPort = A._Uri__makePort(targetPort, targetScheme);
          if (targetHost != null && A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(targetHost)))
            targetHost = A._Uri__makeHost(targetHost, 0, targetHost.length, false);
        }
        t1 = split <= 3;
        if (t1)
          targetPath = A._Uri__makePath(targetPath, 0, targetPath.length, _null, targetScheme, targetHost != null);
        if (t1 && targetQuery != null)
          targetQuery = A._Uri__makeQuery(targetQuery, 0, targetQuery.length, _null);
        if (fragment != null)
          fragment = A._Uri__makeFragment(fragment, 0, fragment.length);
      }
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, fragment);
    },
    get$hasScheme() {
      return J.get$isNotEmpty$asx(this.scheme);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasPort() {
      return this._port != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasEmptyPath() {
      return J.get$isEmpty$asx(this.path);
    },
    get$hasAbsolutePath() {
      return J.startsWith$1$s(this.path, "/");
    },
    toFilePath$0() {
      var _this = this,
        t1 = _this.scheme,
        t2 = J.getInterceptor$(t1);
      if (!A.boolConversionCheck(t2.$eq(t1, "")) && !A.boolConversionCheck(t2.$eq(t1, "file")))
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + A.S(t1) + " URI"));
      if (!A.boolConversionCheck(J.$eq$(_this.get$query(), "")))
        throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
      if (!A.boolConversionCheck(J.$eq$(_this.get$fragment(), "")))
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      t1 = A._Uri__isWindows();
      return A.boolConversionCheck(t1) ? A._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0() {
      var pathSegments, result, _this = this;
      if (A.boolConversionCheck(_this.get$hasAuthority()) && !A.boolConversionCheck(J.$eq$(_this.get$host(), "")))
        throw A.wrapException(A.UnsupportedError$(string$.Cannoten));
      pathSegments = _this.get$pathSegments();
      A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      result = A.StringBuffer$("");
      if (A.boolConversionCheck(_this.get$hasAbsolutePath()))
        result.write$1("/");
      result.writeAll$2(pathSegments, "/");
      return result.toString$0(0);
    },
    _writeAuthority$1(ss) {
      var t1;
      type$.StringSink._as(ss);
      t1 = this._userInfo;
      if (A.boolConversionCheck(J.get$isNotEmpty$asx(t1))) {
        ss.write$1(t1);
        ss.write$1("@");
      }
      t1 = this._host;
      if (t1 != null)
        ss.write$1(t1);
      t1 = this._port;
      if (t1 != null) {
        ss.write$1(":");
        ss.write$1(t1);
      }
    },
    toString$0(_) {
      return this.get$_text();
    },
    _initializeText$0() {
      var _this = this,
        sb = A.StringBuffer$(""),
        t1 = _this.scheme,
        t2 = J.getInterceptor$asx(t1);
      if (A.boolConversionCheck(t2.get$isNotEmpty(t1))) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (A.boolConversionCheck(_this.get$hasAuthority()) || A.boolConversionCheck(t2.$eq(t1, "file"))) {
        sb.write$1("//");
        _this._writeAuthority$1(sb);
      }
      sb.write$1(_this.path);
      t1 = _this._query;
      if (t1 != null) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = _this._fragment;
      if (t1 != null) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb.toString$0(0);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      return type$.Uri._is(other) && A.boolConversionCheck(J.$eq$(_this.scheme, other.get$scheme())) && A.boolConversionCheck(J.$eq$(_this.get$hasAuthority(), other.get$hasAuthority())) && A.boolConversionCheck(J.$eq$(_this.get$userInfo(), other.get$userInfo())) && A.boolConversionCheck(J.$eq$(_this.get$host(), other.get$host())) && A.boolConversionCheck(J.$eq$(_this.get$port(), other.get$port())) && A.boolConversionCheck(J.$eq$(_this.path, other.get$path())) && A.boolConversionCheck(J.$eq$(_this.get$hasQuery(), other.get$hasQuery())) && A.boolConversionCheck(J.$eq$(_this.get$query(), other.get$query())) && A.boolConversionCheck(J.$eq$(_this.get$hasFragment(), other.get$hasFragment())) && A.boolConversionCheck(J.$eq$(_this.get$fragment(), other.get$fragment()));
    },
    set$___Uri_pathSegments_FI(___Uri_pathSegments_FI) {
      this.___Uri_pathSegments_FI = type$.List_String._as(___Uri_pathSegments_FI);
    },
    $isUri: 1,
    $is_PlatformUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(B.List_M2I0, A._asString(s), B.C_Utf8Codec, false);
    },
    $signature: 27
  };
  A._Uri__makeQueryFromParametersDefault_writeParameter.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      A._asStringQ(value);
      t1 = this.result;
      t2 = this._box_0;
      t1.write$1(t2.separator);
      t2.separator = "&";
      t1.write$1(A.Uri_encodeQueryComponent(key));
      if (value != null && A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(value))) {
        t1.write$1("=");
        t1.write$1(A.Uri_encodeQueryComponent(value));
      }
    },
    $signature: 69
  };
  A._Uri__makeQueryFromParametersDefault_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (value == null || typeof value == "string")
        this.writeParameter.call$2(key, A._asStringQ(value));
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.writeParameter; A.boolConversionCheck(t1.moveNext$0());)
          t2.call$2(key, A._asString(t1.get$current()));
    },
    $signature: 24
  };
  A.UriData.prototype = {
    get$uri() {
      var t1 = this._uriCache;
      return t1 == null ? this._uriCache = this._computeUri$0() : t1;
    },
    _computeUri$0() {
      var query,
        t1 = this._text,
        t2 = J.$index$asx(this._separatorIndices, 0) + 1,
        t3 = J.getInterceptor$s(t1),
        queryIndex = t3.indexOf$2(t1, "?", t2),
        end = t3.get$length(t1);
      if (queryIndex >= 0) {
        query = A._Uri__normalizeOrSubstring(t1, queryIndex + 1, end, B.List_42A, false, false);
        end = queryIndex;
      } else
        query = null;
      return A._DataUri$(this, A._Uri__normalizeOrSubstring(t1, t2, end, B.List_M2I, false, false), query);
    },
    toString$0(_) {
      var t1 = this._text;
      return J.$index$asx(this._separatorIndices, 0) === -1 ? "data:" + A.S(t1) : t1;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = J.$index$asx(this.tables, A._asInt(state));
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, A._asIntQ(defaultTransition));
      return t1;
    },
    $signature: 33
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, t2, i, t3;
      type$.Uint8List._as(target);
      A._asString(chars);
      A._asInt(transition);
      for (t1 = chars.length, t2 = target.$flags | 0, i = 0; i < t1; ++i) {
        t3 = chars.charCodeAt(i) ^ 96;
        t2 & 2 && A.throwUnsupportedOperation(target);
        if (!(t3 < target.length))
          return A.ioore(target, t3);
        target[t3] = transition;
      }
    },
    $signature: 31
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var t1, i, n, t2;
      type$.Uint8List._as(target);
      A._asString(range);
      A._asInt(transition);
      t1 = range.length;
      if (0 >= t1)
        return A.ioore(range, 0);
      i = range.charCodeAt(0);
      if (1 >= t1)
        return A.ioore(range, 1);
      n = range.charCodeAt(1);
      t1 = target.$flags | 0;
      for (; i <= n; ++i) {
        t2 = (i ^ 96) >>> 0;
        t1 & 2 && A.throwUnsupportedOperation(target);
        if (!(t2 < target.length))
          return A.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 31
  };
  A._SimpleUri.prototype = {
    get$hasScheme() {
      var t1 = this._schemeEnd;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    get$hasAuthority() {
      var t1 = this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    get$hasPort() {
      var t2,
        t1 = this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = this._pathStart;
        if (typeof t2 !== "number")
          return A.iae(t2);
        t2 = t1 + 1 < t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hasQuery() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return t1 < t2;
    },
    get$hasFragment() {
      var t1 = this._fragmentStart,
        t2 = J.get$length$asx(this._uri);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return t1 < t2;
    },
    get$_isFile() {
      return A.boolConversionCheck(J.$eq$(this._schemeEnd, 4)) && A.boolConversionCheck(J.startsWith$1$s(this._uri, "file"));
    },
    get$_isHttp() {
      return A.boolConversionCheck(J.$eq$(this._schemeEnd, 4)) && A.boolConversionCheck(J.startsWith$1$s(this._uri, "http"));
    },
    get$_isHttps() {
      return A.boolConversionCheck(J.$eq$(this._schemeEnd, 5)) && A.boolConversionCheck(J.startsWith$1$s(this._uri, "https"));
    },
    get$_isPackage() {
      return A.boolConversionCheck(J.$eq$(this._schemeEnd, 7)) && A.boolConversionCheck(J.startsWith$1$s(this._uri, "package"));
    },
    _isScheme$1(scheme) {
      A._asString(scheme);
      return A.boolConversionCheck(J.$eq$(this._schemeEnd, scheme.length)) && A.boolConversionCheck(J.startsWith$1$s(this._uri, scheme));
    },
    get$hasAbsolutePath() {
      return J.startsWith$2$s(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath() {
      return J.$eq$(this._pathStart, this._queryStart);
    },
    get$isAbsolute() {
      return A.boolConversionCheck(this.get$hasScheme()) && !A.boolConversionCheck(this.get$hasFragment());
    },
    isScheme$1(scheme) {
      var t1;
      A._asString(scheme);
      t1 = A.boolConversionCheck(B.JSString_methods.get$isEmpty(scheme));
      if (t1) {
        t1 = this._schemeEnd;
        if (typeof t1 !== "number")
          return t1.$lt();
        return t1 < 0;
      }
      if (scheme.length !== this._schemeEnd)
        return false;
      return A._caseInsensitiveStartsWith(scheme, this._uri, 0);
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var _this = this,
        t1 = _this._schemeEnd;
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= 0)
        return "";
      if (A.boolConversionCheck(_this.get$_isHttp()))
        return "http";
      if (A.boolConversionCheck(_this.get$_isHttps()))
        return "https";
      if (A.boolConversionCheck(_this.get$_isFile()))
        return "file";
      if (A.boolConversionCheck(_this.get$_isPackage()))
        return "package";
      return J.substring$2$s(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += 3;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > t2 ? J.substring$2$s(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0 ? J.substring$2$s(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (A.boolConversionCheck(_this.get$hasPort())) {
        t1 = _this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        return A.int_parse(J.substring$2$s(_this._uri, t1 + 1, _this._pathStart), null);
      }
      if (A.boolConversionCheck(_this.get$_isHttp()))
        return 80;
      if (A.boolConversionCheck(_this.get$_isHttps()))
        return 443;
      return 0;
    },
    get$path() {
      return J.substring$2$s(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return t1 < t2 ? J.substring$2$s(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri,
        t3 = J.getInterceptor$asx(t2),
        t4 = t3.get$length(t2);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t4 !== "number")
        return A.iae(t4);
      return t1 < t4 ? t3.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri,
        t2 = J.getInterceptor$s(t1);
      if (A.boolConversionCheck(t2.startsWith$2(t1, "/", start)))
        ++start;
      if (start === end)
        return B.List_empty0;
      parts = A._setArrayType([], type$.JSArray_String);
      for (i = start; i < end; ++i)
        if (t2.codeUnitAt$1(t1, i) === 47) {
          B.JSArray_methods.add$1(parts, t2.substring$2(t1, start, i));
          start = i + 1;
        }
      B.JSArray_methods.add$1(parts, t2.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    _isPort$1(port) {
      var t1, portDigitStart;
      A._asString(port);
      t1 = this._portStart;
      if (typeof t1 !== "number")
        return t1.$add();
      portDigitStart = t1 + 1;
      return portDigitStart + port.length === this._pathStart && A.boolConversionCheck(J.startsWith$2$s(this._uri, port, portDigitStart));
    },
    removeFragment$0() {
      var t1, _this = this;
      if (!A.boolConversionCheck(_this.get$hasFragment()))
        return _this;
      t1 = _this._fragmentStart;
      return A._SimpleUri$(J.substring$2$s(_this._uri, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$1$scheme(scheme) {
      var schemeChanged, isFile, t1, t2, userInfo, port, host, t3, path, t4, query, fragment, _this = this, _null = null;
      A._asStringQ(scheme);
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = !_this._isScheme$1(scheme);
      } else {
        scheme = _this.get$scheme();
        schemeChanged = false;
      }
      isFile = scheme === "file";
      t1 = _this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t2 = _this._schemeEnd;
        if (typeof t2 !== "number")
          return t2.$add();
        userInfo = J.substring$2$s(_this._uri, t2 + 3, t1);
      } else
        userInfo = "";
      port = A.boolConversionCheck(_this.get$hasPort()) ? _this.get$port() : _null;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      t1 = _this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        host = J.substring$2$s(_this._uri, t1, _this._portStart);
      else
        host = A.boolConversionCheck(J.get$isNotEmpty$asx(userInfo)) || port != null || isFile ? "" : _null;
      t1 = _this._uri;
      t2 = _this._queryStart;
      t3 = J.getInterceptor$s(t1);
      path = t3.substring$2(t1, _this._pathStart, t2);
      if (!isFile)
        t4 = host != null && !A.boolConversionCheck(J.get$isEmpty$asx(path));
      else
        t4 = true;
      if (t4 && !A.boolConversionCheck(J.startsWith$1$s(path, "/")))
        path = B.JSString_methods.$add("/", path);
      t4 = _this._fragmentStart;
      if (typeof t2 !== "number")
        return t2.$lt();
      if (typeof t4 !== "number")
        return A.iae(t4);
      query = t2 < t4 ? t3.substring$2(t1, t2 + 1, t4) : _null;
      t2 = _this._fragmentStart;
      t4 = t3.get$length(t1);
      if (typeof t2 !== "number")
        return t2.$lt();
      if (typeof t4 !== "number")
        return A.iae(t4);
      fragment = t2 < t4 ? t3.substring$1(t1, t2 + 1) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(A._asString(reference)));
    },
    resolveUri$1(reference) {
      type$.Uri._as(reference);
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var isSimple, delta, t2, t3, newUri, t4, t5, t6, basePathStart, packageNameEnd, basePathStart0, refStart, baseUri, refUri, baseStart, baseEnd, baseStart0, refEnd, backCount, refStart0, insert,
        t1 = type$._SimpleUri;
      t1._as(base);
      t1._as(ref);
      if (A.boolConversionCheck(ref.get$hasScheme()))
        return ref;
      if (A.boolConversionCheck(ref.get$hasAuthority())) {
        if (!A.boolConversionCheck(base.get$hasScheme()))
          return ref;
        if (A.boolConversionCheck(base.get$_isFile()))
          isSimple = !A.boolConversionCheck(ref.get$hasEmptyPath());
        else if (A.boolConversionCheck(base.get$_isHttp()))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !A.boolConversionCheck(base.get$_isHttps()) || !ref._isPort$1("443");
        if (isSimple) {
          t1 = base._schemeEnd;
          if (typeof t1 !== "number")
            return t1.$add();
          delta = t1 + 1;
          t2 = J.substring$2$s(base._uri, 0, delta);
          t3 = ref._schemeEnd;
          if (typeof t3 !== "number")
            return t3.$add();
          newUri = J.$add$ns(t2, J.substring$1$s(ref._uri, t3 + 1));
          t3 = ref._hostStart;
          if (typeof t3 !== "number")
            return t3.$add();
          t2 = ref._portStart;
          if (typeof t2 !== "number")
            return t2.$add();
          t4 = ref._pathStart;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = ref._queryStart;
          if (typeof t5 !== "number")
            return t5.$add();
          t6 = ref._fragmentStart;
          if (typeof t6 !== "number")
            return t6.$add();
          return A._SimpleUri$(newUri, t1, t3 + delta, t2 + delta, t4 + delta, t5 + delta, t6 + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      if (A.boolConversionCheck(ref.get$hasEmptyPath())) {
        if (A.boolConversionCheck(ref.get$hasQuery())) {
          t1 = base._queryStart;
          t2 = ref._queryStart;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return A.iae(t2);
          delta = t1 - t2;
          newUri = J.$add$ns(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2));
          t1 = ref._fragmentStart;
          if (typeof t1 !== "number")
            return t1.$add();
          return A._SimpleUri$(newUri, base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t2 + delta, t1 + delta, base._schemeCache);
        }
        if (A.boolConversionCheck(ref.get$hasFragment())) {
          t1 = base._fragmentStart;
          t2 = ref._fragmentStart;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return A.iae(t2);
          return A._SimpleUri$(J.$add$ns(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t1 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      if (A.boolConversionCheck(ref.get$hasAbsolutePath())) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        t1 = ref._pathStart;
        if (typeof t1 !== "number")
          return A.iae(t1);
        delta = basePathStart0 - t1;
        newUri = J.$add$ns(J.substring$2$s(base._uri, 0, basePathStart0), J.substring$1$s(ref._uri, t1));
        t1 = ref._queryStart;
        if (typeof t1 !== "number")
          return t1.$add();
        basePathStart0 = ref._fragmentStart;
        if (typeof basePathStart0 !== "number")
          return basePathStart0.$add();
        return A._SimpleUri$(newUri, base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, basePathStart0 + delta, base._schemeCache);
      }
      if (A.boolConversionCheck(base.get$hasEmptyPath()) && A.boolConversionCheck(base.get$hasAuthority())) {
        refStart = ref._pathStart;
        for (t1 = ref._uri, t2 = J.getInterceptor$s(t1); A.boolConversionCheck(t2.startsWith$2(t1, "../", refStart));)
          refStart += 3;
        t3 = base._pathStart;
        if (typeof t3 !== "number")
          return t3.$sub();
        delta = t3 - refStart + 1;
        t4 = A.S(J.substring$2$s(base._uri, 0, t3));
        t1 = A.S(t2.substring$1(t1, refStart));
        t2 = ref._queryStart;
        if (typeof t2 !== "number")
          return t2.$add();
        t5 = ref._fragmentStart;
        if (typeof t5 !== "number")
          return t5.$add();
        return A._SimpleUri$(t4 + "/" + t1, base._schemeEnd, base._hostStart, base._portStart, t3, t2 + delta, t5 + delta, base._schemeCache);
      }
      baseUri = base._uri;
      refUri = ref._uri;
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; A.boolConversionCheck(B.JSString_methods.startsWith$2(baseUri, "../", baseStart0));)
          baseStart0 += 3;
      refStart = ref._pathStart;
      refEnd = ref._queryStart;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= refEnd && A.boolConversionCheck(B.JSString_methods.startsWith$2(refUri, "../", refStart))))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (t1 = baseUri.length, insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (!(baseEnd >= 0 && baseEnd < t1))
          return A.ioore(baseUri, baseEnd);
        if (baseUri.charCodeAt(baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && !A.boolConversionCheck(base.get$hasScheme()) && !A.boolConversionCheck(base.get$hasAbsolutePath())) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      t1 = A.S(B.JSString_methods.substring$2(baseUri, 0, baseEnd));
      t2 = A.S(B.JSString_methods.substring$1(refUri, refStart));
      t3 = ref._fragmentStart;
      if (typeof t3 !== "number")
        return t3.$add();
      return A._SimpleUri$(t1 + insert + t2, base._schemeEnd, base._hostStart, base._portStart, baseStart, refEnd + delta, t3 + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0 && !A.boolConversionCheck(_this.get$_isFile()))
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + A.S(_this.get$scheme()) + " URI"));
      t1 = _this._queryStart;
      t2 = J.get$length$asx(_this._uri);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 < t2) {
        t2 = _this._fragmentStart;
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (t1 < t2)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      }
      t1 = A._Uri__isWindows();
      return A.boolConversionCheck(t1) ? A._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0() {
      var t1 = this._hostStart,
        t2 = this._portStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 < t2)
        throw A.wrapException(A.UnsupportedError$(string$.Cannoten));
      return this.get$path();
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      if (t1 == null) {
        t1 = J.get$hashCode$(this._uri);
        this.set$_hashCodeCache(t1);
      }
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && A.boolConversionCheck(J.$eq$(this._uri, other.toString$0(0)));
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = A.boolConversionCheck(_this.get$hasAuthority()) ? _this.get$host() : _null,
        t4 = A.boolConversionCheck(_this.get$hasPort()) ? _this.get$port() : _null,
        t5 = _this.get$path(),
        t6 = A.boolConversionCheck(_this.get$hasQuery()) ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t5, t6, A.boolConversionCheck(_this.get$hasFragment()) ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    set$_hashCodeCache(_hashCodeCache) {
      this._hashCodeCache = A._asIntQ(_hashCodeCache);
    },
    $isUri: 1,
    $is_PlatformUri: 1
  };
  A._DataUri.prototype = {};
  A.Expando.prototype = {
    $index(_, object) {
      type$.Object._as(object);
      A.Expando__checkType(object);
      return this._jsWeakMap.get(object);
    },
    $indexSet(_, object, value) {
      type$.Object._as(object);
      this.$ti._eval$1("1?")._as(value);
      if (object instanceof A._Record)
        A.Expando__badExpandoKey(object);
      this._jsWeakMap.set(object, value);
    },
    toString$0(_) {
      return "Expando:null";
    }
  };
  A.FutureOfVoidToJSPromise_get_toJS_closure.prototype = {
    call$2(resolve, reject) {
      var t1 = type$.JavaScriptFunction;
      this._this.then$1$2$onError(new A.FutureOfVoidToJSPromise_get_toJS__closure(t1._as(resolve)), new A.FutureOfVoidToJSPromise_get_toJS__closure0(t1._as(reject)), type$.nullable_Object);
    },
    $signature: 64
  };
  A.FutureOfVoidToJSPromise_get_toJS__closure.prototype = {
    call$1(_) {
      var t1 = this.resolve;
      return A._callMethodUnchecked1(t1, "call", t1, type$.nullable_Object);
    },
    $signature: 48
  };
  A.FutureOfVoidToJSPromise_get_toJS__closure0.prototype = {
    call$2(error, stackTrace) {
      var wrapper, t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      wrapper = A.JSFunctionUnsafeUtilExtension_callAsConstructor(type$.JavaScriptFunction._as(A.JSObjectUnsafeUtilExtension___(A.globalContext(), "Error")), A.StringToJSString_get_toJS("Dart exception thrown from converted Future. Use the properties 'error' to fetch the boxed error and 'stack' to recover the stack trace."), null, null, type$.JSObject);
      A.JSObjectUnsafeUtilExtension____(wrapper, "error", A.ObjectToJSBoxedDartObject_get_toJSBox(error));
      A.JSObjectUnsafeUtilExtension____(wrapper, "stack", A.StringToJSString_get_toJS(stackTrace.toString$0(0)));
      t1 = this.reject;
      A._callMethodUnchecked2(t1, "call", t1, wrapper, type$.nullable_Object);
    },
    $signature: 15
  };
  A.jsify__convert.prototype = {
    call$1(o) {
      var t1, convertedMap, key, convertedList;
      if (A.boolConversionCheck(A._noJsifyRequired(o)))
        return o;
      t1 = this._convertedObjects;
      if (t1.containsKey$1(o))
        return J.$index$asx(t1, o);
      if (type$.Map_of_nullable_Object_and_nullable_Object._is(o)) {
        convertedMap = {};
        J.$indexSet$ax(t1, o, convertedMap);
        for (t1 = J.get$iterator$ax(o.get$keys()); A.boolConversionCheck(t1.moveNext$0());) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(o.$index(0, key));
        }
        return convertedMap;
      } else if (type$.Iterable_nullable_Object._is(o)) {
        convertedList = [];
        J.$indexSet$ax(t1, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 29
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 6
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(A.NullRejectionException$(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 6
  };
  A.dartify_convert.prototype = {
    call$1(o) {
      var t1, t2, dartObject, originalKeys, dartKeys, t3, i, jsKey, dartKey, l, $length;
      if (A.boolConversionCheck(A._noDartifyRequired(o)))
        return o;
      t1 = this._convertedObjects;
      o.toString;
      if (t1.containsKey$1(o))
        return J.$index$asx(t1, o);
      if (A.boolConversionCheck(A._isJavaScriptDate(o)))
        return A._dateToDateTime(o);
      if (A.boolConversionCheck(A._isJavaScriptRegExp(o)))
        throw A.wrapException(A.ArgumentError$("structured clone of RegExp", null));
      if (A.boolConversionCheck(A._isJavaScriptPromise(o)))
        return A.promiseToFuture(o, type$.nullable_Object);
      if (A.boolConversionCheck(A.isJavaScriptSimpleObject(o))) {
        t2 = type$.nullable_Object;
        dartObject = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        J.$indexSet$ax(t1, o, dartObject);
        originalKeys = A.objectKeys(o);
        dartKeys = [];
        for (t1 = J.getInterceptor$ax(originalKeys), t3 = t1.get$iterator(originalKeys); A.boolConversionCheck(t3.moveNext$0());)
          dartKeys.push(A.dartify(t3.get$current()));
        i = 0;
        while (true) {
          t3 = t1.get$length(originalKeys);
          if (typeof t3 !== "number")
            return A.iae(t3);
          if (!(i < t3))
            break;
          jsKey = t1.$index(originalKeys, i);
          if (!(i < dartKeys.length))
            return A.ioore(dartKeys, i);
          dartKey = dartKeys[i];
          if (jsKey != null)
            dartObject.$indexSet(0, dartKey, this.call$1(A.getProperty(o, jsKey, t2)));
          ++i;
        }
        return dartObject;
      }
      if (A.boolConversionCheck(A.isJavaScriptArray(o))) {
        l = o;
        dartObject = [];
        J.$indexSet$ax(t1, o, dartObject);
        $length = A.getProperty(o, "length", type$.int);
        for (t1 = J.getInterceptor$asx(l), i = 0; i < $length; ++i)
          dartObject.push(this.call$1(t1.$index(l, i)));
        return dartObject;
      }
      return o;
    },
    $signature: 29
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (A.boolConversionCheck(this.isUndefined) ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  A._JSRandom.prototype = {
    nextInt$1(max) {
      A._asInt(max);
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$(string$.max_mu + max));
      return Math.random() * max >>> 0;
    },
    $isRandom: 1
  };
  A._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    _getRandomBytes$2(start, $length) {
      A._asInt(start);
      A._asInt($length);
      crypto.getRandomValues(J.asUint8List$2$x(J.get$buffer$x(this._math$_buffer), start, $length));
    },
    nextInt$1(max) {
      var byteCount, t1, t2, start, randomLimit, t3, t4, random, result;
      A._asInt(max);
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$(string$.max_mu + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      t2 = J.getInterceptor$x(t1);
      t2.setUint32$2(t1, 0, 0);
      start = 4 - byteCount;
      randomLimit = A._asInt(A.pow(256, byteCount));
      for (t3 = max - 1, t4 = (max & t3) >>> 0 === 0; true;) {
        this._getRandomBytes$2(start, byteCount);
        random = t2.getUint32$1(t1, 0);
        if (t4)
          return (random & t3) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    },
    $isRandom: 1
  };
  A.Endian.prototype = {};
  A.SingleSubscriptionTransformer.prototype = {
    bind$1(stream) {
      var subscription, controller,
        t1 = this.$ti;
      t1._eval$1("Stream<1>")._as(stream);
      subscription = A._Cell$named("subscription");
      controller = A.StreamController_StreamController(new A.SingleSubscriptionTransformer_bind_closure(this, subscription), null, null, null, true, t1._rest[1]);
      t1 = controller.get$addError();
      subscription.set$value(stream.listen$3$onDone$onError(new A.SingleSubscriptionTransformer_bind_closure0(this, controller), controller.get$close(), t1));
      return controller.get$stream();
    }
  };
  A.SingleSubscriptionTransformer_bind_closure.prototype = {
    call$0() {
      return this.subscription.readLocal$1$0(this.$this.$ti._eval$1("StreamSubscription<1>")).cancel$0();
    },
    $signature: 2
  };
  A.SingleSubscriptionTransformer_bind_closure0.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this.$ti;
      t1._precomputed1._as(value);
      try {
        J.add$1$ax(this.controller, t1._rest[1]._as(value));
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.TypeError._is(t1)) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          this.controller.addError$2(error, stackTrace);
        } else
          throw exception;
      }
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  A.NonGrowableListMixin.prototype = {
    set$length(_, newLength) {
      A._asInt(newLength);
      A.NonGrowableListMixin__throw();
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("NonGrowableListMixin.E")._as(value);
      return A.NonGrowableListMixin__throw();
    },
    addAll$1(_, iterable) {
      A._instanceType(this)._eval$1("Iterable<NonGrowableListMixin.E>")._as(iterable);
      return A.NonGrowableListMixin__throw();
    },
    insert$2(_, index, element) {
      A._asInt(index);
      A._instanceType(this)._eval$1("NonGrowableListMixin.E")._as(element);
      return A.NonGrowableListMixin__throw();
    },
    insertAll$2(_, index, iterable) {
      A._asInt(index);
      A._instanceType(this)._eval$1("Iterable<NonGrowableListMixin.E>")._as(iterable);
      return A.NonGrowableListMixin__throw();
    },
    remove$1(_, value) {
      return A.NonGrowableListMixin__throw();
    },
    removeAt$1(_, index) {
      A._asInt(index);
      return A.NonGrowableListMixin__throw();
    },
    removeLast$0(_) {
      return A.NonGrowableListMixin__throw();
    },
    clear$0(_) {
      return A.NonGrowableListMixin__throw();
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isIterable: 1,
    $is_ListIterable: 1,
    $isList: 1
  };
  A.UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._eval$1("UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("UnmodifiableMapMixin.V")._as(value);
      return A.UnmodifiableMapMixin__throw();
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1 = A._instanceType(this);
      t1._eval$1("UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("UnmodifiableMapMixin.V()")._as(ifAbsent);
      return A.UnmodifiableMapMixin__throw();
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<UnmodifiableMapMixin.K,UnmodifiableMapMixin.V>")._as(other);
      return A.UnmodifiableMapMixin__throw();
    },
    remove$1(_, key) {
      return A.UnmodifiableMapMixin__throw();
    },
    clear$0(_) {
      return A.UnmodifiableMapMixin__throw();
    },
    $isMap: 1
  };
  A._ReadWriteMutexRequest.prototype = {};
  A.ReadWriteMutex.prototype = {
    acquireRead$0() {
      return this._acquire$1$isRead(true);
    },
    acquireWrite$0() {
      return this._acquire$1$isRead(false);
    },
    release$0() {
      var t1, t2, _this = this;
      if (A.boolConversionCheck(J.$eq$(_this._mutex$_state, -1)))
        _this._mutex$_state = 0;
      else {
        t1 = _this._mutex$_state;
        if (typeof t1 !== "number")
          return A.iae(t1);
        if (0 < t1)
          _this.set$_mutex$_state(t1 - 1);
        else if (t1 === 0)
          throw A.wrapException(A.StateError$("no lock to release"));
      }
      for (t1 = _this._waiting, t2 = J.getInterceptor$asx(t1); A.boolConversionCheck(t2.get$isNotEmpty(t1));)
        if (_this._jobAcquired$1(t2.get$first(t1)))
          t2.removeAt$1(t1, 0);
        else
          break;
    },
    _acquire$1$isRead(isRead) {
      var newJob = A._ReadWriteMutexRequest$(A._asBool(isRead)),
        t1 = this._waiting,
        t2 = J.getInterceptor$asx(t1);
      if (A.boolConversionCheck(t2.get$isNotEmpty(t1)) || !this._jobAcquired$1(newJob))
        t2.add$1(t1, newJob);
      return newJob.completer.get$future();
    },
    _jobAcquired$1(job) {
      var t1, _this = this;
      type$._ReadWriteMutexRequest._as(job);
      if (!A.boolConversionCheck(J.$eq$(_this._mutex$_state, 0))) {
        t1 = _this._mutex$_state;
        if (typeof t1 !== "number")
          return A.iae(t1);
        t1 = 0 < t1 && A.boolConversionCheck(job.isRead);
      } else
        t1 = true;
      if (t1) {
        if (A.boolConversionCheck(job.isRead)) {
          t1 = _this._mutex$_state;
          if (typeof t1 !== "number")
            return t1.$add();
          ++t1;
        } else
          t1 = -1;
        _this.set$_mutex$_state(t1);
        job.completer.complete$0();
        return true;
      } else
        return false;
    },
    set$_mutex$_state(_state) {
      this._mutex$_state = A._asInt(_state);
    }
  };
  A.Context.prototype = {
    get$current() {
      var t1 = this._context$_current;
      return t1 == null ? A.current() : t1;
    },
    get$separator() {
      return this.style.get$separator();
    },
    absolute$1(part1) {
      var _this = this, _null = null;
      A._asString(part1);
      A._validateArgList("absolute", A._setArrayType([part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null], type$.JSArray_nullable_String));
      if (_this.isAbsolute$1(part1) && !_this.isRootRelative$1(part1))
        return part1;
      return _this.join$16(0, _this.get$current(), part1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    isAbsolute$1(path) {
      return this.style.rootLength$1(A._asString(path)) > 0;
    },
    isRelative$1(path) {
      return !this.isAbsolute$1(A._asString(path));
    },
    isRootRelative$1(path) {
      return this.style.isRootRelative$1(A._asString(path));
    },
    join$16(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16) {
      var parts = A._setArrayType([A._asString(part1), A._asStringQ(part2), A._asStringQ(part3), A._asStringQ(part4), A._asStringQ(part5), A._asStringQ(part6), A._asStringQ(part7), A._asStringQ(part8), A._asStringQ(part9), A._asStringQ(part10), A._asStringQ(part11), A._asStringQ(part12), A._asStringQ(part13), A._asStringQ(part14), A._asStringQ(part15), A._asStringQ(part16)], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(B.JSArray_methods.whereType$1$0(parts, type$.String));
    },
    joinAll$1(parts) {
      var buffer, t1, t2, needsSeparator, isAbsoluteAndNotRootRelative, t3, parsed, path, t4, _this = this;
      type$.Iterable_String._as(parts);
      buffer = A.StringBuffer$("");
      for (t1 = J.get$iterator$ax(J.where$1$ax(parts, new A.Context_joinAll_closure())), t2 = _this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false; A.boolConversionCheck(t1.moveNext$0());) {
        t3 = t1.get$current();
        if (_this.isRootRelative$1(t3) && isAbsoluteAndNotRootRelative) {
          parsed = _this._parse$1(t3);
          path = buffer.toString$0(0);
          parsed.set$root(B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true)));
          t4 = parsed.root;
          t4.toString;
          if (t2.needsSeparator$1(t4))
            J.$indexSet$ax(parsed.separators, 0, t2.get$separator());
          buffer.clear$0(0);
          buffer.write$1(parsed.toString$0(0));
        } else if (_this.isAbsolute$1(t3)) {
          isAbsoluteAndNotRootRelative = !_this.isRootRelative$1(t3);
          buffer.clear$0(0);
          buffer.write$1(t3);
        } else {
          if (A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(t3))) {
            if (0 >= t3.length)
              return A.ioore(t3, 0);
            t4 = t2.containsSeparator$1(t3[0]);
          } else
            t4 = false;
          if (!t4)
            if (needsSeparator)
              buffer.write$1(_this.get$separator());
          buffer.write$1(t3);
        }
        needsSeparator = t2.needsSeparator$1(t3);
      }
      return buffer.toString$0(0);
    },
    split$1(_, path) {
      var t1,
        parsed = this._parse$1(A._asString(path));
      parsed.set$parts(J.toList$0$ax(J.where$1$ax(parsed.parts, new A.Context_split_closure())));
      t1 = parsed.root;
      if (t1 != null)
        J.insert$2$ax(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(path) {
      var parsed;
      A._asString(path);
      if (!this._needsNormalization$1(path))
        return path;
      parsed = this._parse$1(path);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var codeUnits, t1, root, t2, i, start, previous, t3, previousPrevious, t4, codeUnit;
      A._asString(path);
      codeUnits = B.JSString_methods.get$codeUnits(path);
      t1 = this.style;
      root = t1.rootLength$1(path);
      if (root !== 0) {
        if (A.boolConversionCheck(J.$eq$(t1, $.$get$Style_windows())))
          for (t2 = J.getInterceptor$asx(codeUnits), i = 0; i < root; ++i)
            if (t2.$index(codeUnits, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      t2 = J.getInterceptor$asx(codeUnits);
      t3 = J.getInterceptor$(t1);
      i = start;
      previousPrevious = null;
      while (true) {
        t4 = t2.get$length(codeUnits);
        if (typeof t4 !== "number")
          return A.iae(t4);
        if (!(i < t4))
          break;
        codeUnit = t2.$index(codeUnits, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (A.boolConversionCheck(t3.$eq(t1, $.$get$Style_windows())) && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
        ++i;
        previousPrevious = previous;
        previous = codeUnit;
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$2$from(path, from) {
      var t1, fromParsed, pathParsed, t2, _this = this,
        _s26_ = 'Unable to find a path to "';
      A._asString(path);
      A._asStringQ(from);
      t1 = from == null;
      if (t1 && _this.isRelative$1(path))
        return _this.normalize$1(path);
      from = t1 ? _this.get$current() : _this.absolute$1(from);
      if (_this.isRelative$1(from) && _this.isAbsolute$1(path))
        return _this.normalize$1(path);
      if (_this.isRelative$1(path) || _this.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (_this.isRelative$1(path) && _this.isAbsolute$1(from))
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + A.S(from) + '".'));
      fromParsed = _this._parse$1(from);
      fromParsed.normalize$0();
      pathParsed = _this._parse$1(path);
      pathParsed.normalize$0();
      if (A.boolConversionCheck(J.get$isNotEmpty$asx(fromParsed.parts)) && J.$index$asx(fromParsed.parts, 0) === ".")
        return pathParsed.toString$0(0);
      if (!A.boolConversionCheck(J.$eq$(fromParsed.root, pathParsed.root))) {
        t1 = fromParsed.root;
        if (t1 != null) {
          t2 = pathParsed.root;
          t1 = t2 == null || !_this.style.pathsEqual$2(t1, t2);
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1)
        return pathParsed.toString$0(0);
      t1 = _this.style;
      while (true) {
        if (!(A.boolConversionCheck(J.get$isNotEmpty$asx(fromParsed.parts)) && A.boolConversionCheck(J.get$isNotEmpty$asx(pathParsed.parts)) && t1.pathsEqual$2(J.$index$asx(fromParsed.parts, 0), J.$index$asx(pathParsed.parts, 0))))
          break;
        J.removeAt$1$ax(fromParsed.parts, 0);
        J.removeAt$1$ax(fromParsed.separators, 1);
        J.removeAt$1$ax(pathParsed.parts, 0);
        J.removeAt$1$ax(pathParsed.separators, 1);
      }
      if (A.boolConversionCheck(J.get$isNotEmpty$asx(fromParsed.parts)) && J.$index$asx(fromParsed.parts, 0) === "..")
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + A.S(from) + '".'));
      t2 = type$.String;
      J.insertAll$2$ax(pathParsed.parts, 0, A.List_List$filled(J.get$length$asx(fromParsed.parts), "..", false, t2));
      J.$indexSet$ax(pathParsed.separators, 0, "");
      J.insertAll$2$ax(pathParsed.separators, 1, A.List_List$filled(J.get$length$asx(fromParsed.parts), t1.get$separator(), false, t2));
      if (A.boolConversionCheck(J.get$isEmpty$asx(pathParsed.parts)))
        return ".";
      t1 = J.get$length$asx(pathParsed.parts);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 1 && A.boolConversionCheck(J.$eq$(J.get$last$ax(pathParsed.parts), "."))) {
        J.removeLast$0$ax(pathParsed.parts);
        t1 = pathParsed.separators;
        t2 = J.getInterceptor$ax(t1);
        t2.removeLast$0(t1);
        t2.removeLast$0(t1);
        t2.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    isWithin$2($parent, child) {
      return this._isWithinOrEquals$2(A._asString($parent), A._asString(child)) === B._PathRelation_within;
    },
    _isWithinOrEquals$2($parent, child) {
      var relative, parentIsAbsolute, childIsAbsolute, t1, childIsRootRelative, parentIsRootRelative, result, exception, _this = this;
      $parent = A._asString($parent);
      child = A._asString(child);
      parentIsAbsolute = _this.isAbsolute$1($parent);
      childIsAbsolute = _this.isAbsolute$1(child);
      if (parentIsAbsolute && !childIsAbsolute) {
        child = _this.absolute$1(child);
        if (_this.style.isRootRelative$1($parent))
          $parent = _this.absolute$1($parent);
      } else if (childIsAbsolute && !parentIsAbsolute) {
        $parent = _this.absolute$1($parent);
        if (_this.style.isRootRelative$1(child))
          child = _this.absolute$1(child);
      } else if (childIsAbsolute && parentIsAbsolute) {
        t1 = _this.style;
        childIsRootRelative = t1.isRootRelative$1(child);
        parentIsRootRelative = t1.isRootRelative$1($parent);
        if (childIsRootRelative && !parentIsRootRelative)
          child = _this.absolute$1(child);
        else if (parentIsRootRelative && !childIsRootRelative)
          $parent = _this.absolute$1($parent);
      }
      result = _this._isWithinOrEqualsFast$2($parent, child);
      if (result !== B._PathRelation_inconclusive)
        return result;
      relative = null;
      try {
        relative = _this.relative$2$from(child, $parent);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.PathException)
          return B._PathRelation_different;
        else
          throw exception;
      }
      if (!_this.isRelative$1(relative))
        return B._PathRelation_different;
      if (A.boolConversionCheck(J.$eq$(relative, ".")))
        return B._PathRelation_equal;
      if (A.boolConversionCheck(J.$eq$(relative, "..")))
        return B._PathRelation_different;
      t1 = J.get$length$asx(relative);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 3 && A.boolConversionCheck(J.startsWith$1$s(relative, "..")) && _this.style.isSeparator$1(J.codeUnitAt$1$s(relative, 2)) ? B._PathRelation_different : B._PathRelation_within;
    },
    _isWithinOrEqualsFast$2($parent, child) {
      var t1, parentRootLength, childRootLength, t2, t3, i, childIndex, parentIndex, lastCodeUnit, lastParentSeparator, parentCodeUnit, childCodeUnit, parentIndex0, t4, direction, _this = this;
      A._asString($parent);
      A._asString(child);
      if ($parent === ".")
        $parent = "";
      t1 = _this.style;
      parentRootLength = t1.rootLength$1($parent);
      childRootLength = t1.rootLength$1(child);
      if (parentRootLength !== childRootLength)
        return B._PathRelation_different;
      for (t2 = $parent.length, t3 = child.length, i = 0; i < parentRootLength; ++i) {
        if (!(i < t2))
          return A.ioore($parent, i);
        if (!(i < t3))
          return A.ioore(child, i);
        if (!t1.codeUnitsEqual$2($parent.charCodeAt(i), child.charCodeAt(i)))
          return B._PathRelation_different;
      }
      childIndex = childRootLength;
      parentIndex = parentRootLength;
      lastCodeUnit = 47;
      lastParentSeparator = null;
      while (true) {
        if (!(parentIndex < t2 && childIndex < t3))
          break;
        c$0: {
          if (!(parentIndex >= 0 && parentIndex < t2))
            return A.ioore($parent, parentIndex);
          parentCodeUnit = $parent.charCodeAt(parentIndex);
          if (!(childIndex >= 0 && childIndex < t3))
            return A.ioore(child, childIndex);
          childCodeUnit = child.charCodeAt(childIndex);
          if (t1.codeUnitsEqual$2(parentCodeUnit, childCodeUnit)) {
            if (t1.isSeparator$1(parentCodeUnit))
              lastParentSeparator = parentIndex;
            ++parentIndex;
            ++childIndex;
            lastCodeUnit = parentCodeUnit;
            break c$0;
          }
          if (t1.isSeparator$1(parentCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            parentIndex0 = parentIndex + 1;
            lastParentSeparator = parentIndex;
            parentIndex = parentIndex0;
            break c$0;
          } else if (t1.isSeparator$1(childCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            ++childIndex;
            break c$0;
          }
          if (parentCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++parentIndex;
            if (parentIndex === t2)
              break;
            if (!(parentIndex < t2))
              return A.ioore($parent, parentIndex);
            parentCodeUnit = $parent.charCodeAt(parentIndex);
            if (t1.isSeparator$1(parentCodeUnit)) {
              parentIndex0 = parentIndex + 1;
              lastParentSeparator = parentIndex;
              parentIndex = parentIndex0;
              break c$0;
            }
            if (parentCodeUnit === 46) {
              ++parentIndex;
              if (parentIndex !== t2) {
                if (!(parentIndex < t2))
                  return A.ioore($parent, parentIndex);
                t4 = t1.isSeparator$1($parent.charCodeAt(parentIndex));
              } else
                t4 = true;
              if (t4)
                return B._PathRelation_inconclusive;
            }
          }
          if (childCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++childIndex;
            if (childIndex === t3)
              break;
            if (!(childIndex < t3))
              return A.ioore(child, childIndex);
            childCodeUnit = child.charCodeAt(childIndex);
            if (t1.isSeparator$1(childCodeUnit)) {
              ++childIndex;
              break c$0;
            }
            if (childCodeUnit === 46) {
              ++childIndex;
              if (childIndex !== t3) {
                if (!(childIndex < t3))
                  return A.ioore(child, childIndex);
                t2 = t1.isSeparator$1(child.charCodeAt(childIndex));
                t1 = t2;
              } else
                t1 = true;
              if (t1)
                return B._PathRelation_inconclusive;
            }
          }
          if (_this._pathDirection$2(child, childIndex) !== B._PathDirection_yLX)
            return B._PathRelation_inconclusive;
          if (_this._pathDirection$2($parent, parentIndex) !== B._PathDirection_yLX)
            return B._PathRelation_inconclusive;
          return B._PathRelation_different;
        }
      }
      if (childIndex === t3) {
        if (parentIndex !== t2) {
          if (!(parentIndex >= 0 && parentIndex < t2))
            return A.ioore($parent, parentIndex);
          t1 = t1.isSeparator$1($parent.charCodeAt(parentIndex));
        } else
          t1 = true;
        if (t1)
          lastParentSeparator = parentIndex;
        else if (lastParentSeparator == null)
          lastParentSeparator = A.max(0, parentRootLength - 1, type$.int);
        direction = _this._pathDirection$2($parent, lastParentSeparator);
        if (direction === B._PathDirection_8OV)
          return B._PathRelation_equal;
        return direction === B._PathDirection_3KU ? B._PathRelation_inconclusive : B._PathRelation_different;
      }
      direction = _this._pathDirection$2(child, childIndex);
      if (direction === B._PathDirection_8OV)
        return B._PathRelation_equal;
      if (direction === B._PathDirection_3KU)
        return B._PathRelation_inconclusive;
      if (!(childIndex >= 0 && childIndex < t3))
        return A.ioore(child, childIndex);
      return t1.isSeparator$1(child.charCodeAt(childIndex)) || t1.isSeparator$1(lastCodeUnit) ? B._PathRelation_within : B._PathRelation_different;
    },
    _pathDirection$2(path, index) {
      var t1, t2, i, depth, reachedRoot, t3, i0, t4;
      A._asString(path);
      A._asInt(index);
      for (t1 = path.length, t2 = this.style, i = index, depth = 0, reachedRoot = false; i < t1;) {
        while (true) {
          if (i < t1) {
            if (!(i >= 0))
              return A.ioore(path, i);
            t3 = t2.isSeparator$1(path.charCodeAt(i));
          } else
            t3 = false;
          if (!t3)
            break;
          ++i;
        }
        if (i === t1)
          break;
        i0 = i;
        while (true) {
          if (i0 < t1) {
            if (!(i0 >= 0))
              return A.ioore(path, i0);
            t3 = !t2.isSeparator$1(path.charCodeAt(i0));
          } else
            t3 = false;
          if (!t3)
            break;
          ++i0;
        }
        t3 = i0 - i;
        if (t3 === 1) {
          if (!(i >= 0 && i < t1))
            return A.ioore(path, i);
          t4 = path.charCodeAt(i) === 46;
        } else
          t4 = false;
        if (!t4) {
          t4 = false;
          if (t3 === 2) {
            if (!(i >= 0 && i < t1))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 46) {
              t3 = i + 1;
              if (!(t3 < t1))
                return A.ioore(path, t3);
              t3 = path.charCodeAt(t3) === 46;
            } else
              t3 = t4;
          } else
            t3 = t4;
          if (t3) {
            --depth;
            if (depth < 0)
              break;
            if (depth === 0)
              reachedRoot = true;
          } else
            ++depth;
        }
        if (i0 === t1)
          break;
        i = i0 + 1;
      }
      if (depth < 0)
        return B._PathDirection_3KU;
      if (depth === 0)
        return B._PathDirection_8OV;
      if (reachedRoot)
        return B._PathDirection_e7w;
      return B._PathDirection_yLX;
    },
    _parse$1(path) {
      return A.ParsedPath_ParsedPath$parse(A._asString(path), this.style);
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 26
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return B.JSString_methods.get$isNotEmpty(A._asString(part));
    },
    $signature: 26
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 35
  };
  A._PathDirection.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A._PathRelation.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var $length, t1;
      A._asString(path);
      $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      return A._asInt(codeUnit1) === A._asInt(codeUnit2);
    },
    pathsEqual$2(path1, path2) {
      return A._asString(path1) === A._asString(path2);
    }
  };
  A.ParsedPath.prototype = {
    get$isAbsolute() {
      return this.root != null;
    },
    removeTrailingSeparators$0() {
      var t1, t2, t3, _this = this;
      while (true) {
        if (!(A.boolConversionCheck(J.get$isNotEmpty$asx(_this.parts)) && A.boolConversionCheck(J.$eq$(J.get$last$ax(_this.parts), ""))))
          break;
        J.removeLast$0$ax(_this.parts);
        J.removeLast$0$ax(_this.separators);
      }
      if (A.boolConversionCheck(J.get$isNotEmpty$asx(_this.separators))) {
        t1 = _this.separators;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$sub();
        t2.$indexSet(t1, t3 - 1, "");
      }
    },
    normalize$0() {
      var t1, leadingDoubles, t2, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.get$iterator$ax(_this.parts), leadingDoubles = 0; A.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        if (!(t2 === "." || t2 === ""))
          if (t2 === "..")
            if (A.boolConversionCheck(B.JSArray_methods.get$isNotEmpty(newParts))) {
              if (0 >= newParts.length)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          else
            B.JSArray_methods.add$1(newParts, t2);
      }
      if (!A.boolConversionCheck(_this.get$isAbsolute()))
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (A.boolConversionCheck(B.JSArray_methods.get$isEmpty(newParts)) && !A.boolConversionCheck(_this.get$isAbsolute()))
        B.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      t1 = _this.style;
      _this.set$separators(A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String));
      t2 = true;
      if (A.boolConversionCheck(_this.get$isAbsolute()))
        if (!A.boolConversionCheck(B.JSArray_methods.get$isEmpty(newParts))) {
          t2 = _this.root;
          t2.toString;
          t2 = !t1.needsSeparator$1(t2);
        }
      if (t2)
        J.$indexSet$ax(_this.separators, 0, "");
      if (_this.root != null && A.boolConversionCheck(J.$eq$(t1, $.$get$Style_windows()))) {
        t1 = _this.root;
        t1.toString;
        _this.set$root(J.replaceAll$2$s(t1, "/", "\\"));
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var i, _this = this,
        builder = A.StringBuffer$(""),
        t1 = _this.root;
      if (t1 != null)
        builder.write$1(t1);
      i = 0;
      while (true) {
        t1 = J.get$length$asx(_this.parts);
        if (typeof t1 !== "number")
          return A.iae(t1);
        if (!(i < t1))
          break;
        builder.write$1(J.$index$asx(_this.separators, i));
        builder.write$1(J.$index$asx(_this.parts, i));
        ++i;
      }
      builder.write$1(J.get$last$ax(_this.separators));
      return builder.toString$0(0);
    },
    set$root(root) {
      this.root = A._asStringQ(root);
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + A.S(this.message);
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name();
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(A._asString(path), "/");
    },
    isSeparator$1(codeUnit) {
      return A._asInt(codeUnit) === 47;
    },
    needsSeparator$1(path) {
      var t1, t2;
      A._asString(path);
      if (A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(path))) {
        t1 = path.length;
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(path, t2);
        t2 = !this.isSeparator$1(path.charCodeAt(t2));
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1;
      A._asString(path);
      A._asBool(withDrive);
      if (A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(path))) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = this.isSeparator$1(path.charCodeAt(0));
      } else
        t1 = false;
      if (t1)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      A._asString(path);
      return false;
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(A._asString(path), "/");
    },
    isSeparator$1(codeUnit) {
      return A._asInt(codeUnit) === 47;
    },
    needsSeparator$1(path) {
      var t1, t2;
      A._asString(path);
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(path)))
        return false;
      t1 = path.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (!this.isSeparator$1(path.charCodeAt(t2)))
        return true;
      return A.boolConversionCheck(B.JSString_methods.endsWith$1(path, "://")) && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1, i, codeUnit, index;
      A._asString(path);
      A._asBool(withDrive);
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(path)))
        return 0;
      t1 = path.length;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (this.isSeparator$1(path.charCodeAt(0)))
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = path.charCodeAt(i);
        if (this.isSeparator$1(codeUnit))
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", A.boolConversionCheck(B.JSString_methods.startsWith$2(path, "//", i + 1)) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!A.boolConversionCheck(B.JSString_methods.startsWith$1(path, "file://")))
            return index;
          t1 = A.driveLetterEnd(path, index + 1);
          return t1 == null ? index : t1;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      var t1;
      A._asString(path);
      if (A.boolConversionCheck(B.JSString_methods.get$isNotEmpty(path))) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = this.isSeparator$1(path.charCodeAt(0));
      } else
        t1 = false;
      return t1;
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(A._asString(path), "/");
    },
    isSeparator$1(codeUnit) {
      A._asInt(codeUnit);
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t1, t2;
      A._asString(path);
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(path)))
        return false;
      t1 = path.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      return !this.isSeparator$1(path.charCodeAt(t2));
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1, t2, index;
      A._asString(path);
      A._asBool(withDrive);
      if (A.boolConversionCheck(B.JSString_methods.get$isEmpty(path)))
        return 0;
      t1 = path.length;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      if (path.charCodeAt(0) === 92) {
        if (t1 >= 2) {
          if (1 >= t1)
            return A.ioore(path, 1);
          t2 = path.charCodeAt(1) !== 92;
        } else
          t2 = true;
        if (t2)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.boolConversionCheck(A.isAlphabetic(path.charCodeAt(0))))
        return 0;
      if (path.charCodeAt(1) !== 58)
        return 0;
      if (!this.isSeparator$1(path.charCodeAt(2)))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(A._asString(path)) === 1;
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      A._asInt(codeUnit1);
      A._asInt(codeUnit2);
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) >>> 0 !== 32)
        return false;
      upperCase1 = (codeUnit1 | 32) >>> 0;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, t2, i;
      A._asString(path1);
      A._asString(path2);
      if (path1 === path2)
        return true;
      t1 = path1.length;
      t2 = path2.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        if (!(i < t2))
          return A.ioore(path2, i);
        if (!this.codeUnitsEqual$2(path1.charCodeAt(i), path2.charCodeAt(i)))
          return false;
      }
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.CommonDatabase.prototype = {};
  A.SqliteUpdateKind.prototype = {
    _enumToString$0() {
      return "SqliteUpdateKind." + A.S(this._core$_name);
    }
  };
  A.SqliteUpdate.prototype = {
    get$hashCode(_) {
      return A.Object_hash(this.kind, this.tableName, this.rowId, B.C_SentinelValue);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SqliteUpdate && A.boolConversionCheck(J.$eq$(other.kind, this.kind)) && A.boolConversionCheck(J.$eq$(other.tableName, this.tableName)) && A.boolConversionCheck(J.$eq$(other.rowId, this.rowId));
    },
    toString$0(_) {
      return "SqliteUpdate: " + A.S(this.kind) + " on " + A.S(this.tableName) + ", rowid = " + A.S(this.rowId);
    }
  };
  A.SqliteException.prototype = {
    toString$0(_) {
      var t1, _this = this,
        buffer = A.StringBuffer$("SqliteException(");
      buffer.write$1(_this.extendedResultCode);
      buffer.write$1("): ");
      t1 = _this.operation;
      buffer.write$1(t1 == null ? "" : "while " + A.S(t1) + ", ");
      buffer.write$1(_this.message);
      t1 = _this.explanation;
      if (t1 != null) {
        buffer.write$1(", ");
        buffer.write$1(t1);
      }
      t1 = _this.causingStatement;
      if (t1 != null) {
        buffer.writeln$0();
        buffer.write$1("  Causing statement: ");
        buffer.write$1(t1);
        t1 = _this.parametersToStatement;
        if (t1 != null)
          buffer.write$1(", parameters: " + J.join$1$ax(J.map$1$1$ax(t1, new A.SqliteException_toString_closure(), type$.String), ", "));
      }
      return buffer.toString$0(0);
    },
    $isException: 1
  };
  A.SqliteException_toString_closure.prototype = {
    call$1(e) {
      if (type$.Uint8List._is(e))
        return "blob (" + e.length + " bytes)";
      else
        return J.toString$0$(e);
    },
    $signature: 36
  };
  A.RawSqliteBindings.prototype = {};
  A.SqliteResult.prototype = {};
  A.RawSqliteDatabase.prototype = {};
  A.RawStatementCompiler.prototype = {};
  A.RawSqliteStatement.prototype = {};
  A.RawSqliteContext.prototype = {};
  A.RawSqliteValue.prototype = {};
  A.FinalizableDatabase.prototype = {
    dispose$0() {
      var t1, code, exception;
      for (t1 = J.get$iterator$ax(this._statements); A.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().dispose$0();
      t1 = this.database;
      code = t1.sqlite3_close_v2$0();
      exception = code !== 0 ? A.createExceptionRaw(this.bindings, t1, code, "closing database", null, null) : null;
      t1.deallocateAdditionalMemory$0();
      if (exception != null)
        throw A.wrapException(exception);
    }
  };
  A.DatabaseImplementation.prototype = {
    DatabaseImplementation$2(bindings, database) {
      $.$get$disposeFinalizer().attach$3$detach(this, this.finalizable, this);
    },
    wrapStatement$2(sql, stmt) {
      return A.StatementImplementation$(A._asString(sql), this, type$.RawSqliteStatement._as(stmt));
    },
    handleFinalized$1(stmt) {
      type$.StatementImplementation._as(stmt);
      if (!A.boolConversionCheck(this._database$_isClosed))
        J.remove$1$ax(this.finalizable._statements, stmt.finalizable);
    },
    _ensureOpen$0() {
      if (A.boolConversionCheck(this._database$_isClosed))
        throw A.wrapException(A.StateError$("This database has already been closed"));
    },
    _updatesHandler$0() {
      var _this = this,
        t1 = _this._updates;
      if (t1 == null) {
        t1 = A._StreamHandlers$(_this, new A.DatabaseImplementation__updatesHandler_closure(_this), new A.DatabaseImplementation__updatesHandler_closure0(_this), type$.SqliteUpdate, type$.void_Function);
        _this.set$_updates(t1);
      }
      return t1;
    },
    _rollbackHandler$0() {
      var _this = this,
        t1 = _this._rollbacks;
      if (t1 == null) {
        t1 = A._StreamHandlers$(_this, new A.DatabaseImplementation__rollbackHandler_closure(_this), new A.DatabaseImplementation__rollbackHandler_closure0(_this), type$.void, type$.void_Function);
        _this.set$_rollbacks(t1);
      }
      return t1;
    },
    _commitHandler$0() {
      var _this = this,
        t1 = _this._commits;
      if (t1 == null) {
        t1 = A._StreamHandlers$(_this, new A.DatabaseImplementation__commitHandler_closure(_this), new A.DatabaseImplementation__commitHandler_closure0(_this), type$.void, type$.bool_Function);
        _this.set$_commits(t1);
      }
      return t1;
    },
    dispose$0() {
      var t1, _this = this;
      if (A.boolConversionCheck(_this._database$_isClosed))
        return;
      $.$get$disposeFinalizer().detach$1(_this);
      _this._database$_isClosed = true;
      t1 = _this._updates;
      if (t1 != null)
        t1.close$0();
      t1 = _this._commits;
      if (t1 != null)
        t1.close$0();
      t1 = _this._rollbacks;
      if (t1 != null)
        t1.close$0();
      t1 = _this.database;
      t1.sqlite3_update_hook$1(null);
      t1.sqlite3_commit_hook$1(null);
      t1.sqlite3_rollback_hook$1(null);
      _this.finalizable.dispose$0();
    },
    execute$2(sql, parameters) {
      var stmt, result, _this = this;
      A._asString(sql);
      type$.List_nullable_Object._as(parameters);
      if (A.boolConversionCheck(J.get$isEmpty$asx(parameters))) {
        _this._ensureOpen$0();
        result = _this.database.sqlite3_exec$1(sql);
        if (result !== 0)
          A.throwException(_this, result, "executing", sql, parameters);
      } else {
        stmt = _this.prepare$2$checkNoTail(sql, true);
        try {
          stmt.execute$1(parameters);
        } finally {
          stmt.dispose$0();
        }
      }
    },
    get$autocommit() {
      return this.database.sqlite3_get_autocommit$0() !== 0;
    },
    _prepareInternal$5$checkNoTail$maxStatements$persistent$vtab(sql, checkNoTail, maxStatements, persistent, vtab) {
      var bytes, compiler, prepFlags, createdStatements, freeIntermediateResults, t1, offset, result, t2, endOffset, stmt, t3, _this = this;
      A._asString(sql);
      A._asBool(persistent);
      A._asBool(vtab);
      A._asIntQ(maxStatements);
      A._asBool(checkNoTail);
      _this._ensureOpen$0();
      bytes = B.C_Utf8Codec.encode$1(sql);
      compiler = _this.database.newCompiler$1(bytes);
      prepFlags = persistent ? 1 : 0;
      if (!vtab)
        prepFlags |= 4;
      createdStatements = A._setArrayType([], type$.JSArray_StatementImplementation);
      freeIntermediateResults = new A.DatabaseImplementation__prepareInternal_freeIntermediateResults(compiler, createdStatements);
      for (t1 = bytes.length, offset = 0; offset < t1; offset = endOffset) {
        result = compiler.sqlite3_prepare$3(offset, t1 - offset, prepFlags);
        t2 = result.resultCode;
        if (!A.boolConversionCheck(J.$eq$(t2, 0))) {
          freeIntermediateResults.call$0();
          A.throwException(_this, t2, "preparing statement", sql, null);
        }
        endOffset = compiler.get$endOffset();
        stmt = result.result;
        if (stmt != null)
          B.JSArray_methods.add$1(createdStatements, _this.wrapStatement$2(B.C_Utf8Codec.get$decoder().convert$3(bytes, offset, endOffset), stmt));
        if (createdStatements.length === maxStatements) {
          offset = endOffset;
          break;
        }
      }
      if (checkNoTail)
        for (; offset < t1;) {
          result = compiler.sqlite3_prepare$3(offset, t1 - offset, prepFlags);
          offset = compiler.get$endOffset();
          stmt = result.result;
          if (stmt != null) {
            B.JSArray_methods.add$1(createdStatements, _this.wrapStatement$2("", stmt));
            freeIntermediateResults.call$0();
            throw A.wrapException(A.ArgumentError$value(sql, "sql", "Had an unexpected trailing statement."));
          } else if (!A.boolConversionCheck(J.$eq$(result.resultCode, 0))) {
            freeIntermediateResults.call$0();
            throw A.wrapException(A.ArgumentError$value(sql, "sql", "Has trailing data after the first sql statement:"));
          }
        }
      compiler.close$0();
      for (t1 = B.JSArray_methods.get$iterator(createdStatements), t2 = _this.finalizable; A.boolConversionCheck(t1.moveNext$0());) {
        t3 = t1.get$current();
        J.add$1$ax(t2._statements, t3.finalizable);
      }
      return createdStatements;
    },
    prepare$2$checkNoTail(sql, checkNoTail) {
      var stmts, t1;
      A._asString(sql);
      stmts = this._prepareInternal$5$checkNoTail$maxStatements$persistent$vtab(sql, A._asBool(checkNoTail), 1, false, true);
      t1 = J.getInterceptor$asx(stmts);
      if (A.boolConversionCheck(t1.get$isEmpty(stmts)))
        throw A.wrapException(A.ArgumentError$value(sql, "sql", "Must contain an SQL statement."));
      return t1.get$first(stmts);
    },
    prepare$1(sql) {
      return this.prepare$2$checkNoTail(sql, false);
    },
    select$2(sql, parameters) {
      var stmt, t1;
      A._asString(sql);
      type$.List_nullable_Object._as(parameters);
      stmt = this.prepare$1(sql);
      try {
        t1 = stmt.select$1(parameters);
        return t1;
      } finally {
        stmt.dispose$0();
      }
    },
    get$updates() {
      return this._updatesHandler$0().get$stream();
    },
    get$rollbacks() {
      return this._rollbackHandler$0().get$stream();
    },
    get$commits() {
      return this._commitHandler$0().get$stream();
    },
    set$_updates(_updates) {
      this._updates = type$.nullable__StreamHandlers_of_SqliteUpdate_and_void_Function._as(_updates);
    },
    set$_rollbacks(_rollbacks) {
      this._rollbacks = type$.nullable__StreamHandlers_of_void_and_void_Function._as(_rollbacks);
    },
    set$_commits(_commits) {
      this._commits = type$.nullable__StreamHandlers_of_void_and_bool_Function._as(_commits);
    },
    $isCommonDatabase: 1
  };
  A.DatabaseImplementation__updatesHandler_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.database.sqlite3_update_hook$1(new A.DatabaseImplementation__updatesHandler__closure(t1));
    },
    $signature: 0
  };
  A.DatabaseImplementation__updatesHandler__closure.prototype = {
    call$3(kind, tableName, rowId) {
      var updateKind, update;
      A._asInt(kind);
      A._asString(tableName);
      A._asInt(rowId);
      switch (kind) {
        case 18:
          updateKind = B.SqliteUpdateKind_0;
          break;
        case 23:
          updateKind = B.SqliteUpdateKind_1;
          break;
        case 9:
          updateKind = B.SqliteUpdateKind_2;
          break;
        default:
          return;
      }
      update = A.SqliteUpdate$(updateKind, tableName, rowId);
      this.$this._updates.deliverAsyncEvent$1(update);
    },
    $signature: 37
  };
  A.DatabaseImplementation__updatesHandler_closure0.prototype = {
    call$0() {
      return this.$this.database.sqlite3_update_hook$1(null);
    },
    $signature: 0
  };
  A.DatabaseImplementation__rollbackHandler_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.database.sqlite3_rollback_hook$1(new A.DatabaseImplementation__rollbackHandler__closure(t1));
    },
    $signature: 0
  };
  A.DatabaseImplementation__rollbackHandler__closure.prototype = {
    call$0() {
      this.$this._rollbacks.deliverAsyncEvent$1(null);
    },
    $signature: 0
  };
  A.DatabaseImplementation__rollbackHandler_closure0.prototype = {
    call$0() {
      return this.$this.database.sqlite3_rollback_hook$1(null);
    },
    $signature: 0
  };
  A.DatabaseImplementation__commitHandler_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.database.sqlite3_commit_hook$1(new A.DatabaseImplementation__commitHandler__closure(t1));
    },
    $signature: 0
  };
  A.DatabaseImplementation__commitHandler__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        _0_0 = t1._commits.get$syncCallback(),
        complete = _0_0 == null || _0_0.call$0();
      if (complete)
        t1._commits.deliverAsyncEvent$1(null);
      return complete ? 0 : 1;
    },
    $signature: 38
  };
  A.DatabaseImplementation__commitHandler_closure0.prototype = {
    call$0() {
      return this.$this.database.sqlite3_commit_hook$1(null);
    },
    $signature: 0
  };
  A.DatabaseImplementation__prepareInternal_freeIntermediateResults.prototype = {
    call$0() {
      this.compiler.close$0();
      for (var t1 = J.get$iterator$ax(this.createdStatements); A.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().dispose$0();
    },
    $signature: 0
  };
  A._StreamHandlers.prototype = {
    get$stream() {
      var t1 = this._database$_stream;
      t1.toString;
      return t1;
    },
    _StreamHandlers$3$database$register$unregister(database, register, unregister, $T, SyncCallback) {
      this.set$_database$_stream(A.Stream_Stream$multi(new A._StreamHandlers_closure(this, $T), true, $T));
    },
    get$hasListener() {
      return A.boolConversionCheck(J.get$isNotEmpty$asx(this._asyncListeners)) || this._syncCallback != null;
    },
    get$syncCallback() {
      return this._syncCallback;
    },
    _addAsyncListener$1(listener) {
      var t1, _this = this;
      _this.$ti._eval$1("MultiStreamController<1>")._as(listener);
      t1 = A.boolConversionCheck(_this.get$hasListener());
      J.add$1$ax(_this._asyncListeners, listener);
      if (!t1)
        _this._register.call$0();
    },
    _removeAsyncListener$1(listener) {
      var _this = this;
      J.remove$1$ax(_this._asyncListeners, _this.$ti._eval$1("MultiStreamController<1>")._as(listener));
      if (!A.boolConversionCheck(_this.get$hasListener()) && !A.boolConversionCheck(_this._database$_database._database$_isClosed))
        _this._unregister.call$0();
    },
    deliverAsyncEvent$1($event) {
      var t1;
      this.$ti._precomputed1._as($event);
      for (t1 = J.get$iterator$ax(this._asyncListeners); A.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().add$1(0, $event);
    },
    close$0() {
      for (var t1 = J.get$iterator$ax(this._asyncListeners); A.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().close$0();
      this.set$_syncCallback(null);
    },
    set$_syncCallback(_syncCallback) {
      this._syncCallback = this.$ti._eval$1("2?")._as(_syncCallback);
    },
    set$_database$_stream(_stream) {
      this._database$_stream = this.$ti._eval$1("Stream<1>?")._as(_stream);
    }
  };
  A._StreamHandlers_closure.prototype = {
    call$1(newListener) {
      var t1, t2;
      this.T._eval$1("MultiStreamController<0>")._as(newListener);
      t1 = this.$this;
      if (A.boolConversionCheck(t1._database$_database._database$_isClosed)) {
        newListener.close$0();
        return;
      }
      t2 = new A._StreamHandlers_closure_addListener(t1, newListener);
      t1 = new A._StreamHandlers_closure_removeListener(t1, newListener);
      newListener.set$onPause(t1);
      newListener.set$onCancel(t1);
      newListener.set$onResume(t2);
      t2.call$0();
    },
    $signature() {
      return this.T._eval$1("~(MultiStreamController<0>)");
    }
  };
  A._StreamHandlers_closure_addListener.prototype = {
    call$0() {
      this.$this._addAsyncListener$1(this.newListener);
    },
    $signature: 0
  };
  A._StreamHandlers_closure_removeListener.prototype = {
    call$0() {
      this.$this._removeAsyncListener$1(this.newListener);
    },
    $signature: 0
  };
  A.FinalizablePart.prototype = {};
  A.disposeFinalizer_closure.prototype = {
    call$1(element) {
      type$.FinalizablePart._as(element).dispose$0();
    },
    $signature: 39
  };
  A.Sqlite3Implementation.prototype = {
    wrapDatabase$1(rawDb) {
      return A.DatabaseImplementation$(this.bindings, type$.RawSqliteDatabase._as(rawDb));
    },
    initialize$0() {
      var _null = null,
        rc = this.bindings.sqlite3_initialize$0();
      if (rc !== 0)
        throw A.wrapException(A.SqliteException$(rc, "Error returned by sqlite3_initialize", _null, _null, _null, _null));
    },
    open$2$vfs(filename, vfs) {
      var t1, result, t2, t3, exception;
      A._asString(filename);
      A._asStringQ(vfs);
      this.initialize$0();
      switch (2) {
        case 2:
          break;
      }
      t1 = this.bindings;
      result = t1.sqlite3_open_v2$3(filename, 6, vfs);
      t2 = result.resultCode;
      if (!A.boolConversionCheck(J.$eq$(t2, 0))) {
        t3 = result.result;
        exception = A.createExceptionRaw(t1, t3, t2, "opening the database", null, null);
        t3.sqlite3_close_v2$0();
        throw A.wrapException(exception);
      }
      t1 = result.result;
      t1.sqlite3_extended_result_codes$1(1);
      return this.wrapDatabase$1(t1);
    },
    registerVirtualFileSystem$1(vfs) {
      type$.VirtualFileSystem._as(vfs);
      this.bindings.registerVirtualFileSystem$2(vfs, 0);
    },
    unregisterVirtualFileSystem$1(vfs) {
      this.bindings.unregisterVirtualFileSystem$1(type$.VirtualFileSystem._as(vfs));
    },
    $isCommonSqlite3: 1
  };
  A.FinalizableStatement.prototype = {
    dispose$0() {
      var _this = this;
      if (!A.boolConversionCheck(_this._statement$_closed)) {
        _this._statement$_closed = true;
        _this._reset$0();
        _this._deallocateArguments$0();
        _this.statement.sqlite3_finalize$0();
      }
    },
    _reset$0() {
      if (!A.boolConversionCheck(this._inResetState)) {
        this.statement.sqlite3_reset$0();
        this._inResetState = true;
      }
    },
    _deallocateArguments$0() {
      this.statement.deallocateArguments$0();
    }
  };
  A.StatementImplementation.prototype = {
    get$_statement$_columnNames() {
      var i,
        t1 = this.statement,
        columnCount = t1.sqlite3_column_count$0(),
        t2 = A._setArrayType([], type$.JSArray_String);
      for (i = 0; i < columnCount; ++i)
        t2.push(t1.sqlite3_column_name$1(i));
      return t2;
    },
    get$_tableNames() {
      var t1 = this.statement;
      if (!A.boolConversionCheck(t1.get$supportsReadingTableNameForColumn()))
        return null;
      return A.List_List$generate(t1.sqlite3_column_count$0(), t1.get$sqlite3_column_table_name(), type$.nullable_String);
    },
    _ensureNotFinalized$0() {
      if (A.boolConversionCheck(this.finalizable._statement$_closed))
        throw A.wrapException(A.StateError$("Tried to operate on a released prepared statement"));
    },
    _ensureMatchingParameters$1(parameters) {
      var $length, count;
      type$.nullable_List_nullable_Object._as(parameters);
      $length = parameters == null ? null : J.get$length$asx(parameters);
      if ($length == null)
        $length = 0;
      count = this.get$parameterCount();
      if ($length !== count)
        throw A.wrapException(A.ArgumentError$value(parameters, "parameters", "Expected " + A.S(count) + " parameters, got " + A.S($length)));
    },
    _step$0() {
      return this.statement.sqlite3_step$0();
    },
    _reset$0() {
      var t1 = this.finalizable;
      t1._reset$0();
      t1._deallocateArguments$0();
    },
    _execute$0() {
      var result, _this = this,
        t1 = _this.finalizable._inResetState = false;
      do
        result = _this._step$0();
      while (result === 100);
      if (result !== 0 ? result !== 101 : t1)
        A.throwException(_this.database, result, "executing statement", _this.sql, _this._latestArguments);
    },
    _selectResults$0() {
      var t2, columnCount, resultCode, t3, i, _this = this,
        rows = A._setArrayType([], type$.JSArray_List_nullable_Object),
        t1 = _this.finalizable._inResetState = false;
      for (t2 = _this.statement, columnCount = -1; resultCode = _this._step$0(), resultCode === 100;) {
        if (columnCount === -1)
          columnCount = t2.sqlite3_column_count$0();
        t3 = [];
        for (i = 0; i < columnCount; ++i)
          t3.push(_this._readValue$1(i));
        B.JSArray_methods.add$1(rows, t3);
      }
      if (resultCode !== 0 ? resultCode !== 101 : t1)
        A.throwException(_this.database, resultCode, "selecting from statement", _this.sql, _this._latestArguments);
      return A.ResultSet$(_this.get$_statement$_columnNames(), _this.get$_tableNames(), rows);
    },
    _readValue$1(index) {
      var t1;
      A._asInt(index);
      t1 = this.statement;
      switch (t1.sqlite3_column_type$1(index)) {
        case 1:
          return t1.sqlite3_column_int64OrBigInt$1(index);
        case 2:
          return t1.sqlite3_column_double$1(index);
        case 3:
          return t1.sqlite3_column_text$1(index);
        case 4:
          return t1.sqlite3_column_bytes$1(index);
        case 5:
        default:
          return null;
      }
    },
    _bindIndexedParams$1(params) {
      var t1, i, t2;
      type$.nullable_List_nullable_Object._as(params);
      this._ensureMatchingParameters$1(params);
      if (params == null || A.boolConversionCheck(J.get$isEmpty$asx(params)))
        return;
      t1 = J.getInterceptor$asx(params);
      i = 1;
      while (true) {
        t2 = t1.get$length(params);
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(i <= t2))
          break;
        this._bindParam$2(t1.$index(params, i - 1), i);
        ++i;
      }
      this._latestArguments = params;
    },
    _bindParam$2(param, i) {
      var t1, _this = this;
      A._asInt(i);
      $label0$0: {
        if (param == null) {
          t1 = _this.statement.sqlite3_bind_null$1(i);
          break $label0$0;
        }
        if (A._isInt(param)) {
          t1 = _this.statement.sqlite3_bind_int64$2(i, param);
          break $label0$0;
        }
        if (param instanceof A._BigIntImpl) {
          t1 = _this.statement.sqlite3_bind_int64BigInt$2(i, A.BigIntRangeCheck_get_checkRange(param));
          break $label0$0;
        }
        if (A._isBool(param)) {
          t1 = param ? 1 : 0;
          t1 = _this.statement.sqlite3_bind_int64$2(i, t1);
          break $label0$0;
        }
        if (typeof param == "number") {
          t1 = _this.statement.sqlite3_bind_double$2(i, param);
          break $label0$0;
        }
        if (typeof param == "string") {
          t1 = _this.statement.sqlite3_bind_text$2(i, param);
          break $label0$0;
        }
        if (type$.List_int._is(param)) {
          t1 = _this.statement.sqlite3_bind_blob64$2(i, param);
          break $label0$0;
        }
        t1 = A.throwExpression(A.ArgumentError$value(param, "params[" + i + "]", "Allowed parameters must either be null or bool, int, num, String or List<int>."));
      }
      return t1;
    },
    _bindParams$1(parameters) {
      $label0$0: {
        this._bindIndexedParams$1(type$.StatementParameters._as(parameters).parameters);
        break $label0$0;
      }
    },
    dispose$0() {
      var _this = this,
        t1 = _this.finalizable;
      if (!A.boolConversionCheck(t1._statement$_closed)) {
        $.$get$disposeFinalizer().detach$1(_this);
        t1.dispose$0();
        _this.database.handleFinalized$1(_this);
      }
    },
    selectWith$1(parameters) {
      var _this = this;
      type$.StatementParameters._as(parameters);
      _this._ensureNotFinalized$0();
      _this._reset$0();
      _this._bindParams$1(parameters);
      return _this._selectResults$0();
    },
    executeWith$1(parameters) {
      var _this = this;
      type$.StatementParameters._as(parameters);
      _this._ensureNotFinalized$0();
      _this._reset$0();
      _this._bindParams$1(parameters);
      _this._execute$0();
    },
    get$parameterCount() {
      return this.statement.sqlite3_bind_parameter_count$0();
    }
  };
  A.InMemoryFileSystem.prototype = {
    xAccess$2(path, flags) {
      A._asString(path);
      A._asInt(flags);
      return this.fileData.containsKey$1(path) ? 1 : 0;
    },
    xDelete$2(path, syncDir) {
      A._asString(path);
      A._asInt(syncDir);
      J.remove$1$ax(this.fileData, path);
    },
    xFullPathName$1(path) {
      A._asString(path);
      return $.$get$url().normalize$1("/" + path);
    },
    xOpen$2(path, flags) {
      var pathStr, t1;
      type$.Sqlite3Filename._as(path);
      A._asInt(flags);
      pathStr = path.path;
      if (pathStr == null)
        pathStr = A.GenerateFilename_randomFileName(this.random, "/");
      t1 = this.fileData;
      if (!t1.containsKey$1(pathStr))
        if ((flags & 4) !== 0)
          J.$indexSet$ax(t1, pathStr, A.Uint8Buffer$());
        else
          throw A.wrapException(A.VfsException$(14));
      return new A._Record_2_file_outFlags(A._InMemoryFile$(this, pathStr, (flags & 8) !== 0), 0);
    },
    xSleep$1(duration) {
      type$.Duration._as(duration);
    }
  };
  A._InMemoryFile.prototype = {
    readInto$2(buffer, offset) {
      var file, t1, available;
      type$.Uint8List._as(buffer);
      A._asInt(offset);
      file = J.$index$asx(this.vfs.fileData, this.path);
      if (file != null) {
        t1 = file.get$length(0);
        if (typeof t1 !== "number")
          return t1.$le();
        t1 = t1 <= offset;
      } else
        t1 = true;
      if (t1)
        return 0;
      t1 = file.get$length(0);
      if (typeof t1 !== "number")
        return t1.$sub();
      available = A.min(buffer.length, t1 - offset, type$.int);
      B.NativeUint8List_methods.setRange$4(buffer, 0, available, J.asUint8List$2$x(file.get$buffer(0), 0, file.get$length(0)), offset);
      return available;
    },
    xCheckReservedLock$0() {
      var t1 = this._lockMode;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 2 ? 1 : 0;
    },
    xClose$0() {
      if (A.boolConversionCheck(this.deleteOnClose))
        this.vfs.xDelete$2(this.path, 0);
    },
    xFileSize$0() {
      return J.$index$asx(this.vfs.fileData, this.path).get$length(0);
    },
    xLock$1(mode) {
      this._lockMode = A._asInt(mode);
    },
    xSync$1(flags) {
      A._asInt(flags);
    },
    xTruncate$1(size) {
      var t1, t2, t3, file;
      A._asInt(size);
      t1 = this.vfs.fileData;
      t2 = this.path;
      t3 = J.getInterceptor$asx(t1);
      file = t3.$index(t1, t2);
      if (file == null) {
        t3.$indexSet(t1, t2, A.Uint8Buffer$());
        t3.$index(t1, t2).set$length(0, size);
      } else
        file.set$length(0, size);
    },
    xUnlock$1(mode) {
      this._lockMode = A._asInt(mode);
    },
    xWrite$2(buffer, fileOffset) {
      var t1, t2, t3, file, endIndex;
      type$.Uint8List._as(buffer);
      A._asInt(fileOffset);
      t1 = this.vfs.fileData;
      t2 = this.path;
      t3 = J.getInterceptor$asx(t1);
      file = t3.$index(t1, t2);
      if (file == null) {
        file = A.Uint8Buffer$();
        t3.$indexSet(t1, t2, file);
      }
      endIndex = fileOffset + buffer.length;
      t1 = file.get$length(0);
      if (typeof t1 !== "number")
        return A.iae(t1);
      if (endIndex > t1)
        file.set$length(0, endIndex);
      file.setRange$3(0, fileOffset, endIndex, buffer);
    }
  };
  A.Cursor.prototype = {
    get$columnNames() {
      return this._columnNames;
    },
    Cursor$2(_columnNames, tableNames) {
      this._calculateIndexes$0();
    },
    _calculateIndexes$0() {
      var t2, t3, t4, t5,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int);
      for (t2 = this._columnNames, t3 = J.getInterceptor$ax(t2), t4 = t3.get$iterator(t2); A.boolConversionCheck(t4.moveNext$0());) {
        t5 = t4.get$current();
        t1.$indexSet(0, t5, t3.lastIndexOf$1(t2, t5));
      }
      this.set$_calculatedIndexes(t1);
    },
    set$_calculatedIndexes(_calculatedIndexes) {
      this._calculatedIndexes = type$.Map_String_int._as(_calculatedIndexes);
    }
  };
  A.ResultSet.prototype = {
    get$iterator(_) {
      return A._ResultIterator$(this);
    },
    $index(_, index) {
      return A.Row$(this, J.$index$asx(this.rows, A._asInt(index)));
    },
    $indexSet(_, index, value) {
      A._asInt(index);
      type$.Row._as(value);
      throw A.wrapException(A.UnsupportedError$("Can't change rows from a result set"));
    },
    get$length(_) {
      return J.get$length$asx(this.rows);
    },
    $isEfficientLengthIterable: 1,
    $isHideEfficientLengthIterable: 1,
    $isListBase: 1,
    $isIterable: 1,
    $is_ListIterable: 1,
    $isList: 1,
    $isNonGrowableListMixin: 1
  };
  A.Row.prototype = {
    columnAt$1(i) {
      return J.$index$asx(this._result_set$_data, A._asInt(i));
    },
    $index(_, key) {
      var index;
      if (typeof key != "string") {
        if (A._isInt(key))
          return J.$index$asx(this._result_set$_data, key);
        return null;
      }
      index = J.$index$asx(this._result._calculatedIndexes, key);
      if (index == null)
        return null;
      return this.columnAt$1(index);
    },
    get$keys() {
      return this._result.get$columnNames();
    },
    get$values() {
      return this._result_set$_data;
    },
    $isMapBase: 1,
    $isMap: 1,
    $isUnmodifiableMapMixin: 1
  };
  A._ResultIterator.prototype = {
    get$current() {
      var t1 = this.result;
      return A.Row$(t1, J.$index$asx(t1.rows, this.index));
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$index(t1 + 1);
      t1 = _this.index;
      t2 = J.get$length$asx(_this.result.rows);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return t1 < t2;
    },
    set$index(index) {
      this.index = A._asInt(index);
    },
    $isIterator: 1
  };
  A._ResultSet_Cursor_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1, $isListBase: 1, $isIterable: 1, $is_ListIterable: 1, $isList: 1};
  A._ResultSet_Cursor_ListMixin_NonGrowableListMixin.prototype = {$isEfficientLengthIterable: 1, $isHideEfficientLengthIterable: 1, $isListBase: 1, $isIterable: 1, $is_ListIterable: 1, $isList: 1, $isNonGrowableListMixin: 1};
  A._Row_Object_UnmodifiableMapMixin.prototype = {$isMap: 1, $isUnmodifiableMapMixin: 1};
  A._Row_Object_UnmodifiableMapMixin_MapMixin.prototype = {$isMapBase: 1, $isMap: 1, $isUnmodifiableMapMixin: 1};
  A.OpenMode.prototype = {
    _enumToString$0() {
      return "OpenMode." + A.S(this._core$_name);
    }
  };
  A.CommonPreparedStatement.prototype = {
    execute$1(parameters) {
      return this.executeWith$1(A.IndexedParameters$(type$.List_nullable_Object._as(parameters)));
    },
    select$1(parameters) {
      return this.selectWith$1(A.IndexedParameters$(type$.List_nullable_Object._as(parameters)));
    }
  };
  A.IndexedParameters.prototype = {$isStatementParameters: 1};
  A.VfsException.prototype = {
    toString$0(_) {
      return "VfsException(" + A.S(this.returnCode) + ")";
    },
    $isException: 1
  };
  A.Sqlite3Filename.prototype = {};
  A.VirtualFileSystem.prototype = {};
  A.BaseVirtualFileSystem.prototype = {
    xRandomness$1(target) {
      A.BaseVirtualFileSystem_generateRandomness(type$.Uint8List._as(target), this.random);
    },
    xCurrentTime$0() {
      return A.DateTime$now();
    }
  };
  A.BaseVfsFile.prototype = {
    get$xDeviceCharacteristics() {
      return 0;
    },
    xRead$2(target, fileOffset) {
      var bytesRead, t1;
      type$.Uint8List._as(target);
      bytesRead = this.readInto$2(target, A._asInt(fileOffset));
      t1 = target.length;
      if (bytesRead < t1) {
        B.NativeUint8List_methods.fillRange$3(target, bytesRead, t1, 0);
        throw A.wrapException(B.VfsException_522);
      }
    },
    $isVirtualFileSystemFile: 1
  };
  A.WasmSqliteBindings.prototype = {
    sqlite3_errstr$1(extendedErrorCode) {
      var t1;
      A._asInt(extendedErrorCode);
      t1 = this.bindings;
      return A.WrappedMemory_readString(t1.memory, t1.sqlite3_errstr$1(extendedErrorCode));
    },
    sqlite3_open_v2$3($name, flags, zVfs) {
      var t1, namePtr, outDb, t2, vfsPtr, result, dbPtr;
      A._asString($name);
      A._asInt(flags);
      A._asStringQ(zVfs);
      t1 = this.bindings;
      namePtr = t1.allocateZeroTerminated$1($name);
      outDb = t1.malloc$1(4);
      t2 = zVfs == null;
      vfsPtr = t2 ? 0 : t1.allocateZeroTerminated$1(zVfs);
      result = t1.sqlite3_open_v2$4(namePtr, outDb, flags, vfsPtr);
      dbPtr = A.WrappedMemory_int32ValueOfPointer(t1.memory, outDb);
      t1.free$1(namePtr);
      t1.free$1(vfsPtr);
      if (!t2)
        t1.free$1(vfsPtr);
      return A.SqliteResult$(result, A.WasmDatabase$(t1, dbPtr), type$.RawSqliteDatabase);
    },
    sqlite3_initialize$0() {
      return this.bindings.sqlite3_initialize$0();
    },
    registerVirtualFileSystem$2(vfs, makeDefault) {
      var t1, ptr;
      type$.VirtualFileSystem._as(vfs);
      A._asInt(makeDefault);
      t1 = this.bindings;
      ptr = t1.dart_sqlite3_register_vfs$3(t1.allocateZeroTerminated$1(vfs.name), t1.callbacks.registerVfs$1(vfs), makeDefault);
      if (ptr === 0)
        throw A.wrapException(A.StateError$("could not register vfs"));
      J.$indexSet$ax($.$get$DartCallbacks_sqliteVfsPointer(), vfs, ptr);
    },
    unregisterVirtualFileSystem$1(vfs) {
      var ptr, zNamePtr, t1, dartId;
      type$.VirtualFileSystem._as(vfs);
      ptr = J.$index$asx($.$get$DartCallbacks_sqliteVfsPointer(), vfs);
      if (ptr == null)
        throw A.wrapException(A.StateError$("vfs has not been registered"));
      zNamePtr = ptr + 16;
      t1 = this.bindings;
      t1.sqlite3_vfs_unregister$1(ptr);
      t1.free$1(zNamePtr);
      dartId = A.WrappedMemory_int32ValueOfPointer(t1.memory, zNamePtr + 4);
      J.remove$1$ax(t1.callbacks.registeredVfs, dartId);
    }
  };
  A.WasmDatabase.prototype = {
    sqlite3_close_v2$0() {
      return this.bindings.sqlite3_close_v2$1(this.db);
    },
    sqlite3_errmsg$0() {
      var t1 = this.bindings;
      return A.WrappedMemory_readString(t1.memory, t1.sqlite3_errmsg$1(this.db));
    },
    sqlite3_extended_errcode$0() {
      return this.bindings.sqlite3_extended_errcode$1(this.db);
    },
    sqlite3_extended_result_codes$1(onoff) {
      this.bindings.sqlite3_extended_result_codes$2(this.db, A._asInt(onoff));
    },
    deallocateAdditionalMemory$0() {
    },
    newCompiler$1(utf8EncodedSql) {
      return A.WasmStatementCompiler$(this, this.bindings.allocateBytes$1(type$.List_int._as(utf8EncodedSql)));
    },
    sqlite3_exec$1(sql) {
      var t1 = this.bindings,
        stmt = t1.allocateZeroTerminated$1(A._asString(sql)),
        result = t1.sqlite3_exec$5(this.db, stmt, 0, 0, 0);
      t1.free$1(stmt);
      return result;
    },
    sqlite3_update_hook$1(hook) {
      var t1, t2;
      type$.nullable_void_Function_int_String_int._as(hook);
      t1 = this.bindings;
      t1.callbacks.set$installedUpdateHook(hook);
      t2 = hook != null ? 1 : -1;
      t1.dart_sqlite3_updates$2(this.db, t2);
    },
    sqlite3_commit_hook$1(hook) {
      var t1, t2;
      type$.nullable_int_Function._as(hook);
      t1 = this.bindings;
      t1.callbacks.set$installedCommitHook(hook);
      t2 = hook != null ? 1 : -1;
      t1.dart_sqlite3_commits$2(this.db, t2);
    },
    sqlite3_rollback_hook$1(hook) {
      var t1, t2;
      type$.nullable_void_Function._as(hook);
      t1 = this.bindings;
      t1.callbacks.set$installedRollbackHook(hook);
      t2 = hook != null ? 1 : -1;
      t1.dart_sqlite3_rollbacks$2(this.db, t2);
    },
    sqlite3_get_autocommit$0() {
      return this.bindings.sqlite3_get_autocommit$1(this.db);
    }
  };
  A.WasmStatementCompiler.prototype = {
    close$0() {
      var _this = this,
        t1 = _this.database.bindings;
      t1.free$1(_this.sql);
      t1.free$1(_this.stmtOut);
      t1.free$1(_this.pzTail);
    },
    get$endOffset() {
      var t1 = A.WrappedMemory_int32ValueOfPointer(this.database.bindings.memory, this.pzTail),
        t2 = this.sql;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return A.iae(t2);
      return t1 - t2;
    },
    sqlite3_prepare$3(byteOffset, $length, prepFlag) {
      var t1, t2, t3, t4, t5, result, stmt, libraryStatement, _this = this;
      A._asInt(byteOffset);
      A._asInt($length);
      A._asInt(prepFlag);
      t1 = _this.database;
      t2 = t1.bindings;
      t3 = t1.db;
      t4 = _this.sql;
      if (typeof t4 !== "number")
        return t4.$add();
      t5 = _this.stmtOut;
      result = t2.sqlite3_prepare_v3$6(t3, t4 + byteOffset, $length, prepFlag, t5, _this.pzTail);
      stmt = A.WrappedMemory_int32ValueOfPointer(t2.memory, t5);
      libraryStatement = stmt === 0 ? null : A.WasmStatement$(t1, stmt);
      return A.SqliteResult$(result, libraryStatement, type$.nullable_RawSqliteStatement);
    }
  };
  A.WasmStatement.prototype = {
    deallocateArguments$0() {
      var t1, t2, t3, t4;
      for (t1 = this._allocatedArguments, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1), t4 = this.bindings; A.boolConversionCheck(t3.moveNext$0());)
        t4.free$1(t3.get$current());
      t2.clear$0(t1);
    },
    sqlite3_bind_blob64$2(index, value) {
      var t1, ptr;
      A._asInt(index);
      type$.List_int._as(value);
      t1 = this.bindings;
      ptr = t1.allocateBytes$1(value);
      J.add$1$ax(this._allocatedArguments, ptr);
      t1.sqlite3_bind_blob64$5(this.stmt, index, ptr, J.get$length$asx(value), 0);
    },
    sqlite3_bind_double$2(index, value) {
      this.bindings.sqlite3_bind_double$3(this.stmt, A._asInt(index), A._asDouble(value));
    },
    sqlite3_bind_int64$2(index, value) {
      this.bindings.sqlite3_bind_int$3(this.stmt, A._asInt(index), A._asInt(value));
    },
    sqlite3_bind_int64BigInt$2(index, value) {
      this.bindings.sqlite3_bind_int64$3(this.stmt, A._asInt(index), type$.BigInt._as(value));
    },
    sqlite3_bind_null$1(index) {
      this.bindings.sqlite3_bind_null$2(this.stmt, A._asInt(index));
    },
    sqlite3_bind_parameter_count$0() {
      return this.bindings.sqlite3_bind_parameter_count$1(this.stmt);
    },
    sqlite3_bind_text$2(index, value) {
      var encoded, t1, ptr;
      A._asInt(index);
      encoded = B.C_Utf8Codec.encode$1(A._asString(value));
      t1 = this.bindings;
      ptr = t1.allocateBytes$1(encoded);
      J.add$1$ax(this._allocatedArguments, ptr);
      t1.sqlite3_bind_text$5(this.stmt, index, ptr, encoded.length, 0);
    },
    sqlite3_column_bytes$1(index) {
      var t1, t2, $length, ptr;
      A._asInt(index);
      t1 = this.bindings;
      t2 = this.stmt;
      $length = t1.sqlite3_column_bytes$2(t2, index);
      ptr = t1.sqlite3_column_blob$2(t2, index);
      return A.WrappedMemory_copyRange(t1.memory, ptr, $length);
    },
    sqlite3_column_count$0() {
      return this.bindings.sqlite3_column_count$1(this.stmt);
    },
    sqlite3_column_double$1(index) {
      return this.bindings.sqlite3_column_double$2(this.stmt, A._asInt(index));
    },
    sqlite3_column_int64OrBigInt$1(index) {
      return A.JsBigInt_toDart(this.bindings.sqlite3_column_int64$2(this.stmt, A._asInt(index)));
    },
    sqlite3_column_name$1(index) {
      var t1 = this.bindings,
        namePtr = t1.sqlite3_column_name$2(this.stmt, A._asInt(index));
      return A.WrappedMemory_readString(t1.memory, namePtr);
    },
    sqlite3_column_table_name$1(index) {
      A._asInt(index);
      return null;
    },
    sqlite3_column_text$1(index) {
      var t1 = this.bindings,
        ptr = t1.sqlite3_column_text$2(this.stmt, A._asInt(index));
      return A.WrappedMemory_readString(t1.memory, ptr);
    },
    sqlite3_column_type$1(index) {
      return this.bindings.sqlite3_column_type$2(this.stmt, A._asInt(index));
    },
    sqlite3_finalize$0() {
      this.bindings.sqlite3_finalize$1(this.stmt);
    },
    sqlite3_reset$0() {
      this.bindings.sqlite3_reset$1(this.stmt);
    },
    sqlite3_step$0() {
      return this.bindings.sqlite3_step$1(this.stmt);
    },
    get$supportsReadingTableNameForColumn() {
      return false;
    }
  };
  A.WasmContext.prototype = {};
  A.WasmValue.prototype = {};
  A.WasmValueList.prototype = {
    set$length(_, value) {
      A._asInt(value);
      throw A.wrapException(A.UnsupportedError$("Setting length in WasmValueList"));
    },
    $index(_, index) {
      var t1, t2, t3;
      A._asInt(index);
      t1 = this.bindings;
      t2 = t1.memory;
      t3 = this.value;
      if (typeof t3 !== "number")
        return t3.$add();
      return A.WasmValue$(t1, A.WrappedMemory_int32ValueOfPointer(t2, t3 + index * 4));
    },
    $indexSet(_, index, value) {
      A._asInt(index);
      type$.WasmValue._as(value);
      throw A.wrapException(A.UnsupportedError$("Setting element in WasmValueList"));
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A._CursorReader.prototype = {
    cancel$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$cancel$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._onSuccess;
              A.unawaited(t1 == null ? null : t1.cancel$0());
              t1 = $async$self._indexed_db0$_onError;
              A.unawaited(t1 == null ? null : t1.cancel$0());
              $async$self._indexed_db0$_onError = $async$self._onSuccess = null;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$cancel$0, $async$completer);
    },
    get$current() {
      var t1 = this._cursor;
      return t1 == null ? A.throwExpression(A.StateError$("Await moveNext() first")) : t1;
    },
    moveNext$0() {
      var completer, _this = this,
        t1 = _this._cursor;
      if (t1 != null)
        A._callMethodUnchecked0(t1, "continue", type$.void);
      completer = A.Completer_Completer$sync(type$.bool);
      t1 = _this._cursorRequest;
      _this._onSuccess = B.EventStreamProvider_success.forTarget$1(t1).listen$1(new A._CursorReader_moveNext_closure(_this, completer));
      _this._indexed_db0$_onError = B.EventStreamProvider_error.forTarget$1(t1).listen$1(new A._CursorReader_moveNext_closure0(_this, completer));
      return completer.get$future();
    },
    set$_cursor(_cursor) {
      this._cursor = this.$ti._eval$1("1?")._as(_cursor);
    },
    $isStreamIterator: 1
  };
  A._CursorReader_moveNext_closure.prototype = {
    call$1($event) {
      var t1;
      type$.JSObject._as($event);
      t1 = this.$this;
      t1.cancel$0();
      t1.set$_cursor(t1.$ti._eval$1("1?")._as(A.getProperty(t1._cursorRequest, "result", type$.nullable_Object)));
      this.completer.complete$1(t1._cursor != null);
    },
    $signature: 1
  };
  A._CursorReader_moveNext_closure0.prototype = {
    call$1($event) {
      var t1;
      type$.JSObject._as($event);
      t1 = this.$this;
      t1.cancel$0();
      t1 = A.getProperty(t1._cursorRequest, "error", type$.nullable_JSObject);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 1
  };
  A.CompleteIdbRequest_complete_closure.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      this.completer.complete$1(this.T._as(A.getProperty(this._this, "result", type$.nullable_Object)));
    },
    $signature: 1
  };
  A.CompleteIdbRequest_complete_closure0.prototype = {
    call$1($event) {
      var t1;
      type$.JSObject._as($event);
      t1 = A.getProperty(this._this, "error", type$.nullable_JSObject);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 1
  };
  A.CompleteOpenIdbRequest_completeOrBlocked_closure.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      this.completer.complete$1(this.T._as(A.getProperty(this._this, "result", type$.nullable_Object)));
    },
    $signature: 1
  };
  A.CompleteOpenIdbRequest_completeOrBlocked_closure0.prototype = {
    call$1($event) {
      var t1;
      type$.JSObject._as($event);
      t1 = A.getProperty(this._this, "error", type$.nullable_JSObject);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 1
  };
  A.CompleteOpenIdbRequest_completeOrBlocked_closure1.prototype = {
    call$1($event) {
      var t1;
      type$.JSObject._as($event);
      t1 = A.getProperty(this._this, "error", type$.nullable_JSObject);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 1
  };
  A.WasmInstance.prototype = {
    WasmInstance$_$1(nativeInstance) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, key, value;
      for (t1 = type$.Object, t2 = type$.JSObject, t3 = type$.nullable_Object, t4 = J.get$iterator$ax(A.JSArrayToList_get_toDart(A._callMethodUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Object", t1), "keys", A.getProperty(nativeInstance, "exports", t2), type$.JSArray_nullable_Object), t3)), t5 = type$.JavaScriptFunction, t6 = this.globals, t7 = J.getInterceptor$ax(t6), t8 = this.functions, t9 = J.getInterceptor$ax(t8); A.boolConversionCheck(t4.moveNext$0());) {
        t10 = A._asString(t4.get$current());
        key = A.JSStringToString_get_toDart(t10);
        value = A.JSObjectUnsafeUtilExtension_getProperty(A.getProperty(nativeInstance, "exports", t2), t10, t3);
        if (A.boolConversionCheck(A.JSAnyUtilityExtension_typeofEquals(value, "function")))
          t9.$indexSet(t8, key, t5._as(value));
        else if (A.boolConversionCheck(A.JSAnyUtilityExtension_instanceof(value, A.getProperty(A._getPropertyTrustType(A.staticInteropGlobalContext(), "WebAssembly", t1), "Global", t5))))
          t7.$indexSet(t6, key, t2._as(value));
      }
    }
  };
  A.WasmInstance_load_closure.prototype = {
    call$2(module, moduleImports) {
      var moduleJs;
      A._asString(module);
      type$.Map_of_String_and_nullable_Object._as(moduleImports);
      moduleJs = A.JSObject_constructor_();
      A.JSObjectUnsafeUtilExtension____(this.importsJs, module, moduleJs);
      moduleImports.forEach$1(0, new A.WasmInstance_load__closure(moduleJs));
    },
    $signature: 42
  };
  A.WasmInstance_load__closure.prototype = {
    call$2($name, value) {
      A.JSObjectUnsafeUtilExtension____(this.moduleJs, A._asString($name), value);
    },
    $signature: 43
  };
  A.WasmSqlite3.prototype = {};
  A.WasmSqlite3_loadFromUrl_closure.prototype = {
    call$2(key, value) {
      A.JSObjectUnsafeUtilExtension____(this.headersJs, A._asString(key), A.StringToJSString_get_toJS(A._asString(value)));
    },
    $signature: 44
  };
  A.WasmVfs.prototype = {
    _runInWorker$2$2(operation, requestData, Req, Res) {
      var rc,
        _s12_ = "_runInWorker",
        t1 = type$.Message;
      A.checkTypeBound(Req, t1, "Req", _s12_);
      A.checkTypeBound(Res, t1, "Res", _s12_);
      Req._eval$1("@<0>")._bind$1(Res)._eval$1("WorkerOperation<1,2>")._as(operation);
      t1 = this.serializer;
      t1.write$1(Req._as(requestData));
      rc = this.synchronizer.requestAndWaitForResponse$1(operation.index);
      if (rc !== 0)
        throw A.wrapException(A.VfsException$(rc));
      return operation.readResponse.call$1(t1);
    },
    xAccess$2(path, flags) {
      return this._runInWorker$2$2(B.WorkerOperation_Gkh, A.NameAndInt32Flags$(A._asString(path), A._asInt(flags), 0, 0), type$.NameAndInt32Flags, type$.Flags).flag0;
    },
    xDelete$2(path, syncDir) {
      this._runInWorker$2$2(B.WorkerOperation_AxI, A.NameAndInt32Flags$(A._asString(path), A._asInt(syncDir), 0, 0), type$.NameAndInt32Flags, type$.EmptyMessage);
    },
    xFullPathName$1(path) {
      var resolved = this.pathContext.absolute$1(A._asString(path));
      if (!A.boolConversionCheck(A.isWithin("/", resolved)))
        throw A.wrapException(B.VfsException_14);
      return resolved;
    },
    xOpen$2(path, flags) {
      var filePath, result;
      type$.Sqlite3Filename._as(path);
      A._asInt(flags);
      filePath = path.path;
      result = this._runInWorker$2$2(B.WorkerOperation_readNameAndFlags_readFlags_2_xOpen, A.NameAndInt32Flags$(filePath == null ? A.GenerateFilename_randomFileName(this.random, "/") : filePath, flags, 0, 0), type$.NameAndInt32Flags, type$.Flags);
      return new A._Record_2_file_outFlags(A.WasmFile$(this, result.flag1), result.flag0);
    },
    xSleep$1(duration) {
      this._runInWorker$2$2(B.WorkerOperation_readFlags_readEmpty_5_xSleep, A.Flags$(type$.Duration._as(duration).get$inMilliseconds(), 0, 0), type$.Flags, type$.EmptyMessage);
    },
    close$0() {
      var t1 = type$.EmptyMessage;
      this._runInWorker$2$2(B.WorkerOperation_readEmpty_readEmpty_12_stopServer, B.C_EmptyMessage, t1, t1);
    }
  };
  A.WasmFile.prototype = {
    get$xDeviceCharacteristics() {
      return 2048;
    },
    readInto$2(buffer, offset) {
      var remainingBytes, t1, t2, t3, t4, totalBytesRead, bytesToRead, bytesRead;
      type$.Uint8List._as(buffer);
      A._asInt(offset);
      remainingBytes = buffer.length;
      for (t1 = type$.int, t2 = this.vfs, t3 = this.fd, t4 = type$.Flags, totalBytesRead = 0; remainingBytes > 0;) {
        bytesToRead = A.min(65536, remainingBytes, t1);
        remainingBytes -= bytesToRead;
        bytesRead = t2._runInWorker$2$2(B.WorkerOperation_readFlags_readFlags_3_xRead, A.Flags$(t3, offset + totalBytesRead, bytesToRead), t4, t4).flag0;
        A.NativeUint8List_set(buffer, t2.serializer.viewByteRange$2(0, bytesRead), totalBytesRead);
        totalBytesRead += bytesRead;
        if (bytesRead < bytesToRead)
          break;
      }
      return totalBytesRead;
    },
    xCheckReservedLock$0() {
      return !A.boolConversionCheck(J.$eq$(this.lockStatus, 0)) ? 1 : 0;
    },
    xClose$0() {
      this.vfs._runInWorker$2$2(B.WorkerOperation_readFlags_readEmpty_6_xClose, A.Flags$(this.fd, 0, 0), type$.Flags, type$.EmptyMessage);
    },
    xFileSize$0() {
      var t1 = type$.Flags;
      return this.vfs._runInWorker$2$2(B.WorkerOperation_readFlags_readFlags_7_xFileSize, A.Flags$(this.fd, 0, 0), t1, t1).flag0;
    },
    xLock$1(mode) {
      var _this = this;
      A._asInt(mode);
      if (A.boolConversionCheck(J.$eq$(_this.lockStatus, 0)))
        _this.vfs._runInWorker$2$2(B.WorkerOperation_readFlags_readEmpty_10_xLock, A.Flags$(_this.fd, mode, 0), type$.Flags, type$.EmptyMessage);
      _this.lockStatus = mode;
    },
    xSync$1(flags) {
      A._asInt(flags);
      this.vfs._runInWorker$2$2(B.WorkerOperation_readFlags_readEmpty_8_xSync, A.Flags$(this.fd, 0, 0), type$.Flags, type$.EmptyMessage);
    },
    xTruncate$1(size) {
      this.vfs._runInWorker$2$2(B.WorkerOperation_readFlags_readEmpty_9_xTruncate, A.Flags$(this.fd, A._asInt(size), 0), type$.Flags, type$.EmptyMessage);
    },
    xUnlock$1(mode) {
      A._asInt(mode);
      if (!A.boolConversionCheck(J.$eq$(this.lockStatus, 0)) && mode === 0)
        this.vfs._runInWorker$2$2(B.WorkerOperation_readFlags_readEmpty_11_xUnlock, A.Flags$(this.fd, mode, 0), type$.Flags, type$.EmptyMessage);
    },
    xWrite$2(buffer, fileOffset) {
      var remainingBytes, t1, t2, t3, t4, t5, totalBytesWritten, bytesToWrite, subBuffer, t6, t7;
      type$.Uint8List._as(buffer);
      A._asInt(fileOffset);
      remainingBytes = buffer.length;
      for (t1 = this.vfs, t2 = this.fd, t3 = type$.Flags, t4 = type$.EmptyMessage, t5 = type$.int, totalBytesWritten = 0; remainingBytes > 0;) {
        bytesToWrite = A.min(65536, remainingBytes, t5);
        if (bytesToWrite === remainingBytes && totalBytesWritten === 0)
          subBuffer = buffer;
        else {
          t6 = B.NativeUint8List_methods.get$buffer(buffer);
          t7 = B.NativeUint8List_methods.get$offsetInBytes(buffer);
          if (typeof t7 !== "number")
            return t7.$add();
          subBuffer = J.asUint8List$2$x(t6, t7 + totalBytesWritten, bytesToWrite);
        }
        A.NativeUint8List_set(t1.serializer.byteView, subBuffer, 0);
        t1._runInWorker$2$2(B.WorkerOperation_readFlags_readEmpty_4_xWrite, A.Flags$(t2, fileOffset + totalBytesWritten, bytesToWrite), t3, t4);
        totalBytesWritten += bytesToWrite;
        remainingBytes -= bytesToWrite;
      }
    }
  };
  A.RequestResponseSynchronizer.prototype = {
    requestAndWaitForResponse$1(opcode) {
      var t1;
      A._asInt(opcode);
      t1 = this.int32View;
      A.Atomics_store(t1, 1, -1);
      A.Atomics_store(t1, 0, opcode);
      A.Atomics_notify(t1, 0);
      A.Atomics_wait(t1, 1, -1);
      return A.Atomics_load(t1, 1);
    },
    waitForRequest$0() {
      return A.Atomics_waitWithTimeout(this.int32View, 0, -1, 150);
    },
    takeOpcode$0() {
      var t1 = this.int32View,
        opcode = A.Atomics_load(t1, 0);
      A.Atomics_store(t1, 0, -1);
      return opcode;
    },
    respond$1(rc) {
      var t1 = this.int32View;
      A.Atomics_store(t1, 1, A._asInt(rc));
      A.Atomics_notify(t1, 1);
    }
  };
  A.MessageSerializer.prototype = {
    write$1(message) {
      var t1, t2;
      type$.Message._as(message);
      if (!(message instanceof A.EmptyMessage))
        if (message instanceof A.Flags) {
          t1 = this.dataView;
          t2 = J.getInterceptor$x(t1);
          t2.setInt32$2(t1, 0, message.flag0);
          t2.setInt32$2(t1, 4, message.flag1);
          t2.setInt32$2(t1, 8, message.flag2);
          if (message instanceof A.NameAndInt32Flags)
            this._sync_channel$_writeString$2(12, message.name);
        } else
          throw A.wrapException(A.UnsupportedError$("Message " + A.S(message)));
    },
    viewByteRange$2(offset, $length) {
      return A.SharedArrayBuffer_asUint8ListSlice(this.buffer, A._asInt(offset), A._asInt($length));
    },
    _readString$1(offset) {
      A._asInt(offset);
      return B.C_Utf8Codec.decode$1(A.SharedArrayBuffer_asUint8ListSlice(this.buffer, offset + 4, J.getInt32$1$x(this.dataView, offset)));
    },
    _sync_channel$_writeString$2(offset, data) {
      var encoded;
      A._asInt(offset);
      encoded = B.C_Utf8Codec.encode$1(A._asString(data));
      J.setInt32$2$x(this.dataView, offset, encoded.length);
      J.setAll$2$ax(this.byteView, offset + 4, encoded);
    }
  };
  A.WorkerOperation.prototype = {
    _enumToString$0() {
      return "WorkerOperation." + A.S(this._core$_name);
    },
    readRequest$1(arg0) {
      return this.readRequest.call$1(arg0);
    }
  };
  A.Message.prototype = {};
  A.EmptyMessage.prototype = {};
  A.Flags.prototype = {};
  A.NameAndInt32Flags.prototype = {};
  A._ResolvedPath.prototype = {
    openFile$1$create(create) {
      return A.FileSystemDirectoryHandleApi_openFile(this.directory, this.filename, A._asBool(create));
    },
    openFile$0() {
      return this.openFile$1$create(false);
    }
  };
  A.VfsWorker.prototype = {
    _resolvePath$2$createDirectories(absolutePath, createDirectories) {
      return this._resolvePath$body$VfsWorker(A._asString(absolutePath), A._asBool(createDirectories));
    },
    _resolvePath$1(absolutePath) {
      return this._resolvePath$2$createDirectories(absolutePath, false);
    },
    _resolvePath$body$VfsWorker(absolutePath, createDirectories) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$._ResolvedPath),
        $async$returnValue, $async$self = this, _0_1, t2, file, t3, $directories, dirHandle, t1, fullPath, _0_0;
      var $async$_resolvePath$2$createDirectories = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$url();
              fullPath = t1.relative$2$from(absolutePath, "/");
              _0_0 = J.split$1$s(t1, fullPath);
              t1 = J.getInterceptor$asx(_0_0);
              _0_1 = t1.get$length(_0_0);
              t2 = _0_1;
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$ge();
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = t2 >= 1;
              file = null;
              if (t2) {
                if (typeof _0_1 !== "number") {
                  $async$returnValue = _0_1.$sub();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t3 = _0_1 - 1;
                $directories = t1.sublist$2(_0_0, 0, t3);
                file = t1.$index(_0_0, t3);
              } else
                $directories = null;
              if (!t2)
                throw A.wrapException(A.StateError$("Pattern matching error"));
              dirHandle = $async$self.root;
              t1 = J.get$iterator$ax($directories);
            case 3:
              // for condition
              if (!A.boolConversionCheck(t1.moveNext$0())) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_getDirectory(dirHandle, t1.get$current(), createDirectories), $async$_resolvePath$2$createDirectories);
            case 5:
              // returning from await.
              dirHandle = $async$result;
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = A._ResolvedPath$(fullPath, dirHandle, file);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_resolvePath$2$createDirectories, $async$completer);
    },
    _xAccess$1(flags) {
      return this._xAccess$body$VfsWorker(type$.NameAndInt32Flags._as(flags));
    },
    _xAccess$body$VfsWorker(flags) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Flags),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, resolved, t1, exception, $async$exception;
      var $async$_xAccess$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self._resolvePath$1(flags.name), $async$_xAccess$1);
            case 7:
              // returning from await.
              resolved = $async$result;
              $async$goto = 8;
              return A._asyncAwait(resolved.openFile$0(), $async$_xAccess$1);
            case 8:
              // returning from await.
              t1 = A.Flags$(1, 0, 0);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.Flags$(0, 0, 0);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xAccess$1, $async$completer);
    },
    _xDelete$1(options) {
      return this._xDelete$body$VfsWorker(type$.NameAndInt32Flags._as(options));
    },
    _xDelete$body$VfsWorker(options) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$self = this, e, exception, resolved, $async$exception;
      var $async$_xDelete$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._resolvePath$1(options.name), $async$_xDelete$1);
            case 2:
              // returning from await.
              resolved = $async$result;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_remove(resolved.directory, resolved.filename), $async$_xDelete$1);
            case 7:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              A._log("Could not delete entry: " + A.S(e));
              throw A.wrapException(B.VfsException_2570);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xDelete$1, $async$completer);
    },
    _xOpen$1(req) {
      return this._xOpen$body$VfsWorker(type$.NameAndInt32Flags._as(req));
    },
    _xOpen$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Flags),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, exception, t1, fileHandle, readonly, t2, t3, opened, flags, create, resolved, $async$exception;
      var $async$_xOpen$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              flags = req.flag0;
              create = (flags & 4) !== 0;
              resolved = null;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self._resolvePath$2$createDirectories(req.name, create), $async$_xOpen$1);
            case 7:
              // returning from await.
              resolved = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.VfsException$(12);
              throw A.wrapException(t1);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$goto = 8;
              return A._asyncAwait(resolved.openFile$1$create(create), $async$_xOpen$1);
            case 8:
              // returning from await.
              fileHandle = $async$result;
              readonly = !A.boolConversionCheck(create) && (flags & 1) !== 0;
              t1 = $async$self._fdCounter;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.set$_fdCounter(t1 + 1);
              t2 = resolved.directory;
              t3 = resolved.fullPath;
              opened = A._OpenedFileHandle$((flags & 8) !== 0, t2, t1, fileHandle, resolved.filename, t3, readonly);
              t3 = opened.fd;
              J.$indexSet$ax($async$self._openFiles, t3, opened);
              $async$returnValue = A.Flags$(readonly ? 1 : 0, t3, 0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xOpen$1, $async$completer);
    },
    _xRead$1(req) {
      return this._xRead$body$VfsWorker(type$.Flags._as(req));
    },
    _xRead$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Flags),
        $async$returnValue, $async$self = this, offset, bufferLength, t1, $async$temp1, $async$temp2;
      var $async$_xRead$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.$index$asx($async$self._openFiles, req.flag0);
              t1.toString;
              offset = req.flag1;
              bufferLength = req.flag2;
              $async$temp1 = A;
              $async$temp2 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self._openForSynchronousAccess$1(t1), $async$_xRead$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Flags$($async$temp2.FileSystemSyncAccessHandleApi_readDart($async$result, $async$self.messages.viewByteRange$2(0, bufferLength), {at: offset}), 0, 0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xRead$1, $async$completer);
    },
    _xWrite$1(req) {
      return this._xWrite$body$VfsWorker(type$.Flags._as(req));
    },
    _xWrite$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.EmptyMessage),
        $async$returnValue, $async$self = this, offset, bufferLength, t1, $async$temp1;
      var $async$_xWrite$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.$index$asx($async$self._openFiles, req.flag0);
              t1.toString;
              offset = req.flag1;
              bufferLength = req.flag2;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self._openForSynchronousAccess$1(t1), $async$_xWrite$1);
            case 3:
              // returning from await.
              if ($async$temp1.FileSystemSyncAccessHandleApi_writeDart($async$result, $async$self.messages.viewByteRange$2(0, bufferLength), {at: offset}) !== bufferLength)
                throw A.wrapException(B.VfsException_778);
              $async$returnValue = B.C_EmptyMessage;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xWrite$1, $async$completer);
    },
    _xClose$1(req) {
      return this._xClose$body$VfsWorker(type$.Flags._as(req));
    },
    _xClose$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, file;
      var $async$_xClose$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              file = J.remove$1$ax($async$self._openFiles, req.flag0);
              J.remove$1$ax($async$self._implicitlyHeldLocks, file);
              if (file == null)
                throw A.wrapException(B.VfsException_12);
              $async$self._closeSyncHandle$1(file);
              $async$goto = A.boolConversionCheck(file.deleteOnClose) ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_remove(file.directory, file.filename), $async$_xClose$1);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xClose$1, $async$completer);
    },
    _xFileSize$1(req) {
      return this._xFileSize$body$VfsWorker(type$.Flags._as(req));
    },
    _xFileSize$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Flags),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, file, syncHandle, size, t1;
      var $async$_xFileSize$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.$index$asx($async$self._openFiles, req.flag0);
              t1.toString;
              file = t1;
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self._openForSynchronousAccess$1(file), $async$_xFileSize$1);
            case 6:
              // returning from await.
              syncHandle = $async$result;
              size = A._callMethodUnchecked0(syncHandle, "getSize", type$.int);
              t1 = A.Flags$(size, 0, 0);
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              $async$self._releaseImplicitLock$1(file);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xFileSize$1, $async$completer);
    },
    _xTruncate$1(req) {
      return this._xTruncate$body$VfsWorker(type$.Flags._as(req));
    },
    _xTruncate$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.EmptyMessage),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, file, syncHandle, t1;
      var $async$_xTruncate$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.$index$asx($async$self._openFiles, req.flag0);
              t1.toString;
              file = t1;
              file.checkMayWrite$0();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self._openForSynchronousAccess$1(file), $async$_xTruncate$1);
            case 6:
              // returning from await.
              syncHandle = $async$result;
              A._callMethodUnchecked1(syncHandle, "truncate", req.flag1, type$.void);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              $async$self._releaseImplicitLock$1(file);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$returnValue = B.C_EmptyMessage;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xTruncate$1, $async$completer);
    },
    _xSync$1(req) {
      return this._xSync$body$VfsWorker(type$.Flags._as(req));
    },
    _xSync$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.EmptyMessage),
        $async$returnValue, $async$self = this, file, syncHandle;
      var $async$_xSync$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              file = J.$index$asx($async$self._openFiles, req.flag0);
              syncHandle = file.syncHandle;
              if (!A.boolConversionCheck(file.readonly) && syncHandle != null)
                A._callMethodUnchecked0(syncHandle, "flush", type$.void);
              $async$returnValue = B.C_EmptyMessage;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xSync$1, $async$completer);
    },
    _xLock$1(req) {
      return this._xLock$body$VfsWorker(type$.Flags._as(req));
    },
    _xLock$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.EmptyMessage),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, file, exception, t1, $async$exception;
      var $async$_xLock$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.$index$asx($async$self._openFiles, req.flag0);
              t1.toString;
              file = t1;
              $async$goto = file.syncHandle == null ? 3 : 5;
              break;
            case 3:
              // then
              $async$handler = 7;
              $async$goto = 10;
              return A._asyncAwait($async$self._openForSynchronousAccess$1(file), $async$_xLock$1);
            case 10:
              // returning from await.
              file.explicitlyLocked = true;
              $async$handler = 2;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$currentError;
              throw A.wrapException(B.VfsException_3850);
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 9:
              // after finally
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              file.explicitlyLocked = true;
            case 4:
              // join
              $async$returnValue = B.C_EmptyMessage;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xLock$1, $async$completer);
    },
    _xUnlock$1(req) {
      return this._xUnlock$body$VfsWorker(type$.Flags._as(req));
    },
    _xUnlock$body$VfsWorker(req) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.EmptyMessage),
        $async$returnValue, $async$self = this, file, mode;
      var $async$_xUnlock$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              file = J.$index$asx($async$self._openFiles, req.flag0);
              mode = req.flag1;
              if (file.syncHandle != null && mode === 0)
                $async$self._closeSyncHandle$1(file);
              $async$returnValue = B.C_EmptyMessage;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_xUnlock$1, $async$completer);
    },
    start$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, rc, opcode, request, response, e, e0, t1, t2, t3, t4, t5, t6, exception, $async$exception;
      var $async$start$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.synchronizer, t2 = $async$self.messages, t3 = type$.Flags, t4 = type$.NameAndInt32Flags, t5 = type$.void;
            case 3:
              // for condition
              if (!!A.boolConversionCheck($async$self._stopped)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              if (t1.waitForRequest$0() === "timed-out") {
                $async$self._releaseImplicitLocks$0();
                // goto for condition
                $async$goto = 3;
                break;
              }
              rc = null;
              opcode = null;
              request = null;
              $async$handler = 6;
              t6 = t1.takeOpcode$0();
              if (!(t6 >= 0 && t6 < 13)) {
                $async$returnValue = A.ioore(B.List_ckn, t6);
                // goto return
                $async$goto = 1;
                break;
              }
              opcode = B.List_ckn[t6];
              request = opcode.readRequest$1(t2);
              response = null;
            case 9:
              // switch
              switch (opcode) {
                case B.WorkerOperation_readFlags_readEmpty_5_xSleep:
                  // goto case
                  $async$goto = 11;
                  break;
                case B.WorkerOperation_Gkh:
                  // goto case
                  $async$goto = 12;
                  break;
                case B.WorkerOperation_AxI:
                  // goto case
                  $async$goto = 13;
                  break;
                case B.WorkerOperation_readNameAndFlags_readFlags_2_xOpen:
                  // goto case
                  $async$goto = 14;
                  break;
                case B.WorkerOperation_readFlags_readFlags_3_xRead:
                  // goto case
                  $async$goto = 15;
                  break;
                case B.WorkerOperation_readFlags_readEmpty_4_xWrite:
                  // goto case
                  $async$goto = 16;
                  break;
                case B.WorkerOperation_readFlags_readEmpty_6_xClose:
                  // goto case
                  $async$goto = 17;
                  break;
                case B.WorkerOperation_readFlags_readFlags_7_xFileSize:
                  // goto case
                  $async$goto = 18;
                  break;
                case B.WorkerOperation_readFlags_readEmpty_9_xTruncate:
                  // goto case
                  $async$goto = 19;
                  break;
                case B.WorkerOperation_readFlags_readEmpty_8_xSync:
                  // goto case
                  $async$goto = 20;
                  break;
                case B.WorkerOperation_readFlags_readEmpty_10_xLock:
                  // goto case
                  $async$goto = 21;
                  break;
                case B.WorkerOperation_readFlags_readEmpty_11_xUnlock:
                  // goto case
                  $async$goto = 22;
                  break;
                case B.WorkerOperation_readEmpty_readEmpty_12_stopServer:
                  // goto case
                  $async$goto = 23;
                  break;
                default:
                  // goto after switch
                  $async$goto = 10;
                  break;
              }
              break;
            case 11:
              // case
              $async$self._releaseImplicitLocks$0();
              $async$goto = 24;
              return A._asyncAwait(A.Future_Future$delayed(A.Duration$(0, t3._as(request).flag0), t5), $async$start$0);
            case 24:
              // returning from await.
              response = B.C_EmptyMessage;
              // goto after switch
              $async$goto = 10;
              break;
            case 12:
              // case
              $async$goto = 25;
              return A._asyncAwait($async$self._xAccess$1(t4._as(request)), $async$start$0);
            case 25:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 13:
              // case
              $async$goto = 26;
              return A._asyncAwait($async$self._xDelete$1(t4._as(request)), $async$start$0);
            case 26:
              // returning from await.
              response = B.C_EmptyMessage;
              // goto after switch
              $async$goto = 10;
              break;
            case 14:
              // case
              $async$goto = 27;
              return A._asyncAwait($async$self._xOpen$1(t4._as(request)), $async$start$0);
            case 27:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 15:
              // case
              $async$goto = 28;
              return A._asyncAwait($async$self._xRead$1(t3._as(request)), $async$start$0);
            case 28:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 16:
              // case
              $async$goto = 29;
              return A._asyncAwait($async$self._xWrite$1(t3._as(request)), $async$start$0);
            case 29:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 17:
              // case
              $async$goto = 30;
              return A._asyncAwait($async$self._xClose$1(t3._as(request)), $async$start$0);
            case 30:
              // returning from await.
              response = B.C_EmptyMessage;
              // goto after switch
              $async$goto = 10;
              break;
            case 18:
              // case
              $async$goto = 31;
              return A._asyncAwait($async$self._xFileSize$1(t3._as(request)), $async$start$0);
            case 31:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 19:
              // case
              $async$goto = 32;
              return A._asyncAwait($async$self._xTruncate$1(t3._as(request)), $async$start$0);
            case 32:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 20:
              // case
              $async$goto = 33;
              return A._asyncAwait($async$self._xSync$1(t3._as(request)), $async$start$0);
            case 33:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 21:
              // case
              $async$goto = 34;
              return A._asyncAwait($async$self._xLock$1(t3._as(request)), $async$start$0);
            case 34:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 22:
              // case
              $async$goto = 35;
              return A._asyncAwait($async$self._xUnlock$1(t3._as(request)), $async$start$0);
            case 35:
              // returning from await.
              response = $async$result;
              // goto after switch
              $async$goto = 10;
              break;
            case 23:
              // case
              response = B.C_EmptyMessage;
              $async$self._stopped = true;
              $async$self._releaseImplicitLocks$0();
              // goto after switch
              $async$goto = 10;
              break;
            case 10:
              // after switch
              t2.write$1(response);
              rc = 0;
              $async$handler = 2;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$currentError;
              t6 = A.unwrapException($async$exception);
              if (t6 instanceof A.VfsException) {
                e = t6;
                A._log("Caught " + A.S(e) + " while handling " + A.S(opcode) + "(" + A.S(request) + ")");
                rc = e.returnCode;
              } else {
                e0 = t6;
                A._log("Caught " + A.S(e0) + " while handling " + A.S(opcode) + "(" + A.S(request) + ")");
                rc = 1;
              }
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 8:
              // after finally
              t1.respond$1(rc);
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$start$0, $async$completer);
    },
    _releaseImplicitLocks$0() {
      J.forEach$1$ax(J.toList$0$ax(this._implicitlyHeldLocks), this.get$_releaseImplicitLock());
    },
    _releaseImplicitLock$1(handle) {
      type$._OpenedFileHandle._as(handle);
      if (J.remove$1$ax(this._implicitlyHeldLocks, handle))
        this._closeSyncHandleNoThrow$1(handle);
    },
    _openForSynchronousAccess$1(file) {
      return this._openForSynchronousAccess$body$VfsWorker(type$._OpenedFileHandle._as(file));
    },
    _openForSynchronousAccess$body$VfsWorker(file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, attempt, handle, t1, t2, t3, t4, t5, handle0, t6, exception, existing, $async$exception;
      var $async$_openForSynchronousAccess$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              existing = file.syncHandle;
              if (existing != null) {
                $async$returnValue = existing;
                // goto return
                $async$goto = 1;
                break;
              }
              attempt = 1;
              t1 = file.file, t2 = type$.JSObject, t3 = $async$self._implicitlyHeldLocks, t4 = J.getInterceptor$ax(t3), t5 = file.fullPath;
            case 3:
              // for condition
              // trivial condition
              $async$handler = 6;
              $async$goto = 9;
              return A._asyncAwait(A.JSPromiseToFuture_get_toDart(A._callMethodUnchecked0(t1, "createSyncAccessHandle", t2), t2), $async$_openForSynchronousAccess$1);
            case 9:
              // returning from await.
              handle0 = $async$result;
              file.set$syncHandle(handle0);
              handle = handle0;
              if (!A.boolConversionCheck(file.explicitlyLocked)) {
                t4.add$1(t3, file);
                A._log("Acquired implicit lock for " + A.S(t5));
              }
              t6 = handle;
              $async$returnValue = t6;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$currentError;
              if (A.boolConversionCheck(J.$eq$(attempt, 6)))
                throw A.wrapException(B.VfsException_10);
              A._log("Could not obtain sync handle (attempt " + A.S(attempt) + " / 6)");
              t6 = attempt;
              if (typeof t6 !== "number") {
                $async$returnValue = t6.$add();
                // goto return
                $async$goto = 1;
                break;
              }
              attempt = t6 + 1;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 8:
              // after finally
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_openForSynchronousAccess$1, $async$completer);
    },
    _closeSyncHandleNoThrow$1(handle) {
      var exception;
      type$._OpenedFileHandle._as(handle);
      try {
        this._closeSyncHandle$1(handle);
      } catch (exception) {
        A._log("Ignoring error during close");
      }
    },
    _closeSyncHandle$1(handle) {
      var syncHandle;
      type$._OpenedFileHandle._as(handle);
      syncHandle = handle.syncHandle;
      if (syncHandle != null) {
        A._log("Closing sync handle for " + A.S(handle.fullPath));
        handle.syncHandle = null;
        J.remove$1$ax(this._implicitlyHeldLocks, handle);
        handle.explicitlyLocked = false;
        A._callMethodUnchecked0(syncHandle, "close", type$.void);
      }
    },
    set$_fdCounter(_fdCounter) {
      this._fdCounter = A._asInt(_fdCounter);
    }
  };
  A._OpenedFileHandle.prototype = {
    checkMayWrite$0() {
      if (A.boolConversionCheck(this.readonly))
        throw A.wrapException(B.VfsException_8);
    },
    set$syncHandle(syncHandle) {
      this.syncHandle = type$.nullable_JSObject._as(syncHandle);
    }
  };
  A.AsynchronousIndexedDbFileSystem.prototype = {
    get$_isClosed() {
      return this._indexed_db$_database == null;
    },
    _rangeOverFile$3$endOffsetInclusive$startOffset(fileId, endOffsetInclusive, startOffset) {
      var t1, t2;
      A._asInt(fileId);
      A._asInt(startOffset);
      A._asInt(endOffsetInclusive);
      t1 = type$.JSArray_double;
      t2 = type$.double;
      return A._callMethodUnchecked2(A._getPropertyTrustType(A.staticInteropGlobalContext(), "IDBKeyRange", type$.Object), "bound", A.ListToJSArray_get_toJS(A._setArrayType([A.NumToJSExtension_get_toJS(fileId), A.NumToJSExtension_get_toJS(startOffset)], t1), t2), A.ListToJSArray_get_toJS(A._setArrayType([A.NumToJSExtension_get_toJS(fileId), A.NumToJSExtension_get_toJS(endOffsetInclusive)], t1), t2), type$.JSObject);
    },
    _rangeOverFile$2$startOffset(fileId, startOffset) {
      return this._rangeOverFile$3$endOffsetInclusive$startOffset(fileId, 9007199254740992, startOffset);
    },
    _rangeOverFile$1(fileId) {
      return this._rangeOverFile$3$endOffsetInclusive$startOffset(fileId, 9007199254740992, 0);
    },
    open$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, openRequest, t1, completer, t2;
      var $async$open$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              completer = A.Completer_Completer$sync(t1);
              t2 = A.getProperty(A.staticInteropGlobalContext(), "indexedDB", type$.nullable_JSObject);
              t2.toString;
              openRequest = A._callMethodUnchecked2(t2, "open", $async$self._dbName, 1, t1);
              A._setPropertyUnchecked(openRequest, "onupgradeneeded", A._functionToJS1(new A.AsynchronousIndexedDbFileSystem_open_closure(openRequest)), type$.JavaScriptFunction);
              completer.complete$1(A.CompleteOpenIdbRequest_completeOrBlocked(openRequest, t1));
              $async$goto = 2;
              return A._asyncAwait(completer.get$future(), $async$open$0);
            case 2:
              // returning from await.
              $async$self.set$_indexed_db$_database($async$result);
              $async$goto = 3;
              return A._asyncAwait($async$self._supportsStoringBlobs$0(), $async$open$0);
            case 3:
              // returning from await.
              $async$self.set$_storeBlobs($async$result);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$open$0, $async$completer);
    },
    _supportsStoringBlobs$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, transaction, blob, blocks, request, key, t2, t3, t4, exception, t1, $async$exception, $async$exception1;
      var $async$_supportsStoringBlobs$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSArray_String;
              t3 = type$.String;
              t4 = type$.JSObject;
              transaction = A._callMethodUnchecked2(t1, "transaction", A.ListToJSArray_get_toJS(A._setArrayType([A.StringToJSString_get_toJS("blocks")], t2), t3), "readwrite", t4);
              blob = null;
              $async$handler = 4;
              blocks = A._callMethodUnchecked1(transaction, "objectStore", "blocks", t4);
              request = A._callMethodUnchecked2(blocks, "add", A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Blob", type$.Object), A.ListToJSArray_get_toJS(A._setArrayType([A.ByteBufferToJSArrayBuffer_get_toJS(J.get$buffer$x(A.NativeUint8List_NativeUint8List(4096)))], type$.JSArray_NativeByteBuffer), type$.NativeByteBuffer), t4), A.ListToJSArray_get_toJS(A._setArrayType([A.StringToJSString_get_toJS("test")], t2), t3), t4);
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(request, type$.nullable_Object), $async$_supportsStoringBlobs$0);
            case 7:
              // returning from await.
              key = $async$result;
              $async$goto = 8;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(blocks, "get", key, t4), t4), $async$_supportsStoringBlobs$0);
            case 8:
              // returning from await.
              blob = $async$result;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              $async$returnValue = false;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              A._callMethodUnchecked0(transaction, "abort", type$.void);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
              $async$handler = 10;
              $async$goto = 13;
              return A._asyncAwait(A.ReadBlob_byteBuffer(blob), $async$_supportsStoringBlobs$0);
            case 13:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 12;
              break;
            case 10:
              // catch
              $async$handler = 9;
              $async$exception1 = $async$currentError;
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 12;
              break;
            case 9:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 12:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_supportsStoringBlobs$0, $async$completer);
    },
    close$0() {
      var t1 = this._indexed_db$_database;
      if (t1 != null)
        A._callMethodUnchecked0(t1, "close", type$.void);
    },
    listFiles$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_int),
        $async$returnValue, $async$self = this, t2, transaction, result, iterator, row, t3, t1, $async$temp1;
      var $async$listFiles$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = A._callMethodUnchecked2(t1, "transaction", A.StringToJSString_get_toJS("files"), "readonly", t2);
              result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int);
              iterator = A.RequestExt_cursorIterator(A._callMethodUnchecked0(A._callMethodUnchecked1(A._callMethodUnchecked1(transaction, "objectStore", "files", t2), "index", "fileName", t2), "openKeyCursor", t2), t2);
              t1 = type$.nullable_Object;
            case 3:
              // for condition
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(iterator.moveNext$0(), $async$listFiles$0);
            case 5:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              row = iterator.get$current();
              t2 = A.getProperty(row, "key", t1);
              t2.toString;
              t2 = A.JSStringToString_get_toDart(A._asString(t2));
              t3 = A.getProperty(row, "primaryKey", t1);
              t3.toString;
              result.$indexSet(0, t2, A.JSNumberToNumber_get_toDartInt(A._asDouble(t3)));
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$listFiles$0, $async$completer);
    },
    fileIdForPath$1(path) {
      return this.fileIdForPath$body$AsynchronousIndexedDbFileSystem(A._asString(path));
    },
    fileIdForPath$body$AsynchronousIndexedDbFileSystem(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_int),
        $async$returnValue, $async$self = this, t2, t1, $async$temp1;
      var $async$fileIdForPath$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSObject;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(A._callMethodUnchecked1(A._callMethodUnchecked1(A._callMethodUnchecked2(t1, "transaction", A.StringToJSString_get_toJS("files"), "readonly", t2), "objectStore", "files", t2), "index", "fileName", t2), "getKey", A.StringToJSString_get_toJS(path), t2), type$.double), $async$fileIdForPath$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.JSNumberToNumber_get_toDartInt($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$fileIdForPath$1, $async$completer);
    },
    createFile$1(path) {
      return this.createFile$body$AsynchronousIndexedDbFileSystem(A._asString(path));
    },
    createFile$body$AsynchronousIndexedDbFileSystem(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$self = this, t2, t1, $async$temp1;
      var $async$createFile$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSObject;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(A._callMethodUnchecked1(A._callMethodUnchecked2(t1, "transaction", A.StringToJSString_get_toJS("files"), "readwrite", t2), "objectStore", "files", t2), "put", {name: path, length: 0}, t2), type$.double), $async$createFile$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.JSNumberToNumber_get_toDartInt($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$createFile$1, $async$completer);
    },
    _readFile$2(transaction, fileId) {
      var t1 = type$.JSObject;
      t1._as(transaction);
      A._asInt(fileId);
      return A.CompleteIdbRequest_complete(A._callMethodUnchecked1(A._callMethodUnchecked1(transaction, "objectStore", "files", t1), "get", A.NumToJSExtension_get_toJS(fileId), t1), type$.nullable_JSObject).then$1$1(new A.AsynchronousIndexedDbFileSystem__readFile_closure(fileId), t1);
    },
    readFully$1(fileId) {
      return this.readFully$body$AsynchronousIndexedDbFileSystem(A._asInt(fileId));
    },
    readFully$body$AsynchronousIndexedDbFileSystem(fileId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Uint8List),
        $async$returnValue, $async$self = this, t2, transaction, blocks, file, result, readOperations, reader, t3, t4, row, rowOffset, t5, t1, $async$temp1;
      var $async$readFully$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = A._callMethodUnchecked2(t1, "transaction", $.$get$AsynchronousIndexedDbFileSystem__storesJs(), "readonly", t2);
              blocks = A._callMethodUnchecked1(transaction, "objectStore", "blocks", t2);
              $async$goto = 3;
              return A._asyncAwait($async$self._readFile$2(transaction, fileId), $async$readFully$1);
            case 3:
              // returning from await.
              file = $async$result;
              t1 = type$.int;
              result = A.NativeUint8List_NativeUint8List(A.getProperty(file, "length", t1));
              readOperations = A._setArrayType([], type$.JSArray_Future_void);
              reader = A.RequestExt_cursorIterator(A._callMethodUnchecked1(blocks, "openCursor", $async$self._rangeOverFile$1(fileId), t2), t2);
              t2 = type$.nullable_Object, t3 = type$.JSArray_nullable_Object, t4 = type$.void;
            case 4:
              // for condition
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(reader.moveNext$0(), $async$readFully$1);
            case 6:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              row = reader.get$current();
              rowOffset = A.JSNumberToNumber_get_toDartInt(A._asDouble(J.$index$asx(A.JSArrayToList_get_toDart(t3._as(A.getProperty(row, "key", t2)), t2), 1)));
              t5 = A.getProperty(file, "length", t1);
              if (typeof t5 !== "number") {
                $async$returnValue = t5.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              B.JSArray_methods.add$1(readOperations, A.Future_Future$sync(new A.AsynchronousIndexedDbFileSystem_readFully_closure(row, result, rowOffset, A.min(4096, t5 - rowOffset, t1)), t4));
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              $async$goto = 7;
              return A._asyncAwait(A.Future_wait(readOperations, t4), $async$readFully$1);
            case 7:
              // returning from await.
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readFully$1, $async$completer);
    },
    _write$2(fileId, writes) {
      return this._write$body$AsynchronousIndexedDbFileSystem(A._asInt(fileId), type$._FileWriteRequest._as(writes));
    },
    _write$body$AsynchronousIndexedDbFileSystem(fileId, writes) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, transaction, blocks, file, changedOffsets, fileCursor, t1;
      var $async$_write$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = A._callMethodUnchecked2(t1, "transaction", $.$get$AsynchronousIndexedDbFileSystem__storesJs(), "readwrite", t2);
              blocks = A._callMethodUnchecked1(transaction, "objectStore", "blocks", t2);
              $async$goto = 2;
              return A._asyncAwait($async$self._readFile$2(transaction, fileId), $async$_write$2);
            case 2:
              // returning from await.
              file = $async$result;
              changedOffsets = J.toList$0$ax(writes.replacedBlocks.get$keys());
              t1 = J.getInterceptor$ax(changedOffsets);
              t1.sort$0(changedOffsets);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(t1.map$1$1(changedOffsets, new A.AsynchronousIndexedDbFileSystem__write_closure(new A.AsynchronousIndexedDbFileSystem__write_writeBlock($async$self, blocks, fileId), writes), type$.Future_void), type$.void), $async$_write$2);
            case 3:
              // returning from await.
              $async$goto = !A.boolConversionCheck(J.$eq$(writes.newFileLength, A.getProperty(file, "length", type$.int))) ? 4 : 5;
              break;
            case 4:
              // then
              fileCursor = A.RequestExt_cursorIterator(A._callMethodUnchecked1(A._callMethodUnchecked1(transaction, "objectStore", "files", t2), "openCursor", A.NumToJSExtension_get_toJS(fileId), t2), t2);
              $async$goto = 6;
              return A._asyncAwait(fileCursor.moveNext$0(), $async$_write$2);
            case 6:
              // returning from await.
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(fileCursor.get$current(), "update", {name: A.getProperty(file, "name", type$.String), length: writes.newFileLength}, t2), type$.nullable_Object), $async$_write$2);
            case 7:
              // returning from await.
            case 5:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_write$2, $async$completer);
    },
    truncate$2(_, fileId, $length) {
      return this.truncate$body$AsynchronousIndexedDbFileSystem(0, A._asInt(fileId), A._asInt($length));
    },
    truncate$body$AsynchronousIndexedDbFileSystem(_, fileId, $length) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, transaction, files, blocks, file, fileCursor, t1;
      var $async$truncate$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = A._callMethodUnchecked2(t1, "transaction", $.$get$AsynchronousIndexedDbFileSystem__storesJs(), "readwrite", t2);
              files = A._callMethodUnchecked1(transaction, "objectStore", "files", t2);
              blocks = A._callMethodUnchecked1(transaction, "objectStore", "blocks", t2);
              $async$goto = 2;
              return A._asyncAwait($async$self._readFile$2(transaction, fileId), $async$truncate$2);
            case 2:
              // returning from await.
              file = $async$result;
              $async$goto = A.getProperty(file, "length", type$.int) > $length ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(blocks, "delete", $async$self._rangeOverFile$2$startOffset(fileId, B.JSInt_methods._tdivFast$1($length, 4096) * 4096 + 1), t2), type$.nullable_Object), $async$truncate$2);
            case 5:
              // returning from await.
            case 4:
              // join
              fileCursor = A.RequestExt_cursorIterator(A._callMethodUnchecked1(files, "openCursor", A.NumToJSExtension_get_toJS(fileId), t2), t2);
              $async$goto = 6;
              return A._asyncAwait(fileCursor.moveNext$0(), $async$truncate$2);
            case 6:
              // returning from await.
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(fileCursor.get$current(), "update", {name: A.getProperty(file, "name", type$.String), length: $length}, t2), type$.nullable_Object), $async$truncate$2);
            case 7:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$truncate$2, $async$completer);
    },
    deleteFile$1(id) {
      return this.deleteFile$body$AsynchronousIndexedDbFileSystem(A._asInt(id));
    },
    deleteFile$body$AsynchronousIndexedDbFileSystem(id) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, transaction, blocksRange, t1;
      var $async$deleteFile$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._indexed_db$_database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = A._callMethodUnchecked2(t1, "transaction", A.ListToJSArray_get_toJS(A._setArrayType([A.StringToJSString_get_toJS("files"), A.StringToJSString_get_toJS("blocks")], type$.JSArray_String), type$.String), "readwrite", t2);
              blocksRange = $async$self._rangeOverFile$3$endOffsetInclusive$startOffset(id, 9007199254740992, 0);
              t1 = type$.nullable_Object;
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(A._setArrayType([A.CompleteIdbRequest_complete(A._callMethodUnchecked1(A._callMethodUnchecked1(transaction, "objectStore", "blocks", t2), "delete", blocksRange, t2), t1), A.CompleteIdbRequest_complete(A._callMethodUnchecked1(A._callMethodUnchecked1(transaction, "objectStore", "files", t2), "delete", A.NumToJSExtension_get_toJS(id), t2), t1)], type$.JSArray_Future_void), type$.void), $async$deleteFile$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$deleteFile$1, $async$completer);
    },
    set$_indexed_db$_database(_database) {
      this._indexed_db$_database = type$.nullable_JSObject._as(_database);
    },
    set$_storeBlobs(_storeBlobs) {
      this._storeBlobs = A._asBool(_storeBlobs);
    }
  };
  A.AsynchronousIndexedDbFileSystem_open_closure.prototype = {
    call$1(change) {
      var database,
        _s17_ = "createObjectStore",
        t1 = type$.JSObject;
      t1._as(change);
      database = t1._as(A.getProperty(this.openRequest, "result", type$.nullable_Object));
      if (A.boolConversionCheck(J.$eq$(A.getProperty(change, "oldVersion", type$.int), 0))) {
        A._callMethodUnchecked3(A._callMethodUnchecked2(database, _s17_, "files", {autoIncrement: true}, t1), "createIndex", "fileName", A.StringToJSString_get_toJS("name"), {unique: true}, t1);
        A._callMethodUnchecked1(database, _s17_, "blocks", t1);
      }
    },
    $signature: 46
  };
  A.AsynchronousIndexedDbFileSystem__readFile_closure.prototype = {
    call$1(value) {
      type$.nullable_JSObject._as(value);
      if (value == null)
        throw A.wrapException(A.ArgumentError$value(this.fileId, "fileId", "File not found in database"));
      else
        return value;
    },
    $signature: 47
  };
  A.AsynchronousIndexedDbFileSystem_readFully_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.row;
              t2 = type$.nullable_Object;
              $async$goto = A.boolConversionCheck(A.JSAnyUtilityExtension_instanceOfString(A.getProperty(t1, "value", t2), "Blob")) ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.ReadBlob_byteBuffer(type$.JSObject._as(A.getProperty(t1, "value", t2))), $async$call$0);
            case 5:
              // returning from await.
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$result = A.JSArrayBufferToByteBuffer_get_toDart(type$.NativeByteBuffer._as(A.getProperty(t1, "value", t2)));
            case 3:
              // join
              data = $async$result;
              J.setAll$2$ax($async$self.result, $async$self.rowOffset, J.asUint8List$2$x(data, 0, $async$self.length));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A.AsynchronousIndexedDbFileSystem__write_writeBlock.prototype = {
    $call$body$AsynchronousIndexedDbFileSystem__write_writeBlock(blockStart, block) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5, t6, cursor, value;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.blocks;
              t2 = type$.Object;
              t3 = $async$self.fileId;
              t4 = type$.JSArray_double;
              t5 = type$.double;
              t6 = type$.JSObject;
              $async$goto = 2;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(t1, "openCursor", A._callMethodUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "IDBKeyRange", t2), "only", A.ListToJSArray_get_toJS(A._setArrayType([A.NumToJSExtension_get_toJS(t3), A.NumToJSExtension_get_toJS(blockStart)], t4), t5), t6), t6), type$.nullable_JSObject), $async$call$2);
            case 2:
              // returning from await.
              cursor = $async$result;
              value = A.boolConversionCheck($async$self.$this._storeBlobs) ? A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Blob", t2), A.ListToJSArray_get_toJS(A._setArrayType([A.Uint8ListToJSUint8Array_get_toJS(block)], type$.JSArray_NativeUint8List), type$.NativeUint8List), t6) : A.ByteBufferToJSArrayBuffer_get_toJS(B.NativeUint8List_methods.get$buffer(block));
              t2 = type$.nullable_Object;
              $async$goto = cursor == null ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked2(t1, "put", value, A.ListToJSArray_get_toJS(A._setArrayType([A.NumToJSExtension_get_toJS(t3), A.NumToJSExtension_get_toJS(blockStart)], t4), t5), t6), t2), $async$call$2);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(A._callMethodUnchecked1(cursor, "update", value, t6), t2), $async$call$2);
            case 7:
              // returning from await.
            case 4:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    call$2(blockStart, block) {
      return this.$call$body$AsynchronousIndexedDbFileSystem__write_writeBlock(A._asInt(blockStart), type$.Uint8List._as(block));
    },
    $signature: 32
  };
  A.AsynchronousIndexedDbFileSystem__write_closure.prototype = {
    call$1(offset) {
      var t1;
      A._asInt(offset);
      t1 = J.$index$asx(this.writes.replacedBlocks, offset);
      t1.toString;
      return this.writeBlock.call$2(offset, t1);
    },
    $signature: 49
  };
  A._FileWriteRequest.prototype = {
    _updateBlock$3(blockOffset, offsetInBlock, data) {
      A._asInt(blockOffset);
      A._asInt(offsetInBlock);
      type$.Uint8List._as(data);
      B.NativeUint8List_methods.setAll$2(this.replacedBlocks.putIfAbsent$2(blockOffset, new A._FileWriteRequest__updateBlock_closure(this, blockOffset)), offsetInBlock, data);
    },
    addWrite$2(offset, data) {
      var t1, t2, offsetInData, offsetInFile, t3, offsetInBlock, t4, bytesToWrite, t5, offsetInData0;
      A._asInt(offset);
      type$.Uint8List._as(data);
      for (t1 = data.length, t2 = type$.int, offsetInData = 0; offsetInData < t1; offsetInData = offsetInData0) {
        offsetInFile = offset + offsetInData;
        t3 = B.JSInt_methods._tdivFast$1(offsetInFile, 4096);
        offsetInBlock = B.JSInt_methods.$mod(offsetInFile, 4096);
        t4 = t1 - offsetInData;
        if (offsetInBlock !== 0)
          bytesToWrite = A.min(4096 - offsetInBlock, t4, t2);
        else {
          bytesToWrite = A.min(4096, t4, t2);
          offsetInBlock = 0;
        }
        t4 = B.NativeUint8List_methods.get$buffer(data);
        t5 = B.NativeUint8List_methods.get$offsetInBytes(data);
        if (typeof t5 !== "number")
          return t5.$add();
        offsetInData0 = offsetInData + bytesToWrite;
        this._updateBlock$3(t3 * 4096, offsetInBlock, J.asUint8List$2$x(t4, t5 + offsetInData, bytesToWrite));
      }
      this.set$newFileLength(A.max(this.newFileLength, offset + t1, t2));
    },
    set$newFileLength(newFileLength) {
      this.newFileLength = A._asInt(newFileLength);
    }
  };
  A._FileWriteRequest__updateBlock_closure.prototype = {
    call$0() {
      var t5,
        block = A.NativeUint8List_NativeUint8List(4096),
        t1 = this.$this.originalContent,
        t2 = J.getInterceptor$asx(t1),
        t3 = t2.get$length(t1),
        t4 = this.blockOffset;
      if (typeof t3 !== "number")
        return t3.$gt();
      if (typeof t4 !== "number")
        return A.iae(t4);
      if (t3 > t4) {
        t3 = t2.get$buffer(t1);
        t5 = t2.get$offsetInBytes(t1);
        if (typeof t5 !== "number")
          return t5.$add();
        t1 = t2.get$length(t1);
        if (typeof t1 !== "number")
          return t1.$sub();
        B.NativeUint8List_methods.setAll$2(block, 0, J.asUint8List$2$x(t3, t5 + t4, A.min(4096, t1 - t4, type$.int)));
      }
      return block;
    },
    $signature: 50
  };
  A._OffsetAndBuffer.prototype = {};
  A.IndexedDbFileSystem.prototype = {
    get$isClosed() {
      return A.boolConversionCheck(this._isClosing) || A.boolConversionCheck(this._asynchronous.get$_isClosed());
    },
    _submitWork$1(work) {
      type$._IndexedDbWorkItem._as(work);
      this._checkClosed$0();
      if (work.insertInto$1(this._pendingWork)) {
        this._startWorkingIfNeeded$0();
        return work.completer.get$future();
      } else
        return A.Future_Future$value(null, type$.void);
    },
    _submitWorkFunction$2(work, description) {
      return this._submitWork$1(A._FunctionWorkItem$(type$.void_Function._as(work), A._asString(description)));
    },
    _startWorkingIfNeeded$0() {
      var t1, t2, item, workUnit, _this = this;
      if (_this._currentWorkItem == null && A.boolConversionCheck(J.get$isNotEmpty$asx(_this._pendingWork))) {
        t1 = _this._pendingWork;
        t2 = J.getInterceptor$ax(t1);
        item = t2.get$first(t1);
        _this.set$_currentWorkItem(item);
        t2.remove$1(t1, item);
        workUnit = A.Future_Future(item.get$run(), type$.void).whenComplete$1(new A.IndexedDbFileSystem__startWorkingIfNeeded_closure(_this));
        item.completer.complete$1(workUnit);
      }
    },
    close$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, result, t1, t2;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!A.boolConversionCheck($async$self._isClosing)) {
                result = $async$self._submitWorkFunction$2($async$self._asynchronous.get$close(), "close");
                $async$self._isClosing = true;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              } else {
                t1 = $async$self._pendingWork;
                t2 = J.getInterceptor$asx(t1);
                if (A.boolConversionCheck(t2.get$isNotEmpty(t1))) {
                  $async$returnValue = t2.get$last(t1).completer.get$future();
                  // goto return
                  $async$goto = 1;
                  break;
                }
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    },
    _checkClosed$0() {
      if (A.boolConversionCheck(this.get$isClosed()))
        throw A.wrapException(A.VfsException$(10));
    },
    _fileId$1(path) {
      return this._fileId$body$IndexedDbFileSystem(A._asString(path));
    },
    _fileId$body$IndexedDbFileSystem(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$self = this, t3, t1, t2;
      var $async$_fileId$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._knownFileIds;
              t2 = J.getInterceptor$asx(t1);
              $async$goto = t1.containsKey$1(path) ? 3 : 5;
              break;
            case 3:
              // then
              t1 = t2.$index(t1, path);
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 6;
              return A._asyncAwait($async$self._asynchronous.fileIdForPath$1(path), $async$_fileId$1);
            case 6:
              // returning from await.
              t3 = $async$result;
              t3.toString;
              t2.$indexSet(t1, path, t3);
              $async$returnValue = t3;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_fileId$1, $async$completer);
    },
    _readFiles$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t3, t4, $name, fileId, buffer, data, t1, rawFiles;
      var $async$_readFiles$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._asynchronous;
              $async$goto = 2;
              return A._asyncAwait(t1.listFiles$0(), $async$_readFiles$0);
            case 2:
              // returning from await.
              rawFiles = $async$result;
              J.addAll$1$ax($async$self._knownFileIds, rawFiles);
              t2 = J.get$iterator$ax(rawFiles.get$entries()), t3 = $async$self._memory;
            case 3:
              // for condition
              if (!A.boolConversionCheck(t2.moveNext$0())) {
                // goto after for
                $async$goto = 4;
                break;
              }
              t4 = t2.get$current();
              $name = t4.key;
              fileId = t4.value;
              buffer = A.Uint8Buffer$();
              $async$goto = 5;
              return A._asyncAwait(t1.readFully$1(fileId), $async$_readFiles$0);
            case 5:
              // returning from await.
              data = $async$result;
              t4 = data.length;
              buffer.set$length(0, t4);
              buffer.setRange$3(0, 0, t4, data);
              J.$indexSet$ax(t3.fileData, $name, buffer);
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_readFiles$0, $async$completer);
    },
    flush$0() {
      return this._submitWorkFunction$2(new A.IndexedDbFileSystem_flush_closure(), "flush");
    },
    xAccess$2(path, flags) {
      return this._memory.xAccess$2(A._asString(path), A._asInt(flags));
    },
    xDelete$2(path, syncDir) {
      var _this = this;
      A._asString(path);
      _this._memory.xDelete$2(path, A._asInt(syncDir));
      if (!J.remove$1$ax(_this._inMemoryOnlyFiles, path))
        _this._submitWork$1(A._DeleteFileWorkItem$(_this, path));
    },
    xFullPathName$1(path) {
      return this._memory.xFullPathName$1(A._asString(path));
    },
    xOpen$2(path, flags) {
      var pathStr, t1, t2, inMemoryFile, _this = this;
      type$.Sqlite3Filename._as(path);
      A._asInt(flags);
      pathStr = path.path;
      if (pathStr == null)
        pathStr = A.GenerateFilename_randomFileName(_this.random, "/");
      t1 = _this._memory;
      t2 = t1.xAccess$2(pathStr, 0);
      inMemoryFile = t1.xOpen$2(A.Sqlite3Filename$(pathStr), flags);
      if (t2 === 0)
        if ((flags & 8) !== 0)
          J.add$1$ax(_this._inMemoryOnlyFiles, pathStr);
        else
          _this._submitWork$1(A._CreateFileWorkItem$(_this, pathStr));
      return new A._Record_2_file_outFlags(A._IndexedDbFile$(_this, inMemoryFile._0, pathStr), 0);
    },
    xSleep$1(duration) {
      type$.Duration._as(duration);
    },
    set$_currentWorkItem(_currentWorkItem) {
      this._currentWorkItem = type$.nullable__IndexedDbWorkItem._as(_currentWorkItem);
    }
  };
  A.IndexedDbFileSystem__startWorkingIfNeeded_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._currentWorkItem = null;
      t1._startWorkingIfNeeded$0();
    },
    $signature: 3
  };
  A.IndexedDbFileSystem_flush_closure.prototype = {
    call$0() {
    },
    $signature: 3
  };
  A._IndexedDbFile.prototype = {
    xRead$2(target, fileOffset) {
      this.memoryFile.xRead$2(type$.Uint8List._as(target), A._asInt(fileOffset));
    },
    get$xDeviceCharacteristics() {
      return 0;
    },
    xCheckReservedLock$0() {
      return this.memoryFile.xCheckReservedLock$0();
    },
    xClose$0() {
    },
    xFileSize$0() {
      return this.memoryFile.xFileSize$0();
    },
    xLock$1(mode) {
      return this.memoryFile.xLock$1(A._asInt(mode));
    },
    xSync$1(flags) {
      A._asInt(flags);
    },
    xTruncate$1(size) {
      var t1, t2, _this = this;
      A._asInt(size);
      t1 = _this.vfs;
      t1._checkClosed$0();
      _this.memoryFile.xTruncate$1(size);
      t2 = _this.path;
      if (!J.contains$1$asx(t1._inMemoryOnlyFiles, t2))
        t1._submitWorkFunction$2(new A._IndexedDbFile_xTruncate_closure(_this, size), "truncate " + A.S(t2));
    },
    xUnlock$1(mode) {
      return this.memoryFile.xUnlock$1(A._asInt(mode));
    },
    xWrite$2(buffer, fileOffset) {
      var t1, t2, previousContent, previousList, copy, _this = this;
      type$.Uint8List._as(buffer);
      A._asInt(fileOffset);
      t1 = _this.vfs;
      t1._checkClosed$0();
      t2 = _this.path;
      if (J.contains$1$asx(t1._inMemoryOnlyFiles, t2)) {
        _this.memoryFile.xWrite$2(buffer, fileOffset);
        return;
      }
      previousContent = J.$index$asx(t1._memory.fileData, t2);
      if (previousContent == null)
        previousContent = A.Uint8Buffer$();
      previousList = J.asUint8List$2$x(previousContent.get$buffer(0), 0, previousContent.get$length(0));
      _this.memoryFile.xWrite$2(buffer, fileOffset);
      copy = A.NativeUint8List_NativeUint8List(buffer.length);
      J.setAll$2$ax(copy, 0, buffer);
      t2 = A._WriteFileWorkItem$(t1, t2, previousList);
      J.add$1$ax(t2.writes, A._OffsetAndBuffer$(fileOffset, copy));
      t1._submitWork$1(t2);
    },
    $isVirtualFileSystemFile: 1
  };
  A._IndexedDbFile_xTruncate_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1, $async$temp2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.vfs;
              $async$temp1 = J;
              $async$temp2 = t2._asynchronous;
              $async$goto = 3;
              return A._asyncAwait(t2._fileId$1(t1.path), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.truncate$2$z($async$temp2, $async$result, $async$self.size);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._IndexedDbWorkItem.prototype = {
    insertInto$1(pending) {
      type$.LinkedList__IndexedDbWorkItem._as(pending).add$1(0, this);
      return true;
    }
  };
  A._FunctionWorkItem.prototype = {
    run$0() {
      return this.work.call$0();
    }
  };
  A._DeleteFileWorkItem.prototype = {
    insertInto$1(pending) {
      var current, t1, previous;
      type$.LinkedList__IndexedDbWorkItem._as(pending);
      if (A.boolConversionCheck(pending.get$isNotEmpty(0))) {
        current = pending.get$last(0);
        for (t1 = this.path; current != null;)
          if (current instanceof A._DeleteFileWorkItem)
            if (A.boolConversionCheck(J.$eq$(current.path, t1)))
              return false;
            else
              current = current.get$previous();
          else if (current instanceof A._WriteFileWorkItem) {
            previous = current.get$previous();
            if (A.boolConversionCheck(J.$eq$(current.path, t1)))
              current.unlink$0();
            current = previous;
          } else if (current instanceof A._CreateFileWorkItem) {
            if (A.boolConversionCheck(J.$eq$(current.path, t1))) {
              current.unlink$0();
              return false;
            }
            current = current.get$previous();
          } else
            break;
      }
      pending.add$1(0, this);
      return true;
    },
    run$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, id;
      var $async$run$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.fileSystem;
              t2 = $async$self.path;
              $async$goto = 2;
              return A._asyncAwait(t1._fileId$1(t2), $async$run$0);
            case 2:
              // returning from await.
              id = $async$result;
              J.remove$1$ax(t1._knownFileIds, t2);
              $async$goto = 3;
              return A._asyncAwait(t1._asynchronous.deleteFile$1(id), $async$run$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$0, $async$completer);
    }
  };
  A._CreateFileWorkItem.prototype = {
    run$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, id;
      var $async$run$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.fileSystem;
              t2 = $async$self.path;
              $async$goto = 2;
              return A._asyncAwait(t1._asynchronous.createFile$1(t2), $async$run$0);
            case 2:
              // returning from await.
              id = $async$result;
              J.$indexSet$ax(t1._knownFileIds, t2, id);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$0, $async$completer);
    }
  };
  A._WriteFileWorkItem.prototype = {
    insertInto$1(pending) {
      var current, t1;
      type$.LinkedList__IndexedDbWorkItem._as(pending);
      current = A.boolConversionCheck(pending.get$isEmpty(0)) ? null : pending.get$last(0);
      for (t1 = this.path; current != null;)
        if (current instanceof A._WriteFileWorkItem)
          if (A.boolConversionCheck(J.$eq$(current.path, t1))) {
            J.addAll$1$ax(current.writes, this.writes);
            return false;
          } else
            current = current.get$previous();
        else if (current instanceof A._CreateFileWorkItem) {
          if (A.boolConversionCheck(J.$eq$(current.path, t1)))
            break;
          current = current.get$previous();
        } else
          break;
      pending.add$1(0, this);
      return true;
    },
    run$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, request, $async$temp1;
      var $async$run$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request = A._FileWriteRequest$($async$self.originalContent);
              for (t1 = J.get$iterator$ax($async$self.writes); A.boolConversionCheck(t1.moveNext$0());) {
                t2 = t1.get$current();
                request.addWrite$2(t2.offset, t2.buffer);
              }
              t1 = $async$self.fileSystem;
              $async$temp1 = t1._asynchronous;
              $async$goto = 3;
              return A._asyncAwait(t1._fileId$1($async$self.path), $async$run$0);
            case 3:
              // returning from await.
              $async$goto = 2;
              return A._asyncAwait($async$temp1._write$2($async$result, request), $async$run$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$0, $async$completer);
    }
  };
  A.FileType.prototype = {
    _enumToString$0() {
      return "FileType." + A.S(this._core$_name);
    }
  };
  A.SimpleOpfsFileSystem.prototype = {
    _markExists$2(type, exists) {
      var t1, t2;
      type$.FileType._as(type);
      t1 = this._existsList;
      t2 = A._asBool(exists) ? 1 : 0;
      J.$indexSet$ax(t1, type.index, t2);
      A.FileSystemSyncAccessHandleApi_writeDart(this._metaHandle, t1, {at: 0});
    },
    _recognizeType$1(path) {
      A._asString(path);
      return J.$index$asx($.$get$FileType_byName(), path);
    },
    xAccess$2(path, flags) {
      var type, t1, _this = this;
      A._asString(path);
      A._asInt(flags);
      type = _this._recognizeType$1(path);
      if (type == null)
        return _this._simple_opfs$_memory.xAccess$2(path, flags);
      else {
        t1 = _this._existsList;
        A.FileSystemSyncAccessHandleApi_readDart(_this._metaHandle, t1, {at: 0});
        return J.$index$asx(t1, type.index);
      }
    },
    xDelete$2(path, syncDir) {
      var type;
      A._asString(path);
      A._asInt(syncDir);
      type = this._recognizeType$1(path);
      if (type == null)
        return this._simple_opfs$_memory.xDelete$2(path, syncDir);
      else
        this._markExists$2(type, false);
    },
    xFullPathName$1(path) {
      A._asString(path);
      return $.$get$url().normalize$1("/" + path);
    },
    xOpen$2(path, flags) {
      var pathStr, recognized, t1, t2, _this = this;
      type$.Sqlite3Filename._as(path);
      A._asInt(flags);
      pathStr = path.path;
      if (pathStr == null)
        return _this._simple_opfs$_memory.xOpen$2(path, flags);
      recognized = _this._recognizeType$1(pathStr);
      if (recognized == null)
        return _this._simple_opfs$_memory.xOpen$2(path, flags);
      t1 = _this._existsList;
      A.FileSystemSyncAccessHandleApi_readDart(_this._metaHandle, t1, {at: 0});
      t1 = J.$index$asx(t1, recognized.index);
      t2 = J.$index$asx(_this._files, recognized);
      t2.toString;
      if (t1 === 0)
        if ((flags & 4) !== 0) {
          A._callMethodUnchecked1(t2, "truncate", 0, type$.void);
          _this._markExists$2(recognized, true);
        } else
          throw A.wrapException(B.VfsException_14);
      return new A._Record_2_file_outFlags(A._SimpleOpfsFile$(_this, recognized, t2, (flags & 8) !== 0), 0);
    },
    xSleep$1(duration) {
      type$.Duration._as(duration);
    },
    close$0() {
      var t2,
        t1 = type$.void;
      A._callMethodUnchecked0(this._metaHandle, "close", t1);
      for (t2 = J.get$iterator$ax(this._files.get$values()); A.boolConversionCheck(t2.moveNext$0());)
        A._callMethodUnchecked0(t2.get$current(), "close", t1);
    }
  };
  A.SimpleOpfsFileSystem_inDirectory_open.prototype = {
    $call$body$SimpleOpfsFileSystem_inDirectory_open($name) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$temp1 = A;
              $async$temp2 = A;
              $async$goto = 4;
              return A._asyncAwait(A.FileSystemDirectoryHandleApi_openFile($async$self.root, $name, true), $async$call$1);
            case 4:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait($async$temp1.JSPromiseToFuture_get_toDart($async$temp2._callMethodUnchecked0($async$result, "createSyncAccessHandle", t1), t1), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    call$1($name) {
      return this.$call$body$SimpleOpfsFileSystem_inDirectory_open(A._asString($name));
    },
    $signature: 51
  };
  A._SimpleOpfsFile.prototype = {
    readInto$2(buffer, offset) {
      return A.FileSystemSyncAccessHandleApi_readDart(this.syncHandle, type$.Uint8List._as(buffer), {at: A._asInt(offset)});
    },
    xCheckReservedLock$0() {
      var t1 = this._simple_opfs$_lockMode;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 2 ? 1 : 0;
    },
    xClose$0() {
      var _this = this;
      A._callMethodUnchecked0(_this.syncHandle, "flush", type$.void);
      if (A.boolConversionCheck(_this.deleteOnClose))
        _this.vfs._markExists$2(_this.type, false);
    },
    xFileSize$0() {
      return A._callMethodUnchecked0(this.syncHandle, "getSize", type$.int);
    },
    xLock$1(mode) {
      this._simple_opfs$_lockMode = A._asInt(mode);
    },
    xSync$1(flags) {
      A._asInt(flags);
      A._callMethodUnchecked0(this.syncHandle, "flush", type$.void);
    },
    xTruncate$1(size) {
      A._callMethodUnchecked1(this.syncHandle, "truncate", A._asInt(size), type$.void);
    },
    xUnlock$1(mode) {
      this._simple_opfs$_lockMode = A._asInt(mode);
    },
    xWrite$2(buffer, fileOffset) {
      type$.Uint8List._as(buffer);
      if (A.FileSystemSyncAccessHandleApi_writeDart(this.syncHandle, buffer, {at: A._asInt(fileOffset)}) < buffer.length)
        throw A.wrapException(B.VfsException_778);
    }
  };
  A.WasmBindings.prototype = {
    WasmBindings$_$2(instance, values) {
      values.set$bindings(this);
    },
    allocateBytes$2$additionalLength(bytes, additionalLength) {
      var t1, t2, ptr, t3, t4;
      type$.List_int._as(bytes);
      A._asInt(additionalLength);
      t1 = J.getInterceptor$asx(bytes);
      t2 = t1.get$length(bytes);
      if (typeof t2 !== "number")
        return t2.$add();
      ptr = this.malloc$1(t2 + additionalLength);
      t2 = A.WrappedMemory_get_asBytes(this.memory);
      t3 = t1.get$length(bytes);
      if (typeof t3 !== "number")
        return A.iae(t3);
      t4 = J.getInterceptor$ax(t2);
      t4.setRange$3(t2, ptr, ptr + t3, bytes);
      t3 = t1.get$length(bytes);
      if (typeof t3 !== "number")
        return A.iae(t3);
      t1 = t1.get$length(bytes);
      if (typeof t1 !== "number")
        return A.iae(t1);
      t4.fillRange$3(t2, ptr + t3, ptr + t1 + additionalLength, 0);
      return ptr;
    },
    allocateBytes$1(bytes) {
      return this.allocateBytes$2$additionalLength(bytes, 0);
    },
    allocateZeroTerminated$1(string) {
      return this.allocateBytes$2$additionalLength(B.C_Utf8Codec.encode$1(A._asString(string)), 1);
    },
    malloc$1(size) {
      return A._extension_1_callReturningInt(this._malloc, A.NumToJSExtension_get_toJS(A._asInt(size)));
    },
    free$1(pointer) {
      A._extension_1_callReturningVoid(this._free, A.NumToJSExtension_get_toJS(A._asInt(pointer)));
    },
    sqlite3_initialize$0() {
      var t1,
        _0_0 = this._sqlite3_initialize;
      $label0$0: {
        if (_0_0 != null) {
          t1 = A._extension_1_callReturningInt0(_0_0);
          break $label0$0;
        }
        t1 = 0;
        break $label0$0;
      }
      return t1;
    },
    dart_sqlite3_register_vfs$3($name, dartId, makeDefault) {
      A._asInt($name);
      A._asInt(dartId);
      A._asInt(makeDefault);
      return A._extension_1_callReturningInt3(this._register_vfs, A.NumToJSExtension_get_toJS($name), A.NumToJSExtension_get_toJS(dartId), A.NumToJSExtension_get_toJS(makeDefault));
    },
    sqlite3_vfs_unregister$1(vfs) {
      return A._extension_1_callReturningInt(this._unregister_vfs, A.NumToJSExtension_get_toJS(A._asInt(vfs)));
    },
    sqlite3_open_v2$4(filename, ppDb, flags, zVfs) {
      A._asInt(filename);
      A._asInt(ppDb);
      A._asInt(flags);
      A._asInt(zVfs);
      return A._extension_1_callReturningInt4(this._sqlite3_open_v2, A.NumToJSExtension_get_toJS(filename), A.NumToJSExtension_get_toJS(ppDb), A.NumToJSExtension_get_toJS(flags), A.NumToJSExtension_get_toJS(zVfs));
    },
    sqlite3_close_v2$1(db) {
      return A._extension_1_callReturningInt(this._sqlite3_close_v2, A.NumToJSExtension_get_toJS(A._asInt(db)));
    },
    sqlite3_extended_errcode$1(db) {
      return A._extension_1_callReturningInt(this._sqlite3_extended_errcode, A.NumToJSExtension_get_toJS(A._asInt(db)));
    },
    sqlite3_errmsg$1(db) {
      return A._extension_1_callReturningInt(this._sqlite3_errmsg, A.NumToJSExtension_get_toJS(A._asInt(db)));
    },
    sqlite3_errstr$1(resultCode) {
      return A._extension_1_callReturningInt(this._sqlite3_errstr, A.NumToJSExtension_get_toJS(A._asInt(resultCode)));
    },
    sqlite3_extended_result_codes$2(db, onoff) {
      A._asInt(db);
      A._asInt(onoff);
      return A._extension_1_callReturningInt2(this._sqlite3_extended_result_codes, A.NumToJSExtension_get_toJS(db), A.NumToJSExtension_get_toJS(onoff));
    },
    dart_sqlite3_updates$2(db, id) {
      A._asInt(db);
      A._asInt(id);
      A._extension_1_callReturningVoid2(this._update_hooks, A.NumToJSExtension_get_toJS(db), A.NumToJSExtension_get_toJS(id));
    },
    dart_sqlite3_commits$2(db, id) {
      var t1;
      A._asInt(db);
      A._asInt(id);
      t1 = this._commit_hooks;
      return t1 == null ? null : A._extension_1_callReturningVoid2(t1, A.NumToJSExtension_get_toJS(db), A.NumToJSExtension_get_toJS(id));
    },
    dart_sqlite3_rollbacks$2(db, id) {
      var t1;
      A._asInt(db);
      A._asInt(id);
      t1 = this._rollback_hooks;
      return t1 == null ? null : A._extension_1_callReturningVoid2(t1, A.NumToJSExtension_get_toJS(db), A.NumToJSExtension_get_toJS(id));
    },
    sqlite3_exec$5(db, sql, callback, callbackArg, errorOut) {
      A._asInt(db);
      A._asInt(sql);
      A._asInt(callback);
      A._asInt(callbackArg);
      A._asInt(errorOut);
      return A._extension_1_callReturningInt5(this._sqlite3_exec, A.NumToJSExtension_get_toJS(db), A.NumToJSExtension_get_toJS(sql), A.NumToJSExtension_get_toJS(callback), A.NumToJSExtension_get_toJS(callbackArg), A.NumToJSExtension_get_toJS(errorOut));
    },
    sqlite3_prepare_v3$6(db, sql, $length, prepFlags, ppStmt, pzTail) {
      A._asInt(db);
      A._asInt(sql);
      A._asInt($length);
      A._asInt(prepFlags);
      A._asInt(ppStmt);
      A._asInt(pzTail);
      return A._extension_1_callReturningInt6(this._sqlite3_prepare_v3, A.NumToJSExtension_get_toJS(db), A.NumToJSExtension_get_toJS(sql), A.NumToJSExtension_get_toJS($length), A.NumToJSExtension_get_toJS(prepFlags), A.NumToJSExtension_get_toJS(ppStmt), A.NumToJSExtension_get_toJS(pzTail));
    },
    sqlite3_bind_parameter_count$1(stmt) {
      return A._extension_1_callReturningInt(this._sqlite3_bind_parameter_count, A.NumToJSExtension_get_toJS(A._asInt(stmt)));
    },
    sqlite3_bind_null$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A._extension_1_callReturningInt2(this._sqlite3_bind_null, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index));
    },
    sqlite3_bind_int64$3(stmt, index, value) {
      A._asInt(stmt);
      A._asInt(index);
      type$.BigInt._as(value);
      return A._extension_1_callReturningInt3(this._sqlite3_bind_int64, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index), A.JsBigInt_get_jsObject(A.JsBigInt_constructor_fromBigInt(value)));
    },
    sqlite3_bind_int$3(stmt, index, value) {
      A._asInt(stmt);
      A._asInt(index);
      A._asInt(value);
      return A._extension_1_callReturningInt3(this._sqlite3_bind_int64, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index), A.JsBigInt_get_jsObject(A.JsBigInt_constructor_fromInt(value)));
    },
    sqlite3_bind_double$3(stmt, index, value) {
      A._asInt(stmt);
      A._asInt(index);
      A._asDouble(value);
      return A._extension_1_callReturningInt3(this._sqlite3_bind_double, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index), A.DoubleToJSNumber_get_toJS(value));
    },
    sqlite3_bind_text$5(stmt, index, text, $length, a) {
      A._asInt(stmt);
      A._asInt(index);
      A._asInt(text);
      A._asInt($length);
      A._asInt(a);
      return A._extension_1_callReturningInt5(this._sqlite3_bind_text, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index), A.NumToJSExtension_get_toJS(text), A.NumToJSExtension_get_toJS($length), A.NumToJSExtension_get_toJS(a));
    },
    sqlite3_bind_blob64$5(stmt, index, test, $length, a) {
      A._asInt(stmt);
      A._asInt(index);
      A._asInt(test);
      A._asInt($length);
      A._asInt(a);
      return A._extension_1_callReturningInt5(this._sqlite3_bind_blob64, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index), A.NumToJSExtension_get_toJS(test), A.JsBigInt_get_jsObject(A.JsBigInt_constructor_fromInt($length)), A.NumToJSExtension_get_toJS(a));
    },
    sqlite3_column_count$1(stmt) {
      return A._extension_1_callReturningInt(this._sqlite3_column_count, A.NumToJSExtension_get_toJS(A._asInt(stmt)));
    },
    sqlite3_column_name$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A._extension_1_callReturningInt2(this._sqlite3_column_name, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index));
    },
    sqlite3_column_type$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A._extension_1_callReturningInt2(this._sqlite3_column_type, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index));
    },
    sqlite3_column_int64$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A.JsBigInt_constructor_(type$.JavaScriptBigInt._as(A._callMethodUnchecked3(this._sqlite3_column_int64, "call", null, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index), type$.nullable_Object)));
    },
    sqlite3_column_double$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A.JSNumberToNumber_get_toDartDouble(A._asDouble(A._callMethodUnchecked3(this._sqlite3_column_double, "call", null, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index), type$.nullable_Object)));
    },
    sqlite3_column_bytes$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A._extension_1_callReturningInt2(this._sqlite3_column_bytes, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index));
    },
    sqlite3_column_text$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A._extension_1_callReturningInt2(this._sqlite3_column_text, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index));
    },
    sqlite3_column_blob$2(stmt, index) {
      A._asInt(stmt);
      A._asInt(index);
      return A._extension_1_callReturningInt2(this._sqlite3_column_blob, A.NumToJSExtension_get_toJS(stmt), A.NumToJSExtension_get_toJS(index));
    },
    sqlite3_user_data$1(context) {
      return A._extension_1_callReturningInt(this._sqlite3_user_data, A.NumToJSExtension_get_toJS(A._asInt(context)));
    },
    sqlite3_step$1(stmt) {
      return A._extension_1_callReturningInt(this._sqlite3_step, A.NumToJSExtension_get_toJS(A._asInt(stmt)));
    },
    sqlite3_reset$1(stmt) {
      return A._extension_1_callReturningInt(this._sqlite3_reset, A.NumToJSExtension_get_toJS(A._asInt(stmt)));
    },
    sqlite3_finalize$1(stmt) {
      return A._extension_1_callReturningInt(this._sqlite3_finalize, A.NumToJSExtension_get_toJS(A._asInt(stmt)));
    },
    sqlite3_get_autocommit$1(db) {
      return A._extension_1_callReturningInt(this._sqlite3_get_autocommit, A.NumToJSExtension_get_toJS(A._asInt(db)));
    }
  };
  A._InjectedValues.prototype = {
    get$bindings() {
      return this.___InjectedValues_bindings_A;
    },
    set$bindings(value) {
      this.___InjectedValues_bindings_A = type$.WasmBindings._as(value);
    },
    get$injectedValues() {
      return this.___InjectedValues_injectedValues_A;
    },
    set$injectedValues(value) {
      this.set$___InjectedValues_injectedValues_A(type$.Map_of_String_and_Map_String_JSObject._as(value));
    },
    get$memory() {
      return this.___InjectedValues_memory_A;
    },
    set$memory(value) {
      this.___InjectedValues_memory_A = type$.JSObject._as(value);
    },
    _InjectedValues$0() {
      var _this = this,
        t1 = type$.Object,
        t2 = type$.JSObject,
        memory = A._callConstructorUnchecked1(A._getPropertyTrustType(A._getPropertyTrustType(A.staticInteropGlobalContext(), "WebAssembly", t1), "Memory", t1), {initial: A.NumToJSExtension_get_toJS(16)}, t2);
      _this.set$memory(memory);
      t1 = type$.String;
      _this.set$injectedValues(A.LinkedHashMap_LinkedHashMap$_literal(["env", A.LinkedHashMap_LinkedHashMap$_literal(["memory", memory], t1, t2), "dart", A.LinkedHashMap_LinkedHashMap$_literal(["error_log", A._functionToJS1(new A._InjectedValues_closure(memory)), "xOpen", A._functionToJS5(new A._InjectedValues_closure0(_this, memory)), "xDelete", A._functionToJS3(new A._InjectedValues_closure1(_this, memory)), "xAccess", A._functionToJS4(new A._InjectedValues_closure2(_this, memory)), "xFullPathname", A._functionToJS4(new A._InjectedValues_closure3(_this, memory)), "xRandomness", A._functionToJS3(new A._InjectedValues_closure4(_this, memory)), "xSleep", A._functionToJS2(new A._InjectedValues_closure5(_this)), "xCurrentTimeInt64", A._functionToJS2(new A._InjectedValues_closure6(_this, memory)), "xDeviceCharacteristics", A._functionToJS1(new A._InjectedValues_closure7(_this)), "xClose", A._functionToJS1(new A._InjectedValues_closure8(_this)), "xRead", A._functionToJS4(new A._InjectedValues_closure9(_this, memory)), "xWrite", A._functionToJS4(new A._InjectedValues_closure10(_this, memory)), "xTruncate", A._functionToJS2(new A._InjectedValues_closure11(_this)), "xSync", A._functionToJS2(new A._InjectedValues_closure12(_this)), "xFileSize", A._functionToJS2(new A._InjectedValues_closure13(_this, memory)), "xLock", A._functionToJS2(new A._InjectedValues_closure14(_this)), "xUnlock", A._functionToJS2(new A._InjectedValues_closure15(_this)), "xCheckReservedLock", A._functionToJS2(new A._InjectedValues_closure16(_this, memory)), "function_xFunc", A._functionToJS3(new A._InjectedValues_closure17(_this)), "function_xStep", A._functionToJS3(new A._InjectedValues_closure18(_this)), "function_xInverse", A._functionToJS3(new A._InjectedValues_closure19(_this)), "function_xFinal", A._functionToJS1(new A._InjectedValues_closure20(_this)), "function_xValue", A._functionToJS1(new A._InjectedValues_closure21(_this)), "function_forget", A._functionToJS1(new A._InjectedValues_closure22(_this)), "function_compare", A._functionToJS5(new A._InjectedValues_closure23(_this, memory)), "function_hook", A._functionToJS5(new A._InjectedValues_closure24(_this, memory)), "function_commit_hook", A._functionToJS1(new A._InjectedValues_closure25(_this)), "function_rollback_hook", A._functionToJS1(new A._InjectedValues_closure26(_this))], t1, t2)], t1, type$.Map_String_JSObject));
    },
    set$___InjectedValues_injectedValues_A(___InjectedValues_injectedValues_A) {
      this.___InjectedValues_injectedValues_A = type$.Map_of_String_and_Map_String_JSObject._as(___InjectedValues_injectedValues_A);
    }
  };
  A._InjectedValues_closure.prototype = {
    call$1(ptr) {
      A.print("[sqlite3] " + A.S(A.WrappedMemory_readString(this.memory, A._asInt(ptr))));
    },
    $signature: 9
  };
  A._InjectedValues_closure0.prototype = {
    call$5(vfsId, zName, dartFdPtr, flags, pOutFlags) {
      var t1, t2, t3;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(dartFdPtr);
      A._asInt(flags);
      A._asInt(pOutFlags);
      t1 = this.$this;
      t2 = J.$index$asx(t1.callbacks.registeredVfs, vfsId);
      t2.toString;
      t3 = this.memory;
      return A._runVfs(new A._InjectedValues__closure13(t1, t2, A.Sqlite3Filename$(A.WrappedMemory_readNullableString(t3, zName, null)), flags, t3, dartFdPtr, pOutFlags));
    },
    $signature: 19
  };
  A._InjectedValues__closure13.prototype = {
    call$0() {
      var t2, _this = this,
        result = _this.vfs.xOpen$2(_this.path, _this.flags),
        t1 = _this.memory;
      A.WrappedMemory_setInt32Value(t1, _this.dartFdPtr, _this.$this.callbacks.registerFile$1(result._0));
      t2 = _this.pOutFlags;
      if (!A.boolConversionCheck(J.$eq$(t2, 0)))
        A.WrappedMemory_setInt32Value(t1, t2, result._1);
    },
    $signature: 0
  };
  A._InjectedValues_closure1.prototype = {
    call$3(vfsId, zName, syncDir) {
      var t1;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(syncDir);
      t1 = J.$index$asx(this.$this.callbacks.registeredVfs, vfsId);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure12(t1, A.WrappedMemory_readString(this.memory, zName), syncDir));
    },
    $signature: 25
  };
  A._InjectedValues__closure12.prototype = {
    call$0() {
      return this.vfs.xDelete$2(this.path, this.syncDir);
    },
    $signature: 0
  };
  A._InjectedValues_closure2.prototype = {
    call$4(vfsId, zName, flags, pResOut) {
      var t1, t2;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(flags);
      A._asInt(pResOut);
      t1 = J.$index$asx(this.$this.callbacks.registeredVfs, vfsId);
      t1.toString;
      t2 = this.memory;
      return A._runVfs(new A._InjectedValues__closure11(t1, A.WrappedMemory_readString(t2, zName), flags, t2, pResOut));
    },
    $signature: 18
  };
  A._InjectedValues__closure11.prototype = {
    call$0() {
      var _this = this;
      A.WrappedMemory_setInt32Value(_this.memory, _this.pResOut, _this.vfs.xAccess$2(_this.path, _this.flags));
    },
    $signature: 0
  };
  A._InjectedValues_closure3.prototype = {
    call$4(vfsId, zName, nOut, zOut) {
      var t1, t2;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(nOut);
      A._asInt(zOut);
      t1 = J.$index$asx(this.$this.callbacks.registeredVfs, vfsId);
      t1.toString;
      t2 = this.memory;
      return A._runVfs(new A._InjectedValues__closure10(t1, A.WrappedMemory_readString(t2, zName), nOut, t2, zOut));
    },
    $signature: 18
  };
  A._InjectedValues__closure10.prototype = {
    call$0() {
      var t3, t4, _this = this,
        encoded = B.C_Utf8Codec.encode$1(_this.vfs.xFullPathName$1(_this.path)),
        t1 = encoded.length,
        t2 = _this.nOut;
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 > t2)
        throw A.wrapException(A.VfsException$(14));
      t2 = A.WrappedMemory_get_asBytes(_this.memory);
      t3 = _this.zOut;
      t4 = J.getInterceptor$ax(t2);
      t4.setAll$2(t2, t3, encoded);
      if (typeof t3 !== "number")
        return t3.$add();
      t4.$indexSet(t2, t3 + t1, 0);
    },
    $signature: 0
  };
  A._InjectedValues_closure4.prototype = {
    call$3(vfsId, nByte, zOut) {
      A._asInt(vfsId);
      A._asInt(nByte);
      return A._runVfs(new A._InjectedValues__closure9(this.memory, A._asInt(zOut), nByte, J.$index$asx(this.$this.callbacks.registeredVfs, vfsId)));
    },
    $signature: 25
  };
  A._InjectedValues__closure9.prototype = {
    call$0() {
      var _this = this,
        target = J.asUint8List$2$x(A.JSArrayBufferToByteBuffer_get_toDart(A.getProperty(_this.memory, "buffer", type$.NativeByteBuffer)), _this.zOut, _this.nByte),
        t1 = _this.vfs;
      if (t1 != null)
        t1.xRandomness$1(target);
      else
        return A.BaseVirtualFileSystem_generateRandomness(target, null);
    },
    $signature: 0
  };
  A._InjectedValues_closure5.prototype = {
    call$2(vfsId, micros) {
      var t1;
      A._asInt(vfsId);
      A._asInt(micros);
      t1 = J.$index$asx(this.$this.callbacks.registeredVfs, vfsId);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure8(t1, micros));
    },
    $signature: 4
  };
  A._InjectedValues__closure8.prototype = {
    call$0() {
      this.vfs.xSleep$1(A.Duration$(this.micros, 0));
    },
    $signature: 0
  };
  A._InjectedValues_closure6.prototype = {
    call$2(vfsId, target) {
      A._asInt(vfsId);
      A.WrappedMemory_setInt64Value(this.memory, A._asInt(target), A.JsBigInt_constructor_fromInt(J.$index$asx(this.$this.callbacks.registeredVfs, vfsId).xCurrentTime$0().get$millisecondsSinceEpoch()));
    },
    $signature: 56
  };
  A._InjectedValues_closure7.prototype = {
    call$1(fd) {
      A._asInt(fd);
      return J.$index$asx(this.$this.callbacks.openedFiles, fd).get$xDeviceCharacteristics();
    },
    $signature: 13
  };
  A._InjectedValues_closure8.prototype = {
    call$1(fd) {
      var t1, t2;
      A._asInt(fd);
      t1 = this.$this;
      t2 = J.$index$asx(t1.callbacks.openedFiles, fd);
      t2.toString;
      return A._runVfs(new A._InjectedValues__closure7(t1, t2, fd));
    },
    $signature: 13
  };
  A._InjectedValues__closure7.prototype = {
    call$0() {
      this.file.xClose$0();
      J.remove$1$ax(this.$this.callbacks.openedFiles, this.fd);
    },
    $signature: 0
  };
  A._InjectedValues_closure9.prototype = {
    call$4(fd, target, amount, offset) {
      var t1;
      A._asInt(fd);
      A._asInt(target);
      A._asInt(amount);
      type$.JavaScriptBigInt._as(offset);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure6(t1, this.memory, target, amount, offset));
    },
    $signature: 17
  };
  A._InjectedValues__closure6.prototype = {
    call$0() {
      var _this = this;
      _this.file.xRead$2(J.asUint8List$2$x(A.JSArrayBufferToByteBuffer_get_toDart(A.getProperty(_this.memory, "buffer", type$.NativeByteBuffer)), _this.target, _this.amount), A.JsBigInt_get_asDartInt(A.JsBigInt_constructor_(_this.offset)));
    },
    $signature: 0
  };
  A._InjectedValues_closure10.prototype = {
    call$4(fd, source, amount, offset) {
      var t1;
      A._asInt(fd);
      A._asInt(source);
      A._asInt(amount);
      type$.JavaScriptBigInt._as(offset);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure5(t1, this.memory, source, amount, offset));
    },
    $signature: 17
  };
  A._InjectedValues__closure5.prototype = {
    call$0() {
      var _this = this;
      _this.file.xWrite$2(J.asUint8List$2$x(A.JSArrayBufferToByteBuffer_get_toDart(A.getProperty(_this.memory, "buffer", type$.NativeByteBuffer)), _this.source, _this.amount), A.JsBigInt_get_asDartInt(A.JsBigInt_constructor_(_this.offset)));
    },
    $signature: 0
  };
  A._InjectedValues_closure11.prototype = {
    call$2(fd, size) {
      var t1;
      A._asInt(fd);
      type$.JavaScriptBigInt._as(size);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure4(t1, size));
    },
    $signature: 58
  };
  A._InjectedValues__closure4.prototype = {
    call$0() {
      return this.file.xTruncate$1(A.JsBigInt_get_asDartInt(A.JsBigInt_constructor_(this.size)));
    },
    $signature: 0
  };
  A._InjectedValues_closure12.prototype = {
    call$2(fd, flags) {
      var t1;
      A._asInt(fd);
      A._asInt(flags);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure3(t1, flags));
    },
    $signature: 4
  };
  A._InjectedValues__closure3.prototype = {
    call$0() {
      return this.file.xSync$1(this.flags);
    },
    $signature: 0
  };
  A._InjectedValues_closure13.prototype = {
    call$2(fd, sizePtr) {
      var t1;
      A._asInt(fd);
      A._asInt(sizePtr);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure2(t1, this.memory, sizePtr));
    },
    $signature: 4
  };
  A._InjectedValues__closure2.prototype = {
    call$0() {
      A.WrappedMemory_setInt32Value(this.memory, this.sizePtr, this.file.xFileSize$0());
    },
    $signature: 0
  };
  A._InjectedValues_closure14.prototype = {
    call$2(fd, flags) {
      var t1;
      A._asInt(fd);
      A._asInt(flags);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure1(t1, flags));
    },
    $signature: 4
  };
  A._InjectedValues__closure1.prototype = {
    call$0() {
      return this.file.xLock$1(this.flags);
    },
    $signature: 0
  };
  A._InjectedValues_closure15.prototype = {
    call$2(fd, flags) {
      var t1;
      A._asInt(fd);
      A._asInt(flags);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure0(t1, flags));
    },
    $signature: 4
  };
  A._InjectedValues__closure0.prototype = {
    call$0() {
      return this.file.xUnlock$1(this.flags);
    },
    $signature: 0
  };
  A._InjectedValues_closure16.prototype = {
    call$2(fd, pResOut) {
      var t1;
      A._asInt(fd);
      A._asInt(pResOut);
      t1 = J.$index$asx(this.$this.callbacks.openedFiles, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure(t1, this.memory, pResOut));
    },
    $signature: 4
  };
  A._InjectedValues__closure.prototype = {
    call$0() {
      A.WrappedMemory_setInt32Value(this.memory, this.pResOut, this.file.xCheckReservedLock$0());
    },
    $signature: 0
  };
  A._InjectedValues_closure17.prototype = {
    call$3(ctx, args, value) {
      var t1, id, t2, t3;
      A._asInt(ctx);
      A._asInt(args);
      A._asInt(value);
      t1 = this.$this;
      id = t1.get$bindings().sqlite3_user_data$1(ctx);
      t2 = t1.callbacks;
      t3 = J.$index$asx(t2.functions, id).get$xFunc();
      t3.toString;
      t3.call$2(A.WasmContext$(t1.get$bindings(), ctx, t2), A.WasmValueList$(t1.get$bindings(), args, value));
    },
    $signature: 12
  };
  A._InjectedValues_closure18.prototype = {
    call$3(ctx, args, value) {
      var t1, id, t2, t3;
      A._asInt(ctx);
      A._asInt(args);
      A._asInt(value);
      t1 = this.$this;
      id = t1.get$bindings().sqlite3_user_data$1(ctx);
      t2 = t1.callbacks;
      t3 = J.$index$asx(t2.functions, id).get$xStep();
      t3.toString;
      t3.call$2(A.WasmContext$(t1.get$bindings(), ctx, t2), A.WasmValueList$(t1.get$bindings(), args, value));
    },
    $signature: 12
  };
  A._InjectedValues_closure19.prototype = {
    call$3(ctx, args, value) {
      var t1, id, t2, t3;
      A._asInt(ctx);
      A._asInt(args);
      A._asInt(value);
      t1 = this.$this;
      id = t1.get$bindings().sqlite3_user_data$1(ctx);
      t2 = t1.callbacks;
      t3 = J.$index$asx(t2.functions, id).get$xInverse();
      t3.toString;
      t3.call$2(A.WasmContext$(t1.get$bindings(), ctx, t2), A.WasmValueList$(t1.get$bindings(), args, value));
    },
    $signature: 12
  };
  A._InjectedValues_closure20.prototype = {
    call$1(ctx) {
      var t1, id, t2, t3;
      A._asInt(ctx);
      t1 = this.$this;
      id = t1.get$bindings().sqlite3_user_data$1(ctx);
      t2 = t1.callbacks;
      t3 = J.$index$asx(t2.functions, id).get$xFinal();
      t3.toString;
      t3.call$1(A.WasmContext$(t1.get$bindings(), ctx, t2));
    },
    $signature: 9
  };
  A._InjectedValues_closure21.prototype = {
    call$1(ctx) {
      var t1, id, t2, t3;
      A._asInt(ctx);
      t1 = this.$this;
      id = t1.get$bindings().sqlite3_user_data$1(ctx);
      t2 = t1.callbacks;
      t3 = J.$index$asx(t2.functions, id).get$xValue();
      t3.toString;
      t3.call$1(A.WasmContext$(t1.get$bindings(), ctx, t2));
    },
    $signature: 9
  };
  A._InjectedValues_closure22.prototype = {
    call$1(ctx) {
      A._asInt(ctx);
      this.$this.callbacks.forget$1(ctx);
    },
    $signature: 9
  };
  A._InjectedValues_closure23.prototype = {
    call$5(ctx, lengthA, a, lengthB, b) {
      var t1, aStr, bStr;
      A._asInt(ctx);
      A._asInt(lengthA);
      A._asInt(a);
      A._asInt(lengthB);
      A._asInt(b);
      t1 = this.memory;
      aStr = A.WrappedMemory_readNullableString(t1, a, lengthA);
      bStr = A.WrappedMemory_readNullableString(t1, b, lengthB);
      return J.$index$asx(this.$this.callbacks.functions, ctx).get$collation().call$2(aStr, bStr);
    },
    $signature: 19
  };
  A._InjectedValues_closure24.prototype = {
    call$5(id, kind, _, table, rowId) {
      var tableName, t1;
      A._asInt(id);
      A._asInt(kind);
      A._asInt(_);
      A._asInt(table);
      type$.JavaScriptBigInt._as(rowId);
      tableName = A.WrappedMemory_readString(this.memory, table);
      t1 = this.$this.callbacks.installedUpdateHook;
      if (t1 != null)
        t1.call$3(kind, tableName, A.JsBigInt_get_asDartInt(A.JsBigInt_constructor_(rowId)));
    },
    $signature: 60
  };
  A._InjectedValues_closure25.prototype = {
    call$1(id) {
      var t1;
      A._asInt(id);
      t1 = this.$this.callbacks.installedCommitHook;
      return t1 == null ? null : t1.call$0();
    },
    $signature: 61
  };
  A._InjectedValues_closure26.prototype = {
    call$1(id) {
      var t1;
      A._asInt(id);
      t1 = this.$this.callbacks.installedRollbackHook;
      if (t1 != null)
        t1.call$0();
    },
    $signature: 9
  };
  A.DartCallbacks.prototype = {
    registerVfs$1(vfs) {
      var t1, t2, id;
      type$.VirtualFileSystem._as(vfs);
      t1 = this.registeredVfs;
      t2 = J.getInterceptor$asx(t1);
      id = t2.get$length(t1);
      t2.$indexSet(t1, id, vfs);
      return id;
    },
    registerFile$1(file) {
      var t1, t2, id;
      type$.VirtualFileSystemFile._as(file);
      t1 = this.openedFiles;
      t2 = J.getInterceptor$asx(t1);
      id = t2.get$length(t1);
      t2.$indexSet(t1, id, file);
      return id;
    },
    forget$1(id) {
      return J.remove$1$ax(this.functions, A._asInt(id));
    },
    set$installedUpdateHook(installedUpdateHook) {
      this.installedUpdateHook = type$.nullable_void_Function_int_String_int._as(installedUpdateHook);
    },
    set$installedCommitHook(installedCommitHook) {
      this.installedCommitHook = type$.nullable_int_Function._as(installedCommitHook);
    },
    set$installedRollbackHook(installedRollbackHook) {
      this.installedRollbackHook = type$.nullable_void_Function._as(installedRollbackHook);
    }
  };
  A._channel_closure.prototype = {
    call$1($event) {
      var t1 = type$.JSObject,
        message = A.getProperty(t1._as($event), "data", type$.nullable_Object),
        t2 = this.controller;
      if (A.boolConversionCheck(J.$eq$(message, A.StringToJSString_get_toJS("_disconnect"))))
        t2.get$local().get$sink().close$0();
      else
        J.add$1$ax(t2.get$local().get$sink(), A.Message_deserialize(t1._as(message)));
    },
    $signature: 1
  };
  A._channel_closure0.prototype = {
    call$1(msg) {
      type$.Message_2._as(msg).sendToPort$1(this.port);
    },
    $signature: 21
  };
  A._channel_closure1.prototype = {
    call$0() {
      var t1 = this.port,
        t2 = type$.void;
      A._callMethodUnchecked1(t1, "postMessage", A.StringToJSString_get_toJS("_disconnect"), t2);
      A._callMethodUnchecked0(t1, "close", t2);
      t2 = this.lock;
      if (t2 != null)
        t2.release$0();
    },
    $signature: 0
  };
  A._channel_closure2.prototype = {
    call$1(lock) {
      type$.HeldLock._as(lock);
      this.controller.get$local().get$sink().close$0();
      lock.release$0();
    },
    $signature: 63
  };
  A.ProtocolChannel.prototype = {
    ProtocolChannel$1(_channel) {
      this._channel.get$stream().listen$2$onError(this.get$_handleIncoming(), new A.ProtocolChannel_closure(this));
    },
    get$closed() {
      return this._channel.get$sink().get$done();
    },
    _handleIncoming$1(message) {
      return this._handleIncoming$body$ProtocolChannel(type$.Message_2._as(message));
    },
    _handleIncoming$body$ProtocolChannel(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$self = this, response, e, s, t1, requestId, exception, t2, $async$exception;
      var $async$_handleIncoming$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = message instanceof A.Response;
              requestId = t1 ? message.requestId : null;
              if (t1) {
                t1 = J.remove$1$ax($async$self._responses, requestId);
                if (t1 != null)
                  t1.complete$1(message);
                // goto break $label0$0
                $async$goto = 2;
                break;
              }
              $async$goto = message instanceof A.Request ? 3 : 4;
              break;
            case 3:
              // then
              response = null;
              $async$handler = 6;
              $async$goto = 9;
              return A._asyncAwait($async$self.handleRequest$1(message), $async$_handleIncoming$1);
            case 9:
              // returning from await.
              response = $async$result;
              $async$handler = 1;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              s = A.getTraceFromException($async$exception);
              t1 = type$.JSObject;
              t2 = type$.void;
              A._callMethodUnchecked1(A.getProperty(A.staticInteropGlobalContext(), "console", t1), "error", A.StringToJSString_get_toJS("Error in worker: " + A.S(J.toString$0$(e))), t2);
              A._callMethodUnchecked1(A.getProperty(A.staticInteropGlobalContext(), "console", t1), "error", A.StringToJSString_get_toJS("Original trace: " + A.S(s)), t2);
              response = A.ErrorResponse$(J.toString$0$(e), message.requestId);
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 8:
              // after finally
              J.add$1$ax($async$self._channel.get$sink(), response);
              // goto break $label0$0
              $async$goto = 2;
              break;
            case 4:
              // join
              if (message instanceof A.Notification) {
                $async$self.handleNotification$1(message);
                // goto break $label0$0
                $async$goto = 2;
                break;
              }
              if (message instanceof A.StartFileSystemServer)
                throw A.wrapException(A.StateError$("Should only be a top-level message"));
            case 2:
              // break $label0$0
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleIncoming$1, $async$completer);
    },
    sendNotification$1(notification) {
      type$.Notification._as(notification);
      J.add$1$ax(this._channel.get$sink(), notification);
    },
    close$1(error) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$close$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._channel.get$sink().close$0(), $async$close$1);
            case 2:
              // returning from await.
              for (t1 = $async$self._responses, t2 = J.get$iterator$ax(t1.get$values()); A.boolConversionCheck(t2.moveNext$0());)
                t2.get$current().completeError$1(A.StateError$("Channel closed before receiving response: " + A.S(error)));
              J.clear$0$ax(t1);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$1, $async$completer);
    }
  };
  A.ProtocolChannel_closure.prototype = {
    call$1(e) {
      this.$this.close$1(e);
    },
    $signature: 5
  };
  A.DatabaseController.prototype = {
    loadWasmModule$1(uri) {
      return this.loadWasmModule$body$DatabaseController(type$.Uri._as(uri));
    },
    loadWasmModule$body$DatabaseController(uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmSqlite3),
        $async$returnValue;
      var $async$loadWasmModule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.WasmSqlite3_loadFromUrl(uri, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$loadWasmModule$1, $async$completer);
    }
  };
  A.WorkerDatabase.prototype = {};
  A.WebLocks.prototype = {
    request$1($name) {
      var gotLock;
      A._asString($name);
      gotLock = A.Completer_Completer$sync(type$.HeldLock);
      A._callMethodUnchecked2(this._lockManager, "request", $name, A._functionToJS1(new A.WebLocks_request_callback(gotLock)), type$.JSObject);
      return gotLock.get$future();
    }
  };
  A.WebLocks_request_callback.prototype = {
    call$1(lock) {
      var completer;
      type$.Object._as(lock);
      completer = A.Completer_Completer$sync(type$.void);
      this.gotLock.complete$1(A.HeldLock$_(completer));
      return A.FutureOfVoidToJSPromise_get_toJS(completer.get$future());
    },
    $signature: 82
  };
  A.HeldLock.prototype = {
    release$0() {
      return this._completer.complete$0();
    }
  };
  A.MessageType.prototype = {
    _enumToString$0() {
      return "MessageType." + A.S(this._core$_name);
    }
  };
  A.Message0.prototype = {
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      type$.List_JSObject._as(transferred);
      A.JSObjectUnsafeUtilExtension____(object, "t", A.StringToJSString_get_toJS(A.EnumName_get_name(this.get$type())));
    },
    sendTo$1(sender) {
      var serialized, transfer;
      type$.void_Function_2_nullable_Object_and_JSObject._as(sender);
      serialized = A.JSObject_constructor_();
      transfer = A._setArrayType([], type$.JSArray_JSObject);
      this.serialize$2(serialized, transfer);
      sender.call$2(serialized, A.ListToJSArray_get_toJS(transfer, type$.JSObject));
    },
    sendToWorker$1(worker) {
      this.sendTo$1(new A.Message_sendToWorker_closure(type$.JSObject._as(worker)));
    },
    sendToPort$1(port) {
      this.sendTo$1(new A.Message_sendToPort_closure(type$.JSObject._as(port)));
    }
  };
  A.Message_sendToWorker_closure.prototype = {
    call$2(msg, transfer) {
      return A._callMethodUnchecked2(this.worker, "postMessage", msg, type$.JSObject._as(transfer), type$.void);
    },
    $signature: 16
  };
  A.Message_sendToPort_closure.prototype = {
    call$2(msg, transfer) {
      return A._callMethodUnchecked2(this.port, "postMessage", msg, type$.JSObject._as(transfer), type$.void);
    },
    $signature: 16
  };
  A.Notification.prototype = {};
  A.Request.prototype = {
    serialize$2(object, transferred) {
      var _0_0;
      type$.JSObject._as(object);
      this.super$Message$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "i", A.NumToJSExtension_get_toJS(this.requestId));
      _0_0 = this.databaseId;
      if (_0_0 != null)
        A.JSObjectUnsafeUtilExtension____(object, "d", A.NumToJSExtension_get_toJS(_0_0));
    }
  };
  A.Response.prototype = {
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      this.super$Message$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "i", A.NumToJSExtension_get_toJS(this.requestId));
    }
  };
  A.FileSystemImplementation.prototype = {
    _enumToString$0() {
      return "FileSystemImplementation." + A.S(this._core$_name);
    },
    get$toJS() {
      return A.StringToJSString_get_toJS(this.jsRepresentation);
    }
  };
  A.OpenRequest.prototype = {
    get$type() {
      return B.MessageType_4;
    },
    serialize$2(object, transferred) {
      var _this = this;
      type$.JSObject._as(object);
      _this.super$Request$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "d", A.StringToJSString_get_toJS(_this.databaseName));
      A.JSObjectUnsafeUtilExtension____(object, "s", _this.storageMode.get$toJS());
      A.JSObjectUnsafeUtilExtension____(object, "u", A.StringToJSString_get_toJS(J.toString$0$(_this.wasmUri)));
      A.JSObjectUnsafeUtilExtension____(object, "o", A.BoolToJSBoolean_get_toJS(_this.onlyOpenVfs));
    }
  };
  A.ConnectRequest.prototype = {
    get$type() {
      return B.MessageType_9;
    },
    serialize$2(object, transferred) {
      var t2,
        t1 = type$.JSObject;
      t1._as(object);
      type$.List_JSObject._as(transferred);
      this.super$Request$serialize(object, transferred);
      t2 = this.endpoint;
      A.JSObjectUnsafeUtilExtension____(object, "r", t2);
      J.add$1$ax(transferred, A.getProperty(t2, "port", t1));
    }
  };
  A.StartFileSystemServer.prototype = {
    get$type() {
      return B.MessageType_10;
    },
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      this.super$Message$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "r", this.options);
    }
  };
  A.CustomRequest.prototype = {
    get$type() {
      return B.MessageType_3;
    },
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      this.super$Request$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "r", this.payload);
    }
  };
  A.FileSystemExistsQuery.prototype = {
    get$type() {
      return B.MessageType_6;
    },
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      this.super$Request$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "f", A.NumToJSExtension_get_toJS(this.fsType.index));
    }
  };
  A.FileSystemFlushRequest.prototype = {
    get$type() {
      return B.MessageType_8;
    }
  };
  A.FileSystemAccess.prototype = {
    get$type() {
      return B.MessageType_7;
    },
    serialize$2(object, transferred) {
      var t1;
      type$.JSObject._as(object);
      type$.List_JSObject._as(transferred);
      this.super$Request$serialize(object, transferred);
      t1 = this.buffer;
      A.JSObjectUnsafeUtilExtension____(object, "b", t1);
      A.JSObjectUnsafeUtilExtension____(object, "f", A.NumToJSExtension_get_toJS(this.fsType.index));
      if (t1 != null)
        J.add$1$ax(transferred, t1);
    }
  };
  A.RunQuery.prototype = {
    get$type() {
      return B.MessageType_5;
    },
    serialize$2(object, transferred) {
      var t1, t2, _this = this;
      type$.JSObject._as(object);
      _this.super$Request$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "s", A.StringToJSString_get_toJS(_this.sql));
      t1 = [];
      for (t2 = J.get$iterator$ax(_this.parameters); A.boolConversionCheck(t2.moveNext$0());)
        t1.push(A.NullableObjectUtilExtension_jsify(t2.get$current()));
      A.JSObjectUnsafeUtilExtension____(object, "p", A.ListToJSArray_get_toJS(t1, type$.nullable_Object));
      A.JSObjectUnsafeUtilExtension____(object, "r", A.BoolToJSBoolean_get_toJS(_this.returnRows));
    }
  };
  A.CloseDatabase.prototype = {
    get$type() {
      return B.MessageType_18;
    }
  };
  A.OpenAdditonalConnection.prototype = {
    get$type() {
      return B.MessageType_19;
    }
  };
  A.SimpleSuccessResponse.prototype = {
    get$type() {
      return B.MessageType_14;
    },
    serialize$2(object, transferred) {
      var t2,
        t1 = type$.JSObject;
      t1._as(object);
      type$.List_JSObject._as(transferred);
      this.super$Response$serialize(object, transferred);
      t2 = this.response;
      A.JSObjectUnsafeUtilExtension____(object, "r", t2);
      if (A.boolConversionCheck(A.JSAnyUtilityExtension_instanceof(t2, A.getProperty(A.staticInteropGlobalContext(), "ArrayBuffer", type$.JavaScriptFunction))))
        J.add$1$ax(transferred, t1._as(t2));
    }
  };
  A.EndpointResponse.prototype = {
    get$type() {
      return B.MessageType_17;
    },
    serialize$2(object, transferred) {
      var t2,
        t1 = type$.JSObject;
      t1._as(object);
      type$.List_JSObject._as(transferred);
      this.super$Response$serialize(object, transferred);
      t2 = this.endpoint;
      A.JSObjectUnsafeUtilExtension____(object, "r", t2);
      J.add$1$ax(transferred, A.getProperty(t2, "port", t1));
    }
  };
  A.RowsResponse.prototype = {
    get$type() {
      return B.MessageType_15;
    },
    serialize$2(object, transferred) {
      var t1, t2, t3, t4, t5, t6, _0_0;
      type$.JSObject._as(object);
      this.super$Response$serialize(object, type$.List_JSObject._as(transferred));
      t1 = A._setArrayType([], type$.JSArray_JSArray_nullable_Object);
      for (t2 = this.resultSet, t3 = J.get$iterator$ax(t2.rows), t4 = type$.nullable_Object; A.boolConversionCheck(t3.moveNext$0());) {
        t5 = [];
        for (t6 = J.get$iterator$ax(t3.get$current()); A.boolConversionCheck(t6.moveNext$0());)
          t5.push(A.NullableObjectUtilExtension_jsify(t6.get$current()));
        t1.push(A.ListToJSArray_get_toJS(t5, t4));
      }
      A.JSObjectUnsafeUtilExtension____(object, "r", A.ListToJSArray_get_toJS(t1, type$.JSArray_nullable_Object));
      t1 = A._setArrayType([], type$.JSArray_String);
      for (t3 = J.get$iterator$ax(t2.get$columnNames()); A.boolConversionCheck(t3.moveNext$0());)
        t1.push(A.StringToJSString_get_toJS(t3.get$current()));
      A.JSObjectUnsafeUtilExtension____(object, "c", A.ListToJSArray_get_toJS(t1, type$.String));
      _0_0 = t2.tableNames;
      if (_0_0 != null) {
        t1 = A._setArrayType([], type$.JSArray_nullable_String);
        for (t2 = J.get$iterator$ax(_0_0); A.boolConversionCheck(t2.moveNext$0());) {
          t3 = t2.get$current();
          t1.push(t3 == null ? null : A.StringToJSString_get_toJS(t3));
        }
        A.JSObjectUnsafeUtilExtension____(object, "n", A.ListToJSArray_get_toJS(t1, type$.nullable_String));
      } else
        A.JSObjectUnsafeUtilExtension____(object, "n", null);
    }
  };
  A.ErrorResponse.prototype = {
    get$type() {
      return B.MessageType_16;
    },
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      this.super$Response$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "e", A.StringToJSString_get_toJS(this.message));
    }
  };
  A.StreamRequest.prototype = {
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      this.super$Request$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "a", A.BoolToJSBoolean_get_toJS(this.action));
    },
    get$type() {
      return this.type;
    }
  };
  A.CompatibilityCheck.prototype = {
    get$shouldCheckOpfsCompatibility() {
      var t1 = this.type,
        t2 = J.getInterceptor$(t1);
      return A.boolConversionCheck(t2.$eq(t1, B.MessageType_0)) || A.boolConversionCheck(t2.$eq(t1, B.MessageType_2));
    },
    get$shouldCheckIndexedDbCompatbility() {
      var t1 = this.type,
        t2 = J.getInterceptor$(t1);
      return A.boolConversionCheck(t2.$eq(t1, B.MessageType_0)) || A.boolConversionCheck(t2.$eq(t1, B.MessageType_1));
    },
    serialize$2(object, transferred) {
      var t1;
      type$.JSObject._as(object);
      this.super$Request$serialize(object, type$.List_JSObject._as(transferred));
      t1 = this.databaseName;
      A.JSObjectUnsafeUtilExtension____(object, "d", t1 == null ? null : A.StringToJSString_get_toJS(t1));
    },
    get$type() {
      return this.type;
    }
  };
  A.CompatibilityResult.prototype = {
    get$toJS() {
      var t3, existing, _this = this,
        t1 = type$.JSArray_String,
        t2 = A._setArrayType([], t1);
      for (t3 = J.get$iterator$ax(_this.existingDatabases); A.boolConversionCheck(t3.moveNext$0());) {
        existing = t3.get$current();
        B.JSArray_methods.addAll$1(t2, A._setArrayType([A.StringToJSString_get_toJS(A.EnumName_get_name(existing._0)), A.StringToJSString_get_toJS(existing._1)], t1));
      }
      t1 = A.JSObject_constructor_();
      A.JSObjectUnsafeUtilExtension____(t1, "a", A.ListToJSArray_get_toJS(t2, type$.String));
      A.JSObjectUnsafeUtilExtension____(t1, "b", A.BoolToJSBoolean_get_toJS(_this.sharedCanSpawnDedicated));
      A.JSObjectUnsafeUtilExtension____(t1, "c", A.BoolToJSBoolean_get_toJS(_this.canUseOpfs));
      A.JSObjectUnsafeUtilExtension____(t1, "d", A.BoolToJSBoolean_get_toJS(_this.canUseIndexedDb));
      A.JSObjectUnsafeUtilExtension____(t1, "e", A.BoolToJSBoolean_get_toJS(_this.supportsSharedArrayBuffers));
      A.JSObjectUnsafeUtilExtension____(t1, "f", A.BoolToJSBoolean_get_toJS(_this.dedicatedWorkersCanNest));
      return t1;
    }
  };
  A.UpdateNotification.prototype = {
    get$type() {
      return B.MessageType_20;
    },
    serialize$2(object, transferred) {
      var t1;
      type$.JSObject._as(object);
      this.super$Message$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "d", A.NumToJSExtension_get_toJS(this.databaseId));
      t1 = this.update;
      A.JSObjectUnsafeUtilExtension____(object, "k", A.NumToJSExtension_get_toJS(t1.kind.index));
      A.JSObjectUnsafeUtilExtension____(object, "u", A.StringToJSString_get_toJS(t1.tableName));
      A.JSObjectUnsafeUtilExtension____(object, "r", A.NumToJSExtension_get_toJS(t1.rowId));
    }
  };
  A.EmptyNotification.prototype = {
    serialize$2(object, transferred) {
      type$.JSObject._as(object);
      this.super$Message$serialize(object, type$.List_JSObject._as(transferred));
      A.JSObjectUnsafeUtilExtension____(object, "d", A.NumToJSExtension_get_toJS(this.databaseId));
    },
    get$type() {
      return this.type;
    }
  };
  A.Lock.prototype = {
    synchronized$1$1(block, $T) {
      var previous, blockCompleted, t1;
      $T._eval$1("0/()")._as(block);
      previous = this._shared$_last;
      blockCompleted = A.Completer_Completer(type$.void);
      this.set$_shared$_last(blockCompleted.get$future());
      t1 = new A.Lock_synchronized_callBlockAndComplete(block, blockCompleted, $T);
      if (previous != null)
        return previous.then$1$1(new A.Lock_synchronized_closure(t1, $T), $T);
      else
        return t1.call$0();
    },
    set$_shared$_last(_last) {
      this._shared$_last = type$.nullable_Future_void._as(_last);
    }
  };
  A.Lock_synchronized_callBlockAndComplete.prototype = {
    call$0() {
      return A.Future_Future$sync(this.block, this.T).whenComplete$1(type$.void_Function_$opt_void._as(this.blockCompleted.get$complete()));
    },
    $signature() {
      return this.T._eval$1("Future<0>()");
    }
  };
  A.Lock_synchronized_closure.prototype = {
    call$1(_) {
      return this.callBlockAndComplete.call$0();
    },
    $signature() {
      return this.T._eval$1("Future<0>(~)");
    }
  };
  A.CompleteOpenIdbRequest_completeOpen_closure.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      this.completer.complete$1(this.T._as(A.getProperty(this._this, "result", type$.nullable_Object)));
    },
    $signature: 1
  };
  A.CompleteOpenIdbRequest_completeOpen_closure0.prototype = {
    call$1($event) {
      var t1;
      type$.JSObject._as($event);
      t1 = A.getProperty(this._this, "error", type$.nullable_JSObject);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 1
  };
  A.CompleteOpenIdbRequest_completeOpen_closure1.prototype = {
    call$1($event) {
      var t1;
      type$.JSObject._as($event);
      t1 = A.getProperty(this._this, "error", type$.nullable_JSObject);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 1
  };
  A.FileType0.prototype = {
    _enumToString$0() {
      return "FileType." + A.S(this._core$_name);
    }
  };
  A.StorageMode.prototype = {
    _enumToString$0() {
      return "StorageMode." + A.S(this._core$_name);
    }
  };
  A.WorkerEnvironment.prototype = {};
  A.Dedicated.prototype = {
    get$topLevelRequests() {
      return B.EventStreamProvider_message.forTarget$1(this.scope).map$1$1(0, new A.Dedicated_topLevelRequests_closure(), type$.Message_2);
    }
  };
  A.Dedicated_topLevelRequests_closure.prototype = {
    call$1($event) {
      var t1 = type$.JSObject;
      return A.Message_deserialize(t1._as(A.getProperty(t1._as($event), "data", type$.nullable_Object)));
    },
    $signature: 66
  };
  A.Shared.prototype = {
    get$topLevelRequests() {
      return A.Stream_Stream$multi(new A.Shared_topLevelRequests_closure(this), false, type$.Message_2);
    }
  };
  A.Shared_topLevelRequests_closure.prototype = {
    call$1(listener) {
      var connectPorts, subscriptions;
      type$.MultiStreamController_Message._as(listener);
      connectPorts = A._setArrayType([], type$.JSArray_JSObject);
      subscriptions = A._setArrayType([], type$.JSArray_StreamSubscription_dynamic);
      B.JSArray_methods.add$1(subscriptions, B.EventStreamProvider_connect.forTarget$1(this.$this.scope).listen$1(new A.Shared_topLevelRequests__closure(new A.Shared_topLevelRequests_closure_handlePort(connectPorts, subscriptions, listener))));
      listener.set$onCancel(new A.Shared_topLevelRequests__closure0(subscriptions));
    },
    $signature: 67
  };
  A.Shared_topLevelRequests_closure_handlePort.prototype = {
    call$1(port) {
      type$.JSObject._as(port);
      J.add$1$ax(this.connectPorts, port);
      A._callMethodUnchecked0(port, "start", type$.void);
      J.add$1$ax(this.subscriptions, B.EventStreamProvider_message.forTarget$1(port).listen$1(new A.Shared_topLevelRequests__handlePort_closure(this.listener)));
    },
    $signature: 1
  };
  A.Shared_topLevelRequests__handlePort_closure.prototype = {
    call$1($event) {
      var t1 = type$.JSObject;
      this.listener.addSync$1(A.Message_deserialize(t1._as(A.getProperty(t1._as($event), "data", type$.nullable_Object))));
    },
    $signature: 1
  };
  A.Shared_topLevelRequests__closure.prototype = {
    call$1($event) {
      var t2,
        t1 = type$.JSObject;
      for (t1 = J.get$iterator$ax(A.JSArrayToList_get_toDart(A.getProperty(t1._as($event), "ports", type$.JSArray_nullable_Object), t1)), t2 = this.handlePort; A.boolConversionCheck(t1.moveNext$0());)
        t2.call$1(t1.get$current());
    },
    $signature: 1
  };
  A.Shared_topLevelRequests__closure0.prototype = {
    call$0() {
      for (var t1 = J.get$iterator$ax(this.subscriptions); A.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().cancel$0();
    },
    $signature: 3
  };
  A._StreamState.prototype = {
    cancel$0() {
      var t1 = this.subscription;
      if (t1 != null)
        t1.cancel$0();
      this.subscription = null;
    },
    set$subscription(subscription) {
      this.subscription = type$.nullable_StreamSubscription_void._as(subscription);
    }
  };
  A._ConnectionDatabase.prototype = {
    close$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.updates.cancel$0();
              $async$self.rollbacks.cancel$0();
              $async$self.commits.cancel$0();
              $async$goto = 2;
              return A._asyncAwait($async$self.database.decrementRefCount$0(), $async$close$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    }
  };
  A._ClientConnection.prototype = {
    _ClientConnection$3$channel$id$runner(channel, id, runner) {
      this.get$closed().whenComplete$1(new A._ClientConnection_closure(this));
    },
    handleRequest$1(request) {
      return this.handleRequest$body$_ClientConnection(type$.Request._as(request));
    },
    handleRequest$body$_ClientConnection(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, database, connectionDatabase, buffer, file, asDartBuffer, buffer0, t1, inner, response, exception, openedDatabase, t2, t3, t4, t5, _2_9_isSet, _2_9, _2_7, _2_10, _2_70, _2_100, _2_10_isSet, _0_0, endpoint, _1_0, _2_23_isSet, _2_23, fsType, _2_230, database0, $async$exception, $async$temp1;
      var $async$handleRequest$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              database0 = $async$self._databaseFor$1(request);
              $async$goto = request instanceof A.CompatibilityCheck ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait($async$self._runner.checkCompatibility$1(request), $async$handleRequest$1);
            case 5:
              // returning from await.
              t1 = $async$result.get$toJS();
              $async$returnValue = A.SimpleSuccessResponse$(request.requestId, t1);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              if (request instanceof A.ConnectRequest) {
                inner = $async$self._runner.useOrSpawnInnerWorker$0();
                A.ConnectRequest$(request.endpoint, 0).sendToWorker$1(inner);
                $async$returnValue = A.SimpleSuccessResponse$(request.requestId, null);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = request instanceof A.CustomRequest ? 6 : 7;
              break;
            case 6:
              // then
              t1 = request.payload;
              $async$goto = database0 != null ? 8 : 10;
              break;
            case 8:
              // then
              $async$goto = 12;
              return A._asyncAwait(database0.database.get$opened(), $async$handleRequest$1);
            case 12:
              // returning from await.
              $async$goto = 11;
              return A._asyncAwait($async$result.handleCustomRequest$2($async$self, t1), $async$handleRequest$1);
            case 11:
              // returning from await.
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              $async$goto = 13;
              return A._asyncAwait($async$self._runner._controller.handleCustomRequest$2($async$self, t1), $async$handleRequest$1);
            case 13:
              // returning from await.
            case 9:
              // join
              response = $async$result;
              $async$returnValue = A.SimpleSuccessResponse$(request.requestId, response);
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // join
              $async$goto = request instanceof A.OpenRequest ? 14 : 15;
              break;
            case 14:
              // then
              t1 = $async$self._runner;
              $async$goto = 16;
              return A._asyncAwait(t1.loadWasmModule$1(request.wasmUri), $async$handleRequest$1);
            case 16:
              // returning from await.
              database = null;
              connectionDatabase = null;
              $async$handler = 18;
              database = t1.findDatabase$2(request.databaseName, request.storageMode);
              $async$goto = 21;
              return A._asyncAwait(A.boolConversionCheck(request.onlyOpenVfs) ? database.get$vfs() : database.get$opened(), $async$handleRequest$1);
            case 21:
              // returning from await.
              connectionDatabase = A._ConnectionDatabase$(database, null);
              J.add$1$ax($async$self._openedDatabases, connectionDatabase);
              t1 = A.NumToJSExtension_get_toJS(database.id);
              t1 = A.SimpleSuccessResponse$(request.requestId, t1);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 20;
              break;
            case 18:
              // catch
              $async$handler = 17;
              $async$exception = $async$currentError;
              $async$goto = database != null ? 22 : 23;
              break;
            case 22:
              // then
              J.remove$1$ax($async$self._openedDatabases, connectionDatabase);
              $async$goto = 24;
              return A._asyncAwait(database.decrementRefCount$0(), $async$handleRequest$1);
            case 24:
              // returning from await.
            case 23:
              // join
              throw $async$exception;
              // goto after finally
              $async$goto = 20;
              break;
            case 17:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 20:
              // after finally
            case 15:
              // join
              $async$goto = request instanceof A.RunQuery ? 25 : 26;
              break;
            case 25:
              // then
              $async$goto = 27;
              return A._asyncAwait(database0.database.get$opened(), $async$handleRequest$1);
            case 27:
              // returning from await.
              openedDatabase = $async$result;
              t1 = A.boolConversionCheck(request.returnRows);
              t2 = openedDatabase.database;
              t3 = request.sql;
              t4 = request.parameters;
              t5 = request.requestId;
              if (t1) {
                $async$returnValue = A.RowsResponse$(t5, t2.select$2(t3, t4));
                // goto return
                $async$goto = 1;
                break;
              } else {
                t2.execute$2(t3, t4);
                $async$returnValue = A.SimpleSuccessResponse$(t5, null);
                // goto return
                $async$goto = 1;
                break;
              }
            case 26:
              // join
              _2_9_isSet = request instanceof A.StreamRequest;
              _2_9 = null;
              _2_7 = null;
              _2_10 = null;
              t1 = false;
              if (_2_9_isSet) {
                _2_70 = request.action;
                t2 = _2_70;
                _2_7 = t2;
                _2_9 = true === t2;
                t2 = _2_9;
                A.boolConversionCheck(t2);
                if (t2) {
                  _2_100 = request.type;
                  t1 = _2_100;
                  _2_10 = t1;
                  t1 = B.MessageType_11 === t1;
                }
                _2_10_isSet = t2;
              } else
                _2_10_isSet = false;
              $async$goto = t1 ? 28 : 29;
              break;
            case 28:
              // then
              $async$goto = 30;
              return A._asyncAwait($async$self.subscribe$3(database0.updates, new A._ClientConnection_handleRequest_closure($async$self, database0), request), $async$handleRequest$1);
            case 30:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 29:
              // join
              t1 = false;
              if (_2_9_isSet)
                if (A.boolConversionCheck(_2_9)) {
                  if (_2_10_isSet)
                    t1 = _2_10;
                  else {
                    _2_10 = request.type;
                    t1 = _2_10;
                    _2_10_isSet = true;
                  }
                  t1 = B.MessageType_13 === t1;
                }
              $async$goto = t1 ? 31 : 32;
              break;
            case 31:
              // then
              $async$goto = 33;
              return A._asyncAwait($async$self.subscribe$3(database0.commits, new A._ClientConnection_handleRequest_closure0($async$self, database0), request), $async$handleRequest$1);
            case 33:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 32:
              // join
              t1 = false;
              if (_2_9_isSet)
                if (A.boolConversionCheck(_2_9))
                  t1 = B.MessageType_12 === (_2_10_isSet ? _2_10 : request.type);
              $async$goto = t1 ? 34 : 35;
              break;
            case 34:
              // then
              $async$goto = 36;
              return A._asyncAwait($async$self.subscribe$3(database0.rollbacks, new A._ClientConnection_handleRequest_closure1($async$self, database0), request), $async$handleRequest$1);
            case 36:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 35:
              // join
              if (_2_9_isSet)
                t1 = false === _2_7;
              else
                t1 = false;
              if (t1) {
                database0.toString;
                $async$returnValue = $async$self.unsubscribe$2(database0, request);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = request instanceof A.OpenAdditonalConnection ? 37 : 38;
              break;
            case 37:
              // then
              database = $async$self._databaseFor$1(request).database;
              t1 = database.refCount;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                // goto return
                $async$goto = 1;
                break;
              }
              database.set$refCount(t1 + 1);
              $async$goto = 39;
              return A._asyncAwait(A.createChannel(), $async$handleRequest$1);
            case 39:
              // returning from await.
              _0_0 = $async$result;
              endpoint = _0_0._0;
              J.add$1$ax($async$self._runner._accept$1(_0_0._1)._openedDatabases, A._ConnectionDatabase$(database, 0));
              $async$returnValue = A.EndpointResponse$(endpoint, request.requestId);
              // goto return
              $async$goto = 1;
              break;
            case 38:
              // join
              $async$goto = request instanceof A.CloseDatabase ? 40 : 41;
              break;
            case 40:
              // then
              database0.toString;
              J.remove$1$ax($async$self._openedDatabases, database0);
              $async$goto = 42;
              return A._asyncAwait(database0.close$0(), $async$handleRequest$1);
            case 42:
              // returning from await.
              $async$returnValue = A.SimpleSuccessResponse$(request.requestId, null);
              // goto return
              $async$goto = 1;
              break;
            case 41:
              // join
              $async$goto = request instanceof A.FileSystemFlushRequest ? 43 : 44;
              break;
            case 43:
              // then
              t1 = database0 == null ? null : database0.database.get$vfs();
              $async$goto = 45;
              return A._asyncAwait(A._wrapAwaitedExpression(t1, type$.nullable_VirtualFileSystem), $async$handleRequest$1);
            case 45:
              // returning from await.
              _1_0 = $async$result;
              $async$goto = _1_0 instanceof A.IndexedDbFileSystem ? 46 : 47;
              break;
            case 46:
              // then
              $async$goto = 48;
              return A._asyncAwait(_1_0.flush$0(), $async$handleRequest$1);
            case 48:
              // returning from await.
            case 47:
              // join
              $async$returnValue = A.SimpleSuccessResponse$(request.requestId, null);
              // goto return
              $async$goto = 1;
              break;
            case 44:
              // join
              _2_23_isSet = request instanceof A.FileSystemExistsQuery;
              _2_23 = null;
              fsType = null;
              if (_2_23_isSet) {
                _2_230 = request.fsType;
                fsType = _2_230;
                _2_23 = fsType;
              }
              $async$goto = _2_23_isSet ? 49 : 50;
              break;
            case 49:
              // then
              $async$temp1 = A;
              $async$goto = 51;
              return A._asyncAwait(database0.database.get$vfs(), $async$handleRequest$1);
            case 51:
              // returning from await.
              t1 = $async$temp1.BoolToJSBoolean_get_toJS($async$result.xAccess$2(A._extension_0_get_pathInVfs(fsType), 0) === 1);
              $async$returnValue = A.SimpleSuccessResponse$(request.requestId, t1);
              // goto return
              $async$goto = 1;
              break;
            case 50:
              // join
              buffer = null;
              _2_23_isSet = request instanceof A.FileSystemAccess;
              fsType = null;
              if (_2_23_isSet) {
                buffer = request.buffer;
                _2_230 = request.fsType;
                fsType = _2_230;
              }
              $async$goto = _2_23_isSet ? 52 : 53;
              break;
            case 52:
              // then
              $async$goto = 54;
              return A._asyncAwait(database0.database.get$vfs(), $async$handleRequest$1);
            case 54:
              // returning from await.
              file = $async$result.xOpen$2(A.Sqlite3Filename$(A._extension_0_get_pathInVfs(fsType)), 4)._0;
              try {
                t1 = buffer;
                t2 = request.requestId;
                if (t1 != null) {
                  asDartBuffer = A.JSArrayBufferToByteBuffer_get_toDart(buffer);
                  file.xTruncate$1(J.get$lengthInBytes$x(asDartBuffer));
                  file.xWrite$2(J.asUint8List$0$x(asDartBuffer), 0);
                  t1 = A.SimpleSuccessResponse$(t2, null);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } else {
                  buffer0 = A.NativeUint8List_NativeUint8List(file.xFileSize$0());
                  file.xRead$2(buffer0, 0);
                  t1 = A.SimpleSuccessResponse$(t2, A.ByteBufferToJSArrayBuffer_get_toJS(J.get$buffer$x(buffer0)));
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                }
              } finally {
                file.xClose$0();
              }
            case 53:
              // join
              if (_2_9_isSet) {
                A.boolConversionCheck(_2_9);
                t1 = _2_9;
              } else
                t1 = false;
              if (t1) {
                $async$returnValue = A.ErrorResponse$("Invalid stream subscription request", request.requestId);
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleRequest$1, $async$completer);
    },
    subscribe$3(state, subscribeInternally, request) {
      return this.subscribe$body$_ClientConnection(type$._StreamState._as(state), type$.Future_StreamSubscription_void_Function._as(subscribeInternally), type$.StreamRequest._as(request));
    },
    subscribe$body$_ClientConnection(state, subscribeInternally, request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$temp1;
      var $async$subscribe$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = state.subscription == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$temp1 = state;
              $async$goto = 5;
              return A._asyncAwait(subscribeInternally.call$0(), $async$subscribe$3);
            case 5:
              // returning from await.
              $async$temp1.set$subscription($async$result);
            case 4:
              // join
              $async$returnValue = A.SimpleSuccessResponse$(request.requestId, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$subscribe$3, $async$completer);
    },
    unsubscribe$2(database, request) {
      var _0_0, t1;
      type$._ConnectionDatabase._as(database);
      type$.StreamRequest._as(request);
      _0_0 = request.type;
      $label0$0: {
        if (B.MessageType_11 === _0_0) {
          t1 = database.updates;
          break $label0$0;
        }
        if (B.MessageType_12 === _0_0) {
          t1 = database.rollbacks;
          break $label0$0;
        }
        if (B.MessageType_13 === _0_0) {
          t1 = database.commits;
          break $label0$0;
        }
        t1 = A.throwExpression(A.AssertionError$(null));
      }
      t1.cancel$0();
      return A.SimpleSuccessResponse$(request.requestId, null);
    },
    handleNotification$1(notification) {
      type$.Notification._as(notification);
    },
    _databaseFor$1(request) {
      var t1 = {},
        _0_0 = type$.Request._as(request).databaseId;
      t1.id = null;
      if (_0_0 != null) {
        t1.id = _0_0;
        return J.firstWhere$1$ax(this._openedDatabases, new A._ClientConnection__databaseFor_closure(t1));
      } else
        return null;
    },
    $isClientConnection: 1
  };
  A._ClientConnection_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this._openedDatabases, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1);
            case 2:
              // for condition
              if (!A.boolConversionCheck(t3.moveNext$0())) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(t3.get$current().close$0(), $async$call$0);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              t2.clear$0(t1);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._ClientConnection_handleRequest_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamSubscription_SqliteUpdate),
        $async$returnValue, $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.database;
              $async$goto = 3;
              return A._asyncAwait(t1.database.get$opened(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.database.get$updates().listen$1(new A._ClientConnection_handleRequest__closure1($async$self.$this, t1));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 68
  };
  A._ClientConnection_handleRequest__closure1.prototype = {
    call$1($event) {
      type$.SqliteUpdate._as($event);
      this.$this.sendNotification$1(A.UpdateNotification$(this.database.database.id, $event));
    },
    $signature: 30
  };
  A._ClientConnection_handleRequest_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamSubscription_void),
        $async$returnValue, $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.database;
              $async$goto = 3;
              return A._asyncAwait(t1.database.get$opened(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.database.get$commits().listen$1(new A._ClientConnection_handleRequest__closure0($async$self.$this, t1));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 23
  };
  A._ClientConnection_handleRequest__closure0.prototype = {
    call$1($event) {
      this.$this.sendNotification$1(A.EmptyNotification$(this.database.database.id, B.MessageType_22));
    },
    $signature: 28
  };
  A._ClientConnection_handleRequest_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamSubscription_void),
        $async$returnValue, $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.database;
              $async$goto = 3;
              return A._asyncAwait(t1.database.get$opened(), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.database.get$rollbacks().listen$1(new A._ClientConnection_handleRequest__closure($async$self.$this, t1));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 23
  };
  A._ClientConnection_handleRequest__closure.prototype = {
    call$1($event) {
      this.$this.sendNotification$1(A.EmptyNotification$(this.database.database.id, B.MessageType_21));
    },
    $signature: 28
  };
  A._ClientConnection__databaseFor_closure.prototype = {
    call$1(e) {
      return J.$eq$(type$._ConnectionDatabase._as(e).id, this._box_0.id);
    },
    $signature: 72
  };
  A.DatabaseState.prototype = {
    get$vfsName() {
      return "vfs-web-" + A.S(this.id);
    },
    get$vfs() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.VirtualFileSystem),
        $async$returnValue, $async$self = this, t1;
      var $async$get$vfs = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._openVfs;
              if (t1 == null) {
                t1 = A.Future_Future$sync(new A.DatabaseState_vfs_closure($async$self), type$.void);
                $async$self.set$_openVfs(t1);
              }
              $async$goto = 3;
              return A._asyncAwait(t1, $async$get$vfs);
            case 3:
              // returning from await.
              t1 = $async$self._resolvedVfs;
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$get$vfs, $async$completer);
    },
    get$opened() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WorkerDatabase),
        $async$returnValue, $async$self = this, database;
      var $async$get$opened = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              database = $async$self._database;
              if (database == null) {
                database = A.Future_Future$sync(new A.DatabaseState_opened_closure($async$self), type$.WorkerDatabase);
                $async$self.set$_database(database);
              }
              $async$goto = 3;
              return A._asyncAwait(database, $async$get$opened);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$get$opened, $async$completer);
    },
    decrementRefCount$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1;
      var $async$decrementRefCount$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.refCount;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$sub();
                // goto return
                $async$goto = 1;
                break;
              }
              --t1;
              $async$self.set$refCount(t1);
              $async$goto = t1 === 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait($async$self.close$0(), $async$decrementRefCount$0);
            case 5:
              // returning from await.
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$decrementRefCount$0, $async$completer);
    },
    close$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, sqlite3, _0_0, t1;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.runner._sqlite3;
              t1.toString;
              $async$goto = 2;
              return A._asyncAwait(t1, $async$close$0);
            case 2:
              // returning from await.
              sqlite3 = $async$result;
              t1 = $async$self._database;
              t1.toString;
              $async$goto = 3;
              return A._asyncAwait(t1, $async$close$0);
            case 3:
              // returning from await.
              $async$result.database.dispose$0();
              _0_0 = $async$self._resolvedVfs;
              if (_0_0 != null)
                sqlite3.unregisterVirtualFileSystem$1(_0_0);
              t1 = $async$self.closeHandler;
              t1 = t1 == null ? null : t1.call$0();
              $async$goto = 4;
              return A._asyncAwait(A._wrapAwaitedExpression(t1, type$.void), $async$close$0);
            case 4:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    },
    set$refCount(refCount) {
      this.refCount = A._asInt(refCount);
    },
    set$_database(_database) {
      this._database = type$.nullable_Future_WorkerDatabase._as(_database);
    },
    set$_openVfs(_openVfs) {
      this._openVfs = type$.nullable_Future_void._as(_openVfs);
    },
    set$_resolvedVfs(_resolvedVfs) {
      this._resolvedVfs = type$.nullable_VirtualFileSystem._as(_resolvedVfs);
    },
    set$closeHandler(closeHandler) {
      this.closeHandler = type$.nullable_void_Function._as(closeHandler);
    }
  };
  A.DatabaseState_vfs_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, options, worker, wasmVfs, simple, idb, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
            case 2:
              // switch
              switch (t1.mode) {
                case B.FileSystemImplementation_l_1_opfsLocks:
                  // goto case
                  $async$goto = 4;
                  break;
                case B.FileSystemImplementation_s_0_opfsShared:
                  // goto case
                  $async$goto = 5;
                  break;
                case B.FileSystemImplementation_i_2_indexedDb:
                  // goto case
                  $async$goto = 6;
                  break;
                case B.FileSystemImplementation_m_3_inMemory:
                  // goto case
                  $async$goto = 7;
                  break;
                default:
                  // goto after switch
                  $async$goto = 3;
                  break;
              }
              break;
            case 4:
              // case
              options = A.WasmVfs_createOptions(A.pathForOpfs(t1.name));
              worker = A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Worker", type$.Object), A.StringToJSString_get_toJS(J.toString$0$(A.Uri_base())), type$.JSObject);
              A.StartFileSystemServer$(options).sendToWorker$1(worker);
              $async$goto = 8;
              return A._asyncAwait(B.EventStreamProvider_message.forTarget$1(worker).get$first(0), $async$call$0);
            case 8:
              // returning from await.
              wasmVfs = A.WasmVfs$(t1.get$vfsName(), options);
              t1._resolvedVfs = wasmVfs;
              t1.set$closeHandler(wasmVfs.get$close());
              // goto after switch
              $async$goto = 3;
              break;
            case 5:
              // case
              $async$goto = 9;
              return A._asyncAwait(A.SimpleOpfsFileSystem_loadFromStorage(A.pathForOpfs(t1.name), t1.get$vfsName()), $async$call$0);
            case 9:
              // returning from await.
              simple = $async$result;
              t1.set$_resolvedVfs(simple);
              t1.set$closeHandler(simple.get$close());
              // goto after switch
              $async$goto = 3;
              break;
            case 6:
              // case
              $async$goto = 10;
              return A._asyncAwait(A.IndexedDbFileSystem_open(t1.name, t1.get$vfsName()), $async$call$0);
            case 10:
              // returning from await.
              idb = $async$result;
              t1.set$_resolvedVfs(idb);
              t1.set$closeHandler(idb.get$close());
              // goto after switch
              $async$goto = 3;
              break;
            case 7:
              // case
              t1._resolvedVfs = A.InMemoryFileSystem$(t1.get$vfsName(), null);
              // goto after switch
              $async$goto = 3;
              break;
            case 3:
              // after switch
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A.DatabaseState_opened_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WorkerDatabase),
        $async$returnValue, $async$self = this, sqlite3, t1, t2, t3, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.runner;
              t3 = t2._sqlite3;
              t3.toString;
              $async$goto = 3;
              return A._asyncAwait(t3, $async$call$0);
            case 3:
              // returning from await.
              sqlite3 = $async$result;
              $async$temp1 = sqlite3;
              $async$goto = 4;
              return A._asyncAwait(t1.get$vfs(), $async$call$0);
            case 4:
              // returning from await.
              $async$temp1.registerVirtualFileSystem$1($async$result);
              $async$goto = 5;
              return A._asyncAwait(t2._controller.openDatabase$3(sqlite3, "/database", t1.get$vfsName()), $async$call$0);
            case 5:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 73
  };
  A.WorkerRunner.prototype = {
    handleRequests$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, message, channel, worker, result, t3, t4, t1, t2, $async$temp1;
      var $async$handleRequests$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._environment;
              t2 = A.StreamIterator_StreamIterator(t1.get$topLevelRequests(), type$.Message_2);
              $async$handler = 2;
              t3 = type$.Dedicated, t4 = type$.void;
            case 5:
              // for condition
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(t2.moveNext$0(), $async$handleRequests$0);
            case 7:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 6;
                break;
              }
              message = t2.get$current();
              $async$goto = message instanceof A.ConnectRequest ? 8 : 10;
              break;
            case 8:
              // then
              channel = A.WebEndpoint_connect(message.endpoint);
              $async$self._accept$1(channel);
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              $async$goto = message instanceof A.StartFileSystemServer ? 11 : 13;
              break;
            case 11:
              // then
              $async$goto = 14;
              return A._asyncAwait(A.VfsWorker_create(message.options), $async$handleRequests$0);
            case 14:
              // returning from await.
              worker = $async$result;
              A._callMethodUnchecked1(t3._as(t1).scope, "postMessage", A.BoolToJSBoolean_get_toJS(true), t4);
              $async$goto = 15;
              return A._asyncAwait(worker.start$0(), $async$handleRequests$0);
            case 15:
              // returning from await.
              // goto join
              $async$goto = 12;
              break;
            case 13:
              // else
              $async$goto = message instanceof A.CompatibilityCheck ? 16 : 17;
              break;
            case 16:
              // then
              $async$goto = 18;
              return A._asyncAwait($async$self.checkCompatibility$1(message), $async$handleRequests$0);
            case 18:
              // returning from await.
              result = $async$result;
              A._callMethodUnchecked1(t3._as(t1).scope, "postMessage", result.get$toJS(), t4);
            case 17:
              // join
            case 12:
              // join
            case 9:
              // join
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$goto = 19;
              return A._asyncAwait(t2.cancel$0(), $async$handleRequests$0);
            case 19:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleRequests$0, $async$completer);
    },
    _accept$1(channel) {
      var t1, connection, _this = this;
      type$.StreamChannel_Message._as(channel);
      t1 = _this._nextConnectionId;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_nextConnectionId(t1 + 1);
      connection = A._ClientConnection$(channel, t1, _this);
      J.add$1$ax(_this._connections, connection);
      connection.get$closed().whenComplete$1(new A.WorkerRunner__accept_closure(_this, connection));
      return connection;
    },
    checkCompatibility$1(check) {
      return this._compatibilityCheckLock.synchronized$1$1(new A.WorkerRunner_checkCompatibility_closure(this, type$.CompatibilityCheck._as(check)), type$.CompatibilityResult);
    },
    loadWasmModule$1(uri) {
      return this.loadWasmModule$body$WorkerRunner(type$.Uri._as(uri));
    },
    loadWasmModule$body$WorkerRunner(uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, future;
      var $async$loadWasmModule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self._sqlite3 != null ? 2 : 4;
              break;
            case 2:
              // then
              if (!A.boolConversionCheck(J.$eq$($async$self._wasmUri, uri)))
                throw A.wrapException(A.StateError$("Workers only support a single sqlite3 wasm module, provided different URI (has " + A.S($async$self._wasmUri) + ", got " + A.S(uri) + ")"));
              $async$goto = 5;
              return A._asyncAwait(A._wrapAwaitedExpression($async$self._sqlite3, type$.nullable_WasmSqlite3), $async$loadWasmModule$1);
            case 5:
              // returning from await.
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              future = A.FutureExtensions_onError($async$self._controller.loadWasmModule$1(uri), new A.WorkerRunner_loadWasmModule_closure($async$self), type$.WasmSqlite3, type$.Object);
              $async$self.set$_sqlite3(future);
              $async$goto = 6;
              return A._asyncAwait(future, $async$loadWasmModule$1);
            case 6:
              // returning from await.
              $async$self._wasmUri = uri;
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$loadWasmModule$1, $async$completer);
    },
    findDatabase$2($name, mode) {
      var t1, t2, t3, id, _this = this;
      A._asString($name);
      type$.FileSystemImplementation._as(mode);
      for (t1 = _this.openedDatabases, t2 = J.get$iterator$ax(t1.get$values()); A.boolConversionCheck(t2.moveNext$0());) {
        t3 = t2.get$current();
        if (!A.boolConversionCheck(J.$eq$(t3.refCount, 0)) && A.boolConversionCheck(J.$eq$(t3.name, $name)) && A.boolConversionCheck(J.$eq$(t3.mode, mode))) {
          t1 = t3.refCount;
          if (typeof t1 !== "number")
            return t1.$add();
          t3.set$refCount(t1 + 1);
          return t3;
        }
      }
      id = _this._nextDatabaseId;
      if (typeof id !== "number")
        return id.$add();
      _this.set$_nextDatabaseId(id + 1);
      t2 = A.DatabaseState$(id, mode, $name, _this);
      J.$indexSet$ax(t1, id, t2);
      return t2;
    },
    useOrSpawnInnerWorker$0() {
      var t1 = this._innerWorker;
      if (t1 == null) {
        t1 = A._callConstructorUnchecked1(A._getPropertyTrustType(A.staticInteropGlobalContext(), "Worker", type$.Object), A.StringToJSString_get_toJS(J.toString$0$(A.Uri_base())), type$.JSObject);
        this.set$_innerWorker(t1);
      }
      return t1;
    },
    set$_nextConnectionId(_nextConnectionId) {
      this._nextConnectionId = A._asInt(_nextConnectionId);
    },
    set$_nextDatabaseId(_nextDatabaseId) {
      this._nextDatabaseId = A._asInt(_nextDatabaseId);
    },
    set$_sqlite3(_sqlite3) {
      this._sqlite3 = type$.nullable_Future_WasmSqlite3._as(_sqlite3);
    },
    set$_innerWorker(_innerWorker) {
      this._innerWorker = type$.nullable_JSObject._as(_innerWorker);
    }
  };
  A.WorkerRunner__accept_closure.prototype = {
    call$0() {
      return J.remove$1$ax(this.$this._connections, this.connection);
    },
    $signature: 74
  };
  A.WorkerRunner_checkCompatibility_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CompatibilityResult),
        $async$returnValue, $async$self = this, t2, supportsOpfs, supportsIndexedDb, sharedCanSpawnDedicated, worker, t1, $async$temp1, $async$temp2, $async$temp3;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t1.toString;
              t2 = $async$self.check;
              $async$temp1 = A.boolConversionCheck(t2.get$shouldCheckOpfsCompatibility());
              if ($async$temp1) {
                // goto then
                $async$goto = 3;
                break;
              } else
                $async$result = $async$temp1;
              // goto join
              $async$goto = 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.checkOpfsSupport(), $async$call$0);
            case 5:
              // returning from await.
            case 4:
              // join
              supportsOpfs = $async$result;
              $async$temp1 = A.boolConversionCheck(t2.get$shouldCheckIndexedDbCompatbility());
              if ($async$temp1) {
                // goto then
                $async$goto = 6;
                break;
              } else
                $async$result = $async$temp1;
              // goto join
              $async$goto = 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return A._asyncAwait(A.checkIndexedDbSupport(), $async$call$0);
            case 8:
              // returning from await.
            case 7:
              // join
              supportsIndexedDb = $async$result;
              $async$goto = A.boolConversionCheck(J.$eq$(t2.type, B.MessageType_1)) ? 9 : 11;
              break;
            case 9:
              // then
              sharedCanSpawnDedicated = A.boolConversionCheck(A.JSObjectUnsafeUtilExtension_has(A.globalContext(), "Worker"));
              $async$goto = sharedCanSpawnDedicated ? 12 : 13;
              break;
            case 12:
              // then
              worker = t1.useOrSpawnInnerWorker$0();
              A.CompatibilityCheck$(t2.databaseName, 0, B.MessageType_2).sendToWorker$1(worker);
              $async$temp1 = A;
              $async$temp2 = type$.JSObject;
              $async$temp3 = A;
              $async$goto = 14;
              return A._asyncAwait(B.EventStreamProvider_message.forTarget$1(worker).get$first(0), $async$call$0);
            case 14:
              // returning from await.
              supportsOpfs = $async$temp1.CompatibilityResult_CompatibilityResult$fromJS($async$temp2._as($async$temp3.getProperty($async$result, "data", type$.nullable_Object))).canUseOpfs;
            case 13:
              // join
              // goto join
              $async$goto = 10;
              break;
            case 11:
              // else
              sharedCanSpawnDedicated = false;
            case 10:
              // join
              t1 = A.JSObjectUnsafeUtilExtension_has(A.globalContext(), "SharedArrayBuffer");
              $async$returnValue = A.CompatibilityResult$(supportsIndexedDb, supportsOpfs, A.JSObjectUnsafeUtilExtension_has(A.globalContext(), "Worker"), B.List_empty, sharedCanSpawnDedicated, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 75
  };
  A.WorkerRunner_loadWasmModule_closure.prototype = {
    call$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this.$this.set$_sqlite3(null);
      error.toString;
      throw A.wrapException(error);
    },
    $signature: 76
  };
  A.CustomDatabaseMessageKind.prototype = {
    _enumToString$0() {
      return "CustomDatabaseMessageKind." + A.S(this._core$_name);
    }
  };
  A.ThrottledCommonDatabase.prototype = {
    get$autocommit() {
      return this._db.get$autocommit();
    },
    dispose$0() {
      this._db.dispose$0();
    },
    execute$2(sql, parameters) {
      this._db.execute$2(A._asString(sql), type$.List_nullable_Object._as(parameters));
    },
    select$2(sql, parameters) {
      var t1, preAutocommit, result, postAutocommit;
      A._asString(sql);
      type$.List_nullable_Object._as(parameters);
      t1 = this._db;
      preAutocommit = t1.get$autocommit();
      result = t1.select$2(sql, parameters);
      postAutocommit = t1.get$autocommit();
      if (!preAutocommit && postAutocommit)
        J.add$1$ax(this._transactionController, true);
      return result;
    },
    get$updates() {
      return A.throttledUpdates(this._db, this._transactionController.get$stream());
    },
    get$commits() {
      return this._db.get$commits();
    },
    get$rollbacks() {
      return this._db.get$rollbacks();
    }
  };
  A.throttledUpdates_maybeFireUpdates.prototype = {
    call$0() {
      var t3, t4, t5, t6,
        t1 = this._box_0,
        t2 = t1.updateDebouncer;
      if (t2 != null)
        t2.cancel$0();
      t1.updateDebouncer = null;
      if (A.boolConversionCheck(t1.paused))
        return;
      if (!A.boolConversionCheck(this.source.get$autocommit()))
        return;
      t2 = this.pendingUpdates;
      t3 = J.getInterceptor$asx(t2);
      if (A.boolConversionCheck(t3.get$isNotEmpty(t2))) {
        for (t4 = t3.get$iterator(t2); A.boolConversionCheck(t4.moveNext$0());) {
          t5 = t4.get$current();
          t6 = t1.controller;
          t6.toString;
          J.add$1$ax(t6, t5);
        }
        t3.clear$0(t2);
      }
    },
    $signature: 0
  };
  A.throttledUpdates_collectUpdate.prototype = {
    call$1($event) {
      var t1;
      type$.SqliteUpdate._as($event);
      J.add$1$ax(this.pendingUpdates, A.SqliteUpdate$($event.kind, $event.tableName, 0));
      t1 = this._box_0;
      if (t1.updateDebouncer == null)
        t1.updateDebouncer = A.Timer_Timer(B.Duration_1000, this.maybeFireUpdates);
    },
    $signature: 30
  };
  A.throttledUpdates_closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this._box_0;
      t1.txSubscription = _this.transactionStream.listen$2$onError(new A.throttledUpdates__closure(_this.maybeFireUpdates), new A.throttledUpdates__closure0(t1));
      t1.sourceSubscription = _this.source.get$updates().listen$2$onError(_this.collectUpdate, new A.throttledUpdates__closure1(t1));
    },
    $signature: 0
  };
  A.throttledUpdates__closure.prototype = {
    call$1($event) {
      this.maybeFireUpdates.call$0();
    },
    $signature: 6
  };
  A.throttledUpdates__closure0.prototype = {
    call$1(error) {
      var t1 = this._box_0.controller;
      if (t1 != null)
        t1.addError$1(error == null ? type$.Object._as(error) : error);
    },
    $signature: 5
  };
  A.throttledUpdates__closure1.prototype = {
    call$1(error) {
      var t1 = this._box_0.controller;
      if (t1 != null)
        t1.addError$1(error == null ? type$.Object._as(error) : error);
    },
    $signature: 5
  };
  A.throttledUpdates_closure1.prototype = {
    call$0() {
      this._box_0.paused = true;
    },
    $signature: 0
  };
  A.throttledUpdates_closure2.prototype = {
    call$0() {
      this._box_0.paused = false;
      this.maybeFireUpdates.call$0();
    },
    $signature: 0
  };
  A.throttledUpdates_closure.prototype = {
    call$0() {
      var t1 = this._box_0,
        t2 = t1.txSubscription;
      if (t2 != null)
        t2.cancel$0();
      t1 = t1.sourceSubscription;
      if (t1 != null)
        t1.cancel$0();
    },
    $signature: 3
  };
  A.AsyncSqliteController.prototype = {
    openDatabase$3(sqlite3, path, vfs) {
      return this.openDatabase$body$AsyncSqliteController(type$.WasmSqlite3._as(sqlite3), A._asString(path), A._asString(vfs));
    },
    openDatabase$body$AsyncSqliteController(sqlite3, path, vfs) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WorkerDatabase),
        $async$returnValue;
      var $async$openDatabase$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.AsyncSqliteDatabase$(A.ThrottledCommonDatabase$(sqlite3.open$2$vfs(path, vfs)));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$openDatabase$3, $async$completer);
    },
    handleCustomRequest$2(connection, request) {
      type$.ClientConnection._as(connection);
      throw A.wrapException(A.UnimplementedError$(null));
    }
  };
  A.AsyncSqliteDatabase.prototype = {
    handleCustomRequest$2(connection, request) {
      return this.handleCustomRequest$body$AsyncSqliteDatabase(type$.ClientConnection._as(connection), request);
    },
    handleCustomRequest$body$AsyncSqliteDatabase(connection, request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Object),
        $async$returnValue, $async$self = this, sql, t1, t2;
      var $async$handleCustomRequest$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              type$.JSObject._as(request);
            case 3:
              // switch
              switch (A.CustomDatabaseMessage_get_kind(request)) {
                case B.CustomDatabaseMessageKind_0:
                  // goto case
                  $async$goto = 5;
                  break;
                case B.CustomDatabaseMessageKind_1:
                  // goto case
                  $async$goto = 6;
                  break;
                case B.CustomDatabaseMessageKind_2:
                  // goto case
                  $async$goto = 7;
                  break;
                case B.CustomDatabaseMessageKind_3:
                  // goto case
                  $async$goto = 8;
                  break;
                case B.CustomDatabaseMessageKind_4:
                  // goto case
                  $async$goto = 9;
                  break;
                case B.CustomDatabaseMessageKind_5:
                  // goto case
                  $async$goto = 10;
                  break;
                case B.CustomDatabaseMessageKind_6:
                  // goto case
                  $async$goto = 11;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
              $async$goto = 12;
              return A._asyncAwait($async$self.mutex.acquireRead$0(), $async$handleCustomRequest$2);
            case 12:
              // returning from await.
              // goto after switch
              $async$goto = 4;
              break;
            case 6:
              // case
              $async$goto = 13;
              return A._asyncAwait($async$self.mutex.acquireWrite$0(), $async$handleCustomRequest$2);
            case 13:
              // returning from await.
              // goto after switch
              $async$goto = 4;
              break;
            case 7:
              // case
              $async$self.mutex.release$0();
              // goto after switch
              $async$goto = 4;
              break;
            case 8:
              // case
              throw A.wrapException(A.UnsupportedError$("This is a response, not a request"));
            case 9:
              // case
              $async$returnValue = A.BoolToJSBoolean_get_toJS($async$self.database.get$autocommit());
              // goto return
              $async$goto = 1;
              break;
            case 10:
              // case
              sql = A.JSStringToString_get_toDart(A.getProperty(request, "rawSql", type$.String));
              t1 = [];
              for (t2 = J.get$iterator$ax(A.JSArrayToList_get_toDart(A.getProperty(request, "rawParameters", type$.JSArray_nullable_Object), type$.nullable_Object)); A.boolConversionCheck(t2.moveNext$0());)
                t1.push(A.JSAnyUtilityExtension_dartify(t2.get$current()));
              t2 = $async$self.database;
              if (A.boolConversionCheck(t2.get$autocommit()))
                throw A.wrapException(A.SqliteException$(0, string$.Transa + sql, null, null, null, null));
              $async$returnValue = A.NullableObjectUtilExtension_jsify($async$self.resultSetToMap$1(t2.select$2(sql, t1)));
              // goto return
              $async$goto = 1;
              break;
            case 11:
              // case
              sql = A.JSStringToString_get_toDart(A.getProperty(request, "rawSql", type$.String));
              t1 = [];
              for (t2 = J.get$iterator$ax(A.JSArrayToList_get_toDart(A.getProperty(request, "rawParameters", type$.JSArray_nullable_Object), type$.nullable_Object)); A.boolConversionCheck(t2.moveNext$0());)
                t1.push(A.JSAnyUtilityExtension_dartify(t2.get$current()));
              t2 = $async$self.database;
              if (A.boolConversionCheck(t2.get$autocommit()))
                throw A.wrapException(A.SqliteException$(0, string$.Transa + sql, null, null, null, null));
              t2.execute$2(sql, t1);
              // goto after switch
              $async$goto = 4;
              break;
            case 4:
              // after switch
              $async$returnValue = A.CustomDatabaseMessage_constructor_(B.CustomDatabaseMessageKind_3);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleCustomRequest$2, $async$completer);
    },
    resultSetToMap$1(resultSet) {
      var resultSetMap;
      type$.ResultSet._as(resultSet);
      resultSetMap = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      resultSetMap.$indexSet(0, "columnNames", resultSet.get$columnNames());
      resultSetMap.$indexSet(0, "tableNames", resultSet.tableNames);
      resultSetMap.$indexSet(0, "rows", resultSet.rows);
      return resultSetMap;
    }
  };
  A.GuaranteeChannel.prototype = {
    get$stream() {
      return this.get$_streamController().get$stream();
    },
    get$sink() {
      return this.get$_sink();
    },
    get$_sink() {
      return this.__GuaranteeChannel__sink_F;
    },
    set$_sink(value) {
      this.$ti._eval$1("_GuaranteeSink<1>")._as(value);
      this.__GuaranteeChannel__sink_F !== $ && A.throwLateFieldAI("_sink");
      this.set$__GuaranteeChannel__sink_F(value);
    },
    get$_streamController() {
      return this.__GuaranteeChannel__streamController_F;
    },
    set$_streamController(value) {
      this.$ti._eval$1("StreamController<1>")._as(value);
      this.__GuaranteeChannel__streamController_F !== $ && A.throwLateFieldAI("_streamController");
      this.set$__GuaranteeChannel__streamController_F(value);
    },
    GuaranteeChannel$3$allowSinkErrors(innerSink, allowSinkErrors, _box_0, $T) {
      var _this = this;
      _this.set$_sink(A._GuaranteeSink$(innerSink, _this, allowSinkErrors, $T));
      if (A.boolConversionCheck(_box_0.innerStream.get$isBroadcast()))
        _box_0.innerStream = _box_0.innerStream.transform$1$1(A.SingleSubscriptionTransformer$($T, $T), $T);
      _this.set$_streamController(A.StreamController_StreamController(null, new A.GuaranteeChannel_closure(_box_0, _this, $T), null, null, true, $T));
    },
    _onSinkDisconnected$0() {
      this._disconnected = true;
      var subscription = this._subscription;
      if (subscription != null)
        subscription.cancel$0();
      this.get$_streamController().close$0();
    },
    set$__GuaranteeChannel__sink_F(__GuaranteeChannel__sink_F) {
      this.__GuaranteeChannel__sink_F = this.$ti._eval$1("_GuaranteeSink<1>")._as(__GuaranteeChannel__sink_F);
    },
    set$__GuaranteeChannel__streamController_F(__GuaranteeChannel__streamController_F) {
      this.__GuaranteeChannel__streamController_F = this.$ti._eval$1("StreamController<1>")._as(__GuaranteeChannel__streamController_F);
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A.GuaranteeChannel_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (A.boolConversionCheck(t1._disconnected))
        return;
      t1.set$_subscription(this._box_0.innerStream.listen$3$onDone$onError(this.T._eval$1("~(0)")._as(J.get$add$ax(t1.get$_streamController())), new A.GuaranteeChannel__closure(t1), t1.get$_streamController().get$addError()));
    },
    $signature: 0
  };
  A.GuaranteeChannel__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.get$_sink()._onStreamDisconnected$0();
      t1.get$_streamController().close$0();
    },
    $signature: 0
  };
  A._GuaranteeSink.prototype = {
    get$done() {
      return this._doneCompleter.get$future();
    },
    get$_inAddStream() {
      return this._addStreamSubscription != null;
    },
    add$1(_, data) {
      var _this = this;
      _this.$ti._precomputed1._as(data);
      if (A.boolConversionCheck(_this._closed))
        throw A.wrapException(A.StateError$("Cannot add event after closing."));
      if (A.boolConversionCheck(_this.get$_inAddStream()))
        throw A.wrapException(A.StateError$("Cannot add event while adding stream."));
      if (A.boolConversionCheck(_this._disconnected))
        return;
      J.add$1$ax(_this._inner, data);
    },
    addError$2(error, stackTrace) {
      var _this = this;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (A.boolConversionCheck(_this._closed))
        throw A.wrapException(A.StateError$("Cannot add event after closing."));
      if (A.boolConversionCheck(_this.get$_inAddStream()))
        throw A.wrapException(A.StateError$("Cannot add event while adding stream."));
      if (A.boolConversionCheck(_this._disconnected))
        return;
      _this._guarantee_channel$_addError$2(error, stackTrace);
    },
    _guarantee_channel$_addError$2(error, stackTrace) {
      var _this = this;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (A.boolConversionCheck(_this._allowErrors)) {
        _this._inner.addError$2(error, stackTrace);
        return;
      }
      _this._doneCompleter.completeError$2(error, stackTrace);
      _this._onStreamDisconnected$0();
      _this._guarantee_channel$_channel._onSinkDisconnected$0();
      _this._inner.close$0().catchError$1(new A._GuaranteeSink__addError_closure());
    },
    close$0() {
      var _this = this;
      if (A.boolConversionCheck(_this.get$_inAddStream()))
        throw A.wrapException(A.StateError$("Cannot close sink while adding stream."));
      if (A.boolConversionCheck(_this._closed))
        return _this.get$done();
      _this._closed = true;
      if (!A.boolConversionCheck(_this._disconnected)) {
        _this._guarantee_channel$_channel._onSinkDisconnected$0();
        _this._doneCompleter.complete$1(_this._inner.close$0());
      }
      return _this.get$done();
    },
    _onStreamDisconnected$0() {
      var t1, _this = this;
      _this._disconnected = true;
      t1 = _this._doneCompleter;
      if (!A.boolConversionCheck(t1.get$isCompleted()))
        t1.complete$0();
      if (!A.boolConversionCheck(_this.get$_inAddStream()))
        return;
      t1 = _this._addStreamCompleter;
      t1.toString;
      t1.complete$1(_this._addStreamSubscription.cancel$0());
      _this._addStreamCompleter = null;
      _this.set$_addStreamSubscription(null);
    },
    set$_addStreamSubscription(_addStreamSubscription) {
      this._addStreamSubscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_addStreamSubscription);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isSink: 1
  };
  A._GuaranteeSink__addError_closure.prototype = {
    call$1(_) {
    },
    $signature: 5
  };
  A.StreamChannelController.prototype = {
    get$local() {
      return this.get$_local();
    },
    get$_local() {
      return this.__StreamChannelController__local_F;
    },
    set$_local(value) {
      this.$ti._eval$1("StreamChannel<1>")._as(value);
      this.__StreamChannelController__local_F !== $ && A.throwLateFieldAI("_local");
      this.set$__StreamChannelController__local_F(value);
    },
    get$foreign() {
      return this.get$_foreign();
    },
    get$_foreign() {
      return this.__StreamChannelController__foreign_F;
    },
    set$_foreign(value) {
      this.$ti._eval$1("StreamChannel<1>")._as(value);
      this.__StreamChannelController__foreign_F !== $ && A.throwLateFieldAI("_foreign");
      this.set$__StreamChannelController__foreign_F(value);
    },
    StreamChannelController$2$allowForeignErrors$sync(allowForeignErrors, sync, $T) {
      var _null = null,
        localToForeignController = A.StreamController_StreamController(_null, _null, _null, _null, sync, $T),
        foreignToLocalController = A.StreamController_StreamController(_null, _null, _null, _null, sync, $T);
      this.set$_local(A.StreamChannel_StreamChannel$withGuarantees(foreignToLocalController.get$stream(), localToForeignController.get$sink(), true, $T));
      this.set$_foreign(A.StreamChannel_StreamChannel$withGuarantees(localToForeignController.get$stream(), foreignToLocalController.get$sink(), allowForeignErrors, $T));
    },
    set$__StreamChannelController__local_F(__StreamChannelController__local_F) {
      this.__StreamChannelController__local_F = this.$ti._eval$1("StreamChannel<1>")._as(__StreamChannelController__local_F);
    },
    set$__StreamChannelController__foreign_F(__StreamChannelController__foreign_F) {
      this.__StreamChannelController__foreign_F = this.$ti._eval$1("StreamChannel<1>")._as(__StreamChannelController__foreign_F);
    }
  };
  A.StreamChannelMixin.prototype = {$isStreamChannel: 1};
  A.TypedDataBuffer.prototype = {
    get$length(_) {
      return this._typed_buffer$_length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this.get$length(0);
      if (typeof t1 !== "number")
        return A.iae(t1);
      if (index >= t1)
        throw A.wrapException(A.IndexError$(index, this));
      return J.$index$asx(this._typed_buffer$_buffer, index);
    },
    $indexSet(_, index, value) {
      var t1, _this = this;
      A._asInt(index);
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      t1 = _this.get$length(0);
      if (typeof t1 !== "number")
        return A.iae(t1);
      if (index >= t1)
        throw A.wrapException(A.IndexError$(index, _this));
      J.$indexSet$ax(_this._typed_buffer$_buffer, index, value);
    },
    set$length(_, newLength) {
      var t1, defaultValue, i, newBuffer, _this = this;
      A._asInt(newLength);
      t1 = _this._typed_buffer$_length;
      if (typeof t1 !== "number")
        return A.iae(t1);
      if (newLength < t1) {
        defaultValue = _this.get$_defaultValue();
        i = newLength;
        while (true) {
          t1 = _this._typed_buffer$_length;
          if (typeof t1 !== "number")
            return A.iae(t1);
          if (!(i < t1))
            break;
          J.$indexSet$ax(_this._typed_buffer$_buffer, i, defaultValue);
          ++i;
        }
      } else {
        t1 = J.get$length$asx(_this._typed_buffer$_buffer);
        if (typeof t1 !== "number")
          return A.iae(t1);
        if (newLength > t1) {
          newBuffer = A.boolConversionCheck(J.get$isEmpty$asx(_this._typed_buffer$_buffer)) ? _this._createBuffer$1(newLength) : _this._createBiggerBuffer$1(newLength);
          J.setRange$3$ax(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
          _this.set$_typed_buffer$_buffer(newBuffer);
        }
      }
      _this._typed_buffer$_length = newLength;
    },
    _typed_buffer$_add$1(value) {
      var t1, t2, _this = this;
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      if (A.boolConversionCheck(J.$eq$(_this._typed_buffer$_length, J.get$length$asx(_this._typed_buffer$_buffer))))
        _this._grow$1(_this._typed_buffer$_length);
      t1 = _this._typed_buffer$_buffer;
      t2 = _this._typed_buffer$_length;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$_typed_buffer$_length(t2 + 1);
      J.$indexSet$ax(t1, t2, value);
    },
    add$1(_, element) {
      this._typed_buffer$_add$1(A._instanceType(this)._eval$1("TypedDataBuffer.E")._as(element));
    },
    addAll$1(_, values) {
      A._instanceType(this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      A.RangeError_checkNotNegative(0, "start");
      this._addAll$3(values, 0, null);
    },
    insertAll$2(_, index, values) {
      var t1, end, writeIndex, skipCount, value, writeIndex0, t2, _this = this;
      A._asInt(index);
      A._instanceType(_this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      t1 = _this._typed_buffer$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      A.RangeError_checkValidIndex(index, _this, "index", t1 + 1);
      A.RangeError_checkNotNegative(0, "start");
      if (index === t1) {
        _this._addAll$3(values, 0, null);
        return;
      }
      end = type$.List_dynamic._is(values) ? J.get$length$asx(values) : null;
      if (end != null) {
        _this._insertKnownLength$4(index, values, 0, end);
        return;
      }
      writeIndex = _this._typed_buffer$_length;
      for (t1 = J.get$iterator$ax(values), skipCount = 0; A.boolConversionCheck(t1.moveNext$0());) {
        value = t1.get$current();
        if (writeIndex === J.get$length$asx(_this._typed_buffer$_buffer))
          _this._grow$1(writeIndex);
        writeIndex0 = writeIndex + 1;
        J.$indexSet$ax(_this._typed_buffer$_buffer, writeIndex, value);
        writeIndex = writeIndex0;
      }
      t1 = _this._typed_buffer$_buffer;
      t2 = _this._typed_buffer$_length;
      A.TypedDataBuffer__reverse(t1, index, t2);
      A.TypedDataBuffer__reverse(t1, t2, writeIndex);
      A.TypedDataBuffer__reverse(t1, index, writeIndex);
      _this._typed_buffer$_length = writeIndex;
      return;
    },
    _addAll$3(values, start, end) {
      var t1, i, value, _this = this;
      A._instanceType(_this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      A._asInt(start);
      A._asIntQ(end);
      if (type$.List_dynamic._is(values))
        end = end == null ? J.get$length$asx(values) : end;
      if (end != null) {
        _this._insertKnownLength$4(_this._typed_buffer$_length, values, start, end);
        return;
      }
      for (t1 = J.get$iterator$ax(values), i = 0; A.boolConversionCheck(t1.moveNext$0());) {
        value = t1.get$current();
        if (i >= start)
          _this.add$1(0, value);
        ++i;
      }
      if (i < start)
        throw A.wrapException(A.StateError$("Too few elements"));
    },
    _insertKnownLength$4(index, values, start, end) {
      var t1, t2, valuesLength, newLength, t3, _this = this;
      A._asInt(index);
      A._instanceType(_this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      A._asInt(start);
      A._asInt(end);
      if (type$.List_dynamic._is(values)) {
        t1 = J.getInterceptor$asx(values);
        t2 = t1.get$length(values);
        if (typeof t2 !== "number")
          return A.iae(t2);
        if (!(start > t2)) {
          t1 = t1.get$length(values);
          if (typeof t1 !== "number")
            return A.iae(t1);
          t1 = end > t1;
        } else
          t1 = true;
        if (t1)
          throw A.wrapException(A.StateError$("Too few elements"));
      }
      valuesLength = end - start;
      t1 = _this._typed_buffer$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      newLength = t1 + valuesLength;
      _this._ensureCapacity$1(newLength);
      t1 = _this._typed_buffer$_buffer;
      t2 = index + valuesLength;
      t3 = _this._typed_buffer$_length;
      if (typeof t3 !== "number")
        return t3.$add();
      J.setRange$4$ax(t1, t2, t3 + valuesLength, t1, index);
      J.setRange$4$ax(_this._typed_buffer$_buffer, index, t2, values, start);
      _this._typed_buffer$_length = newLength;
    },
    insert$2(_, index, element) {
      var t1, t2, newBuffer, _this = this;
      A._asInt(index);
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(element);
      if (index >= 0) {
        t1 = _this._typed_buffer$_length;
        if (typeof t1 !== "number")
          return A.iae(t1);
        t1 = index > t1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.RangeError$range(index, 0, _this._typed_buffer$_length, null, null));
      t1 = _this._typed_buffer$_length;
      t2 = J.get$length$asx(_this._typed_buffer$_buffer);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return A.iae(t2);
      if (t1 < t2) {
        t1 = _this._typed_buffer$_buffer;
        t2 = _this._typed_buffer$_length;
        if (typeof t2 !== "number")
          return t2.$add();
        J.setRange$4$ax(t1, index + 1, t2 + 1, t1, index);
        J.$indexSet$ax(_this._typed_buffer$_buffer, index, element);
        t1 = _this._typed_buffer$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_typed_buffer$_length(t1 + 1);
        return;
      }
      newBuffer = _this._createBiggerBuffer$1(null);
      t1 = J.getInterceptor$ax(newBuffer);
      t1.setRange$3(newBuffer, 0, index, _this._typed_buffer$_buffer);
      t2 = _this._typed_buffer$_length;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.setRange$4(newBuffer, index + 1, t2 + 1, _this._typed_buffer$_buffer, index);
      t1.$indexSet(newBuffer, index, element);
      t1 = _this._typed_buffer$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_typed_buffer$_length(t1 + 1);
      _this.set$_typed_buffer$_buffer(newBuffer);
    },
    _ensureCapacity$1(requiredCapacity) {
      var t1, newBuffer, _this = this;
      A._asInt(requiredCapacity);
      t1 = J.get$length$asx(_this._typed_buffer$_buffer);
      if (typeof t1 !== "number")
        return A.iae(t1);
      if (requiredCapacity <= t1)
        return;
      newBuffer = _this._createBiggerBuffer$1(requiredCapacity);
      J.setRange$3$ax(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
      _this.set$_typed_buffer$_buffer(newBuffer);
    },
    _createBiggerBuffer$1(requiredCapacity) {
      var t1, newLength;
      A._asIntQ(requiredCapacity);
      t1 = J.get$length$asx(this._typed_buffer$_buffer);
      if (typeof t1 !== "number")
        return t1.$mul();
      newLength = t1 * 2;
      if (requiredCapacity != null && newLength < requiredCapacity)
        newLength = requiredCapacity;
      else if (newLength < 8)
        newLength = 8;
      return this._createBuffer$1(newLength);
    },
    _grow$1($length) {
      var t1;
      A._asInt($length);
      t1 = this._createBiggerBuffer$1(null);
      J.setRange$3$ax(t1, 0, $length, this._typed_buffer$_buffer);
      this.set$_typed_buffer$_buffer(t1);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1;
      A._asInt(start);
      A._asInt(end);
      A._instanceType(this)._eval$1("Iterable<TypedDataBuffer.E>")._as(iterable);
      A._asInt(skipCount);
      t1 = this._typed_buffer$_length;
      if (typeof t1 !== "number")
        return A.iae(t1);
      if (end > t1)
        throw A.wrapException(A.RangeError$range(end, 0, t1, null, null));
      this._setRange$4(start, end, iterable, skipCount);
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    _setRange$4(start, end, source, skipCount) {
      var t1, t2, t3;
      A._asInt(start);
      A._asInt(end);
      t1 = A._instanceType(this);
      t1._eval$1("Iterable<TypedDataBuffer.E>")._as(source);
      A._asInt(skipCount);
      t2 = this._typed_buffer$_buffer;
      t3 = J.getInterceptor$ax(t2);
      if (t1._eval$1("TypedDataBuffer<TypedDataBuffer.E>")._is(source))
        t3.setRange$4(t2, start, end, source._typed_buffer$_buffer, skipCount);
      else
        t3.setRange$4(t2, start, end, source, skipCount);
    },
    get$buffer(_) {
      return J.get$buffer$x(this._typed_buffer$_buffer);
    },
    set$_typed_buffer$_buffer(_buffer) {
      this._typed_buffer$_buffer = A._instanceType(this)._eval$1("TypedDataList<TypedDataBuffer.E>")._as(_buffer);
    },
    set$_typed_buffer$_length(_length) {
      this._typed_buffer$_length = A._asInt(_length);
    }
  };
  A._IntBuffer.prototype = {
    get$_defaultValue() {
      return 0;
    }
  };
  A.Uint8Buffer.prototype = {
    _createBuffer$1(size) {
      return A.NativeUint8List_NativeUint8List(A._asInt(size));
    }
  };
  A.EventStreamProvider.prototype = {
    forTarget$1(e) {
      return A._EventStream$(type$.nullable_JSObject._as(e), this._eventType, false, this.$ti._precomputed1);
    }
  };
  A._EventStream.prototype = {
    get$isBroadcast() {
      return true;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      A._asBoolQ(cancelOnError);
      return A._EventStreamSubscription$(_this._streams$_target, _this._eventType, onData, _this._useCapture, t1._precomputed1);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$onError(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$2$onDone(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._EventStreamSubscription.prototype = {
    _EventStreamSubscription$4(_target, _eventType, onData, _useCapture, $T) {
      this._tryResume$0();
    },
    cancel$0() {
      var _this = this,
        emptyFuture = A.Future_Future$value(null, type$.void);
      if (A.boolConversionCheck(_this.get$_canceled()))
        return emptyFuture;
      _this._unlisten$0();
      _this._onData = _this._streams$_target = null;
      return emptyFuture;
    },
    get$_canceled() {
      return this._streams$_target == null;
    },
    onData$1(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)?")._as(handleData);
      if (A.boolConversionCheck(_this.get$_canceled()))
        throw A.wrapException(A.StateError$("Subscription has been canceled."));
      _this._unlisten$0();
      if (handleData == null)
        t1 = null;
      else {
        t1 = A._wrapZone(new A._EventStreamSubscription_onData_closure(handleData), type$.JSObject);
        t1 = t1 == null ? null : A._functionToJS1(t1);
      }
      _this.set$_onData(t1);
      _this._tryResume$0();
    },
    pause$0() {
      var t1, _this = this;
      if (A.boolConversionCheck(_this.get$_canceled()))
        return;
      t1 = _this._pauseCount;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_pauseCount(t1 + 1);
      _this._unlisten$0();
    },
    get$isPaused() {
      var t1 = this._pauseCount;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    resume$0() {
      var t1, _this = this;
      if (A.boolConversionCheck(_this.get$_canceled()) || !A.boolConversionCheck(_this.get$isPaused()))
        return;
      t1 = _this._pauseCount;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_pauseCount(t1 - 1);
      _this._tryResume$0();
    },
    _tryResume$0() {
      var t1, _this = this;
      if (_this._onData != null && !A.boolConversionCheck(_this.get$isPaused())) {
        t1 = _this._streams$_target;
        t1.toString;
        A._callMethodUnchecked3(t1, "addEventListener", _this._eventType, _this._onData, A.BoolToJSBoolean_get_toJS(_this._useCapture), type$.void);
      }
    },
    _unlisten$0() {
      var t2, _this = this,
        t1 = _this._onData;
      if (t1 != null) {
        t2 = _this._streams$_target;
        t2.toString;
        A._callMethodUnchecked3(t2, "removeEventListener", _this._eventType, t1, A.BoolToJSBoolean_get_toJS(_this._useCapture), type$.void);
      }
    },
    set$_pauseCount(_pauseCount) {
      this._pauseCount = A._asInt(_pauseCount);
    },
    set$_onData(_onData) {
      this._onData = type$.nullable_JavaScriptFunction._as(_onData);
    },
    $isStreamSubscription: 1
  };
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.JSObject._as(e));
    },
    $signature: 1
  };
  A._EventStreamSubscription_onData_closure.prototype = {
    call$1(e) {
      return this.handleData.call$1(type$.JSObject._as(e));
    },
    $signature: 1
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _.super$_BufferingStreamSubscription$_close = _._close$0;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.Converter.prototype;
    _.super$Converter$bind = _.bind$1;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = A.Message0.prototype;
    _.super$Message$serialize = _.serialize$2;
    _ = A.Request.prototype;
    _.super$Request$serialize = _.serialize$2;
    _ = A.Response.prototype;
    _.super$Response$serialize = _.serialize$2;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 22);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 10);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 10);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 10);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 6);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 8);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    _static(A, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 79, 0);
    _instance(A._AsyncAwaitCompleter.prototype, "get$complete", 0, 0, null, ["call$1", "call$0"], ["complete$1", "complete$0"], 11, 0, 0);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_i(_ = A._BroadcastStreamController.prototype, "get$add", "add$1", 7);
    _instance(_, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 14, 0, 0);
    _instance_0_u(_, "get$close", "close$0", 2);
    _instance(A._AsyncCompleter.prototype, "get$complete", 0, 0, null, ["call$1", "call$0"], ["complete$1", "complete$0"], 11, 0, 0);
    _instance(A._SyncCompleter.prototype, "get$complete", 0, 0, null, ["call$1", "call$0"], ["complete$1", "complete$0"], 11, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 8);
    _instance_1_i(_ = A._StreamController.prototype, "get$add", "add$1", 7);
    _instance(_, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 14, 0, 0);
    _instance_0_u(_, "get$close", "close$0", 57);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(_ = A._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(A._DoneStreamSubscription.prototype, "get$_onMicrotask", "_onMicrotask$0", 0);
    _instance_1_u(_ = A._StreamIterator.prototype, "get$_async$_onData", "_async$_onData$1", 7);
    _instance_2_u(_, "get$_onError", "_onError$2", 8);
    _instance_0_u(_, "get$_onDone", "_onDone$0", 0);
    _instance_0_u(_ = A._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 7);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 55);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _instance_0_u(_ = A._SinkTransformerStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 7);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 8);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_2(A, "collection_ListBase__compareAny$closure", "ListBase__compareAny", 22);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 27);
    _instance_1_u(A.WasmStatement.prototype, "get$sqlite3_column_table_name", "sqlite3_column_table_name$1", 40);
    _instance_0_u(A.WasmVfs.prototype, "get$close", "close$0", 0);
    _static_1(A, "sync_channel_MessageSerializer_readEmpty$closure", "MessageSerializer_readEmpty", 80);
    _static_1(A, "sync_channel_MessageSerializer_readFlags$closure", "MessageSerializer_readFlags", 81);
    _static_1(A, "sync_channel_MessageSerializer_readNameAndFlags$closure", "MessageSerializer_readNameAndFlags", 54);
    _instance_1_u(A.VfsWorker.prototype, "get$_releaseImplicitLock", "_releaseImplicitLock$1", 45);
    _instance_0_u(A.AsynchronousIndexedDbFileSystem.prototype, "get$close", "close$0", 0);
    _instance_0_u(A.IndexedDbFileSystem.prototype, "get$close", "close$0", 2);
    _instance_0_u(A._FunctionWorkItem.prototype, "get$run", "run$0", 0);
    _instance_0_u(A._DeleteFileWorkItem.prototype, "get$run", "run$0", 2);
    _instance_0_u(A._CreateFileWorkItem.prototype, "get$run", "run$0", 2);
    _instance_0_u(A._WriteFileWorkItem.prototype, "get$run", "run$0", 2);
    _instance_0_u(A.SimpleOpfsFileSystem.prototype, "get$close", "close$0", 0);
    _instance_1_u(A.ProtocolChannel.prototype, "get$_handleIncoming", "_handleIncoming$1", 21);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Iterable, A.CastIterator, A.Closure, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.TakeIterator, A.SkipIterator, A.EmptyIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A._Record, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.MapBase, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._UnmodifiableNativeByteBufferView, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A.Stream, A._BufferingStreamSubscription, A._BroadcastStreamController, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.StreamTransformerBase, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._StreamSinkWrapper, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._EventSinkWrapper, A._ZoneFunction, A._Zone, A._HashMapKeyIterator, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._LinkedListIterator, A.LinkedListEntry, A._MapBaseValueIterator, A.Codec, A.Converter, A.StringConversionSink, A.ByteConversionSink, A._Base64Encoder, A._Base64Decoder, A._ConverterStreamEventSink, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A._FinalizationRegistryWrapper, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.Expando, A.NullRejectionException, A._JSRandom, A._JSSecureRandom, A.Endian, A.NonGrowableListMixin, A.UnmodifiableMapMixin, A._ReadWriteMutexRequest, A.ReadWriteMutex, A.Context, A._PathDirection, A._PathRelation, A.Style, A.ParsedPath, A.PathException, A.CommonDatabase, A.SqliteUpdate, A.SqliteException, A.RawSqliteBindings, A.SqliteResult, A.RawSqliteDatabase, A.RawStatementCompiler, A.RawSqliteStatement, A.RawSqliteContext, A.RawSqliteValue, A.FinalizablePart, A.DatabaseImplementation, A._StreamHandlers, A.Sqlite3Implementation, A.CommonPreparedStatement, A.VirtualFileSystem, A.BaseVfsFile, A.Cursor, A._Row_Object_UnmodifiableMapMixin, A._ResultIterator, A.IndexedParameters, A.VfsException, A.Sqlite3Filename, A._CursorReader, A.WasmInstance, A.RequestResponseSynchronizer, A.MessageSerializer, A.Message, A._ResolvedPath, A.VfsWorker, A._OpenedFileHandle, A.AsynchronousIndexedDbFileSystem, A._FileWriteRequest, A._OffsetAndBuffer, A._IndexedDbFile, A.WasmBindings, A._InjectedValues, A.DartCallbacks, A.ProtocolChannel, A.DatabaseController, A.WorkerDatabase, A.WebLocks, A.HeldLock, A.Message0, A.CompatibilityResult, A.Lock, A.WorkerEnvironment, A._StreamState, A._ConnectionDatabase, A.DatabaseState, A.WorkerRunner, A.StreamChannelMixin, A._GuaranteeSink, A.StreamChannelController, A.EventStreamProvider, A._EventStreamSubscription]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.TakeIterable, A.SkipIterable, A.WhereTypeIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.LinkedList]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure, [A.Closure2Args, A.Closure0Args, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A.Future_wait_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_length_closure, A.Stream_first_closure0, A._RootZone_bindUnaryCallbackGuarded_closure, A._HashMap_values_closure, A.MapBase_entries_closure, A.Converter_bind_closure, A._BigIntImpl_hashCode_finish, A._Uri__makePath_closure, A._createTables_setChars, A._createTables_setRange, A.FutureOfVoidToJSPromise_get_toJS__closure, A.jsify__convert, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.dartify_convert, A.SingleSubscriptionTransformer_bind_closure0, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.SqliteException_toString_closure, A.DatabaseImplementation__updatesHandler__closure, A._StreamHandlers_closure, A.disposeFinalizer_closure, A._CursorReader_moveNext_closure, A._CursorReader_moveNext_closure0, A.CompleteIdbRequest_complete_closure, A.CompleteIdbRequest_complete_closure0, A.CompleteOpenIdbRequest_completeOrBlocked_closure, A.CompleteOpenIdbRequest_completeOrBlocked_closure0, A.CompleteOpenIdbRequest_completeOrBlocked_closure1, A.AsynchronousIndexedDbFileSystem_open_closure, A.AsynchronousIndexedDbFileSystem__readFile_closure, A.AsynchronousIndexedDbFileSystem__write_closure, A.SimpleOpfsFileSystem_inDirectory_open, A._InjectedValues_closure, A._InjectedValues_closure0, A._InjectedValues_closure1, A._InjectedValues_closure2, A._InjectedValues_closure3, A._InjectedValues_closure4, A._InjectedValues_closure7, A._InjectedValues_closure8, A._InjectedValues_closure9, A._InjectedValues_closure10, A._InjectedValues_closure17, A._InjectedValues_closure18, A._InjectedValues_closure19, A._InjectedValues_closure20, A._InjectedValues_closure21, A._InjectedValues_closure22, A._InjectedValues_closure23, A._InjectedValues_closure24, A._InjectedValues_closure25, A._InjectedValues_closure26, A._channel_closure, A._channel_closure0, A._channel_closure2, A.ProtocolChannel_closure, A.WebLocks_request_callback, A.Lock_synchronized_closure, A.CompleteOpenIdbRequest_completeOpen_closure, A.CompleteOpenIdbRequest_completeOpen_closure0, A.CompleteOpenIdbRequest_completeOpen_closure1, A.Dedicated_topLevelRequests_closure, A.Shared_topLevelRequests_closure, A.Shared_topLevelRequests_closure_handlePort, A.Shared_topLevelRequests__handlePort_closure, A.Shared_topLevelRequests__closure, A._ClientConnection_handleRequest__closure1, A._ClientConnection_handleRequest__closure0, A._ClientConnection_handleRequest__closure, A._ClientConnection__databaseFor_closure, A.throttledUpdates_collectUpdate, A.throttledUpdates__closure, A.throttledUpdates__closure0, A.throttledUpdates__closure1, A._GuaranteeSink__addError_closure, A._EventStreamSubscription_closure, A._EventStreamSubscription_onData_closure]);
    _inheritMany(A.Closure2Args, [A._CastListBase_sort_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A.FutureExtensions_onError_onError, A._Future__chainForeignFuture_closure0, A._HashMap_addAll_closure, A.MapBase_addAll_closure, A.MapBase_mapToString_closure, A._BigIntImpl_hashCode_combine, A._Uri__makeQueryFromParameters_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._Uri__makeQueryFromParametersDefault_writeParameter, A._Uri__makeQueryFromParametersDefault_closure, A._createTables_build, A.FutureOfVoidToJSPromise_get_toJS_closure, A.FutureOfVoidToJSPromise_get_toJS__closure0, A.WasmInstance_load_closure, A.WasmInstance_load__closure, A.WasmSqlite3_loadFromUrl_closure, A.AsynchronousIndexedDbFileSystem__write_writeBlock, A._InjectedValues_closure5, A._InjectedValues_closure6, A._InjectedValues_closure11, A._InjectedValues_closure12, A._InjectedValues_closure13, A._InjectedValues_closure14, A._InjectedValues_closure15, A._InjectedValues_closure16, A.Message_sendToWorker_closure, A.Message_sendToPort_closure, A.WorkerRunner_loadWasmModule_closure]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.Error, [A.LateError, A.NotNullableError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A.AssertionError, A._Error, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inheritMany(A.ListBase, [A.UnmodifiableListBase, A.WasmValueList, A.TypedDataBuffer]);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.Closure0Args, [A.nullFuture_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A.Future_Future_closure, A.Future_Future$delayed_closure, A.Future_wait_handleError_closure, A.Future_wait__closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__chainCoreFutureAsync_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_length_closure0, A.Stream_first_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._MultiStream_listen_closure, A._cancelAndValue_closure, A._rootHandleError_closure, A._RootZone_bindCallback_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A.SingleSubscriptionTransformer_bind_closure, A.DatabaseImplementation__updatesHandler_closure, A.DatabaseImplementation__updatesHandler_closure0, A.DatabaseImplementation__rollbackHandler_closure, A.DatabaseImplementation__rollbackHandler__closure, A.DatabaseImplementation__rollbackHandler_closure0, A.DatabaseImplementation__commitHandler_closure, A.DatabaseImplementation__commitHandler__closure, A.DatabaseImplementation__commitHandler_closure0, A.DatabaseImplementation__prepareInternal_freeIntermediateResults, A._StreamHandlers_closure_addListener, A._StreamHandlers_closure_removeListener, A.AsynchronousIndexedDbFileSystem_readFully_closure, A._FileWriteRequest__updateBlock_closure, A.IndexedDbFileSystem__startWorkingIfNeeded_closure, A.IndexedDbFileSystem_flush_closure, A._IndexedDbFile_xTruncate_closure, A._InjectedValues__closure13, A._InjectedValues__closure12, A._InjectedValues__closure11, A._InjectedValues__closure10, A._InjectedValues__closure9, A._InjectedValues__closure8, A._InjectedValues__closure7, A._InjectedValues__closure6, A._InjectedValues__closure5, A._InjectedValues__closure4, A._InjectedValues__closure3, A._InjectedValues__closure2, A._InjectedValues__closure1, A._InjectedValues__closure0, A._InjectedValues__closure, A._channel_closure1, A.Lock_synchronized_callBlockAndComplete, A.Shared_topLevelRequests__closure0, A._ClientConnection_closure, A._ClientConnection_handleRequest_closure, A._ClientConnection_handleRequest_closure0, A._ClientConnection_handleRequest_closure1, A.DatabaseState_vfs_closure, A.DatabaseState_opened_closure, A.WorkerRunner__accept_closure, A.WorkerRunner_checkCompatibility_closure, A.throttledUpdates_maybeFireUpdates, A.throttledUpdates_closure0, A.throttledUpdates_closure1, A.throttledUpdates_closure2, A.throttledUpdates_closure, A.GuaranteeChannel_closure, A.GuaranteeChannel__closure]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A._Record2, A._Record);
    _inheritMany(A._Record2, [A._Record_2, A._Record_2_file_outFlags]);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._HashMap]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Stream, [A._StreamImpl, A._MultiStream, A._ForwardingStream, A._BoundSinkStream, A._EventStream]);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._BroadcastStream, A._ControllerStream);
    _inheritMany(A._BufferingStreamSubscription, [A._ControllerSubscription, A._ForwardingStreamSubscription, A._SinkTransformerStreamSubscription]);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inherit(A._AsyncBroadcastStreamController, A._BroadcastStreamController);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inherit(A._MultiStreamController, A._AsyncStreamController);
    _inherit(A._MapStream, A._ForwardingStream);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._IdentityHashMap, A._HashMap);
    _inherit(A._SetBase, A.SetBase);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Latin1Codec, A.Utf8Codec]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Base64Encoder, A.Base64Decoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inheritMany(A._UnicodeSubsetEncoder, [A.AsciiEncoder, A.Latin1Encoder]);
    _inheritMany(A.StringConversionSink, [A._UnicodeSubsetEncoderSink, A._Base64DecoderSink, A._StringAdapterSink]);
    _inheritMany(A._UnicodeSubsetDecoder, [A.AsciiDecoder, A.Latin1Decoder]);
    _inheritMany(A.ByteConversionSink, [A._ErrorHandlingAsciiDecoderSink, A._SimpleAsciiDecoderSink, A._Base64EncoderSink, A._ByteAdapterSink, A._Latin1DecoderSink, A._Utf8ConversionSink]);
    _inherit(A._BufferCachingBase64Encoder, A._Base64Encoder);
    _inheritMany(A._Base64EncoderSink, [A._AsciiBase64EncoderSink, A._Utf8Base64EncoderSink]);
    _inherit(A._Latin1AllowInvalidDecoderSink, A._Latin1DecoderSink);
    _inherit(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink, A._Utf8Encoder);
    _inherit(A._Utf8EncoderSink, A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inherit(A.SingleSubscriptionTransformer, A.StreamTransformerBase);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inheritMany(A._Enum, [A.SqliteUpdateKind, A.OpenMode, A.WorkerOperation, A.FileType, A.MessageType, A.FileSystemImplementation, A.FileType0, A.StorageMode, A.CustomDatabaseMessageKind]);
    _inheritMany(A.FinalizablePart, [A.FinalizableDatabase, A.FinalizableStatement]);
    _inherit(A.StatementImplementation, A.CommonPreparedStatement);
    _inherit(A.BaseVirtualFileSystem, A.VirtualFileSystem);
    _inheritMany(A.BaseVirtualFileSystem, [A.InMemoryFileSystem, A.WasmVfs, A.IndexedDbFileSystem, A.SimpleOpfsFileSystem]);
    _inheritMany(A.BaseVfsFile, [A._InMemoryFile, A.WasmFile, A._SimpleOpfsFile]);
    _inherit(A._ResultSet_Cursor_ListMixin, A.Cursor);
    _inherit(A._ResultSet_Cursor_ListMixin_NonGrowableListMixin, A._ResultSet_Cursor_ListMixin);
    _inherit(A.ResultSet, A._ResultSet_Cursor_ListMixin_NonGrowableListMixin);
    _inherit(A._Row_Object_UnmodifiableMapMixin_MapMixin, A._Row_Object_UnmodifiableMapMixin);
    _inherit(A.Row, A._Row_Object_UnmodifiableMapMixin_MapMixin);
    _inherit(A.WasmSqliteBindings, A.RawSqliteBindings);
    _inherit(A.WasmDatabase, A.RawSqliteDatabase);
    _inherit(A.WasmStatementCompiler, A.RawStatementCompiler);
    _inherit(A.WasmStatement, A.RawSqliteStatement);
    _inherit(A.WasmContext, A.RawSqliteContext);
    _inherit(A.WasmValue, A.RawSqliteValue);
    _inherit(A.WasmSqlite3, A.Sqlite3Implementation);
    _inheritMany(A.Message, [A.EmptyMessage, A.Flags]);
    _inherit(A.NameAndInt32Flags, A.Flags);
    _inherit(A._IndexedDbWorkItem, A.LinkedListEntry);
    _inheritMany(A._IndexedDbWorkItem, [A._FunctionWorkItem, A._DeleteFileWorkItem, A._CreateFileWorkItem, A._WriteFileWorkItem]);
    _inheritMany(A.Message0, [A.Notification, A.Request, A.Response, A.StartFileSystemServer]);
    _inheritMany(A.Request, [A.OpenRequest, A.ConnectRequest, A.CustomRequest, A.FileSystemExistsQuery, A.FileSystemFlushRequest, A.FileSystemAccess, A.RunQuery, A.CloseDatabase, A.OpenAdditonalConnection, A.StreamRequest, A.CompatibilityCheck]);
    _inheritMany(A.Response, [A.SimpleSuccessResponse, A.EndpointResponse, A.RowsResponse, A.ErrorResponse]);
    _inheritMany(A.Notification, [A.UpdateNotification, A.EmptyNotification]);
    _inheritMany(A.WorkerEnvironment, [A.Dedicated, A.Shared]);
    _inherit(A._ClientConnection, A.ProtocolChannel);
    _inherit(A.ThrottledCommonDatabase, A.CommonDatabase);
    _inherit(A.AsyncSqliteController, A.DatabaseController);
    _inherit(A.AsyncSqliteDatabase, A.WorkerDatabase);
    _inherit(A.GuaranteeChannel, A.StreamChannelMixin);
    _inherit(A._IntBuffer, A.TypedDataBuffer);
    _inherit(A.Uint8Buffer, A._IntBuffer);
    _mixinHard(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixinHard(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixinHard(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixinHard(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixinHard(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixinHard(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixinHard(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixinHard(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixinHard(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink, A.StringConversionSink);
    _mixinHard(A._ResultSet_Cursor_ListMixin, A.ListBase);
    _mixinHard(A._ResultSet_Cursor_ListMixin_NonGrowableListMixin, A.NonGrowableListMixin);
    _mixinHard(A._Row_Object_UnmodifiableMapMixin, A.UnmodifiableMapMixin);
    _mixinHard(A._Row_Object_UnmodifiableMapMixin_MapMixin, A.MapBase);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["~()", "~(JSObject)", "Future<~>()", "Null()", "int(int,int)", "Null(@)", "~(@)", "~(Object?)", "~(Object,StackTrace)", "Null(int)", "~(~())", "~([Object?])", "Null(int,int,int)", "int(int)", "~(Object[StackTrace?])", "Null(Object,StackTrace)", "~(Object?,JSObject)", "int(int,int,int,JavaScriptBigInt)", "int(int,int,int,int)", "int(int,int,int,int,int)", "@()", "~(Message0)", "int(@,@)", "Future<StreamSubscription<~>>()", "~(String,@)", "int(int,int,int)", "bool(String)", "String(String)", "~(~)", "Object?(Object?)", "~(SqliteUpdate)", "~(Uint8List,String,int)", "Future<~>(int,Uint8List)", "Uint8List(@,@)", "~(String,int?)", "String(String?)", "String(Object?)", "~(int,String,int)", "int()", "~(FinalizablePart)", "String?(int)", "~(String,int)", "~(String,Map<String,Object?>)", "~(String,Object?)", "~(String,String)", "~(_OpenedFileHandle)", "Null(JSObject)", "JSObject(JSObject?)", "Object?(~)", "Future<~>(int)", "Uint8List()", "Future<JSObject>(String)", "_ConverterStreamEventSink<@,@>(EventSink<@>)", "~(Object?,Object?)", "NameAndInt32Flags(MessageSerializer)", "~(@,StackTrace)", "Null(int,int)", "Future<@>()", "int(int,JavaScriptBigInt)", "_Future<@>(@)", "Null(int,int,int,int,JavaScriptBigInt)", "int?(int)", "~(int,@)", "Null(HeldLock)", "Null(JavaScriptFunction,JavaScriptFunction)", "Null(@,StackTrace)", "Message0(JSObject)", "~(MultiStreamController<Message0>)", "Future<StreamSubscription<SqliteUpdate>>()", "~(String,String?)", "Null(~())", "@(String)", "bool(_ConnectionDatabase)", "Future<WorkerDatabase>()", "bool()", "Future<CompatibilityResult>()", "0&(Object?,StackTrace)", "@(@,String)", "@(@)", "~(Zone?,ZoneDelegate?,Zone,~())", "EmptyMessage(MessageSerializer)", "Flags(MessageSerializer)", "JSObject(Object)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1),
      "2;file,outFlags": (t1, t2) => o => o instanceof A._Record_2_file_outFlags && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","JSBool":{"Interceptor":[],"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Interceptor":[],"Null":[],"TrustedGetRuntimeType":[]},"JSMutableIndexable":{"JSIndexable":["1"]},"JavaScriptObject":{"Interceptor":[],"JSObject":[]},"LegacyJavaScriptObject":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"JavaScriptBigInt":{"Interceptor":[]},"JavaScriptSymbol":{"Interceptor":[]},"JSArray":{"List":["1"],"_ListIterable":["1"],"JavaScriptObject":[],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Interceptor":[],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"_ListIterable":["1"],"JavaScriptObject":[],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Interceptor":[],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Interceptor":[],"Comparable":["num"]},"JSInt":{"JSNumber":[],"double":[],"int":[],"num":[],"Interceptor":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"JSNumber":[],"double":[],"num":[],"Interceptor":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Interceptor":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"],"TrustedGetRuntimeType":[]},"CastStream":{"Stream":["2"]},"CastStreamSubscription":{"StreamSubscription":["2"]},"CastStreamTransformer":{"StreamTransformerBase":["3","4"],"StreamTransformer":["3","4"]},"CastConverter":{"Converter":["3","4"],"StreamTransformerBase":["3","4"],"StreamTransformer":["3","4"]},"_CopyingBytesBuilder":{"BytesBuilder":[]},"_BytesBuilder":{"BytesBuilder":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"__CastListBase__CastIterableBase_ListMixin":["1","2"],"ListBase":["2"],"List":["2"],"_ListIterable":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"__CastListBase__CastIterableBase_ListMixin":["1","2"],"ListBase":["2"],"List":["2"],"_ListIterable":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"CastSet":{"Set":["2"],"_SetIterable":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"CastMap":{"MapBase":["3","4"],"Map":["3","4"]},"CastQueue":{"Queue":["2"],"_QueueIterable":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"LateError":{"Error":[]},"ReachabilityError":{"Error":[]},"CodeUnits":{"UnmodifiableListBase":["int"],"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"NotNullableError":{"TypeError":[],"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"HideEfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"]},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"TakeWhileIterable":{"Iterable":["1"]},"TakeWhileIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"SkipWhileIterable":{"Iterable":["1"]},"SkipWhileIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"FollowedByIterable":{"Iterable":["1"]},"EfficientLengthFollowedByIterable":{"FollowedByIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"FollowedByIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"NonNullsIterable":{"Iterable":["1"]},"NonNullsIterator":{"Iterator":["1"]},"IndexedIterable":{"Iterable":["+(int,1)"]},"EfficientLengthIndexedIterable":{"IndexedIterable":["1"],"EfficientLengthIterable":["+(int,1)"],"HideEfficientLengthIterable":["+(int,1)"],"Iterable":["+(int,1)"]},"IndexedIterator":{"Iterator":["+(int,1)"]},"LinkedList0":{"Iterable":["1"]},"_LinkedListIterator0":{"Iterator":["1"]},"UnmodifiableListMixin":{"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"FixedLengthListBase":{"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"FixedLengthListMixin":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"ListMapView":{"UnmodifiableMapBase":["int","1"],"MapBase":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"__CastListBase__CastIterableBase_ListMixin":{"ListBase":["2"],"List":["2"],"_ListIterable":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"_Record_2":{"_Record2":[],"_Record":[],"Record":[]},"_Record_2_file_outFlags":{"_Record2":[],"_Record":[],"Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"ConstantMap":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"ConstantSet":{"SetBase":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"ConstantStringSet":{"ConstantSet":["1"],"SetBase":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"GeneralConstantSet":{"ConstantSet":["1"],"SetBase":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation2":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation3":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation4":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation5":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation6":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation7":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation8":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation9":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation10":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation11":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation12":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation13":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation14":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation15":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation16":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation17":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation18":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation19":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation20":{"Instantiation":[],"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"NoSuchMethodError":[],"Error":[]},"JsNoSuchMethodError":{"NoSuchMethodError":[],"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"TearOffClosure":[],"Closure":[],"Function":[]},"BoundClosure":{"TearOffClosure":[],"Closure":[],"Function":[]},"JavaScriptIndexingBehavior":{"JSMutableIndexable":["1"],"JSIndexable":["1"]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"DeferredNotLoadedError":{"NoSuchMethodError":[],"Error":[]},"UnimplementedNoSuchMethodError":{"NoSuchMethodError":[],"Error":[]},"_AssertionError":{"AssertionError":[],"Error":[]},"_UnreachableError":{"AssertionError":[],"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JsIdentityLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[]},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[],"MapBase.K":"1","MapBase.V":"2"},"_Record":{"Record":[]},"_EmptyRecord":{"_Record":[],"Record":[]},"_Record2":{"_Record":[],"Record":[]},"_Record1":{"_Record":[],"Record":[]},"_Record3":{"_Record":[],"Record":[]},"_RecordN":{"_Record":[],"Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"NativeFloat32x4List":{"_NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat32x4List_Object_ListMixin":[],"Float32x4List":[],"ListBase":["Float32x4"],"TypedDataList":["Float32x4"],"List":["Float32x4"],"_ListIterable":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"HideEfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"FixedLengthListMixin":["Float32x4"],"TypedData":[],"TrustedGetRuntimeType":[]},"_UnmodifiableFloat32x4ListView":{"__UnmodifiableFloat32x4ListView_NativeFloat32x4List_UnmodifiableListMixin":[],"NativeFloat32x4List":[],"_NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat32x4List_Object_ListMixin":[],"Float32x4List":[],"ListBase":["Float32x4"],"TypedDataList":["Float32x4"],"UnmodifiableListMixin":["Float32x4"],"List":["Float32x4"],"_ListIterable":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"HideEfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"FixedLengthListMixin":["Float32x4"],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeInt32x4List":{"_NativeInt32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeInt32x4List_Object_ListMixin":[],"Int32x4List":[],"ListBase":["Int32x4"],"TypedDataList":["Int32x4"],"List":["Int32x4"],"_ListIterable":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"HideEfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"FixedLengthListMixin":["Int32x4"],"TypedData":[],"TrustedGetRuntimeType":[]},"_UnmodifiableInt32x4ListView":{"__UnmodifiableInt32x4ListView_NativeInt32x4List_UnmodifiableListMixin":[],"NativeInt32x4List":[],"_NativeInt32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeInt32x4List_Object_ListMixin":[],"Int32x4List":[],"ListBase":["Int32x4"],"TypedDataList":["Int32x4"],"UnmodifiableListMixin":["Int32x4"],"List":["Int32x4"],"_ListIterable":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"HideEfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"FixedLengthListMixin":["Int32x4"],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeFloat64x2List":{"_NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat64x2List_Object_ListMixin":[],"Float64x2List":[],"ListBase":["Float64x2"],"TypedDataList":["Float64x2"],"List":["Float64x2"],"_ListIterable":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"HideEfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"FixedLengthListMixin":["Float64x2"],"TypedData":[],"TrustedGetRuntimeType":[]},"_UnmodifiableFloat64x2ListView":{"__UnmodifiableFloat64x2ListView_NativeFloat64x2List_UnmodifiableListMixin":[],"NativeFloat64x2List":[],"_NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat64x2List_Object_ListMixin":[],"Float64x2List":[],"ListBase":["Float64x2"],"TypedDataList":["Float64x2"],"UnmodifiableListMixin":["Float64x2"],"List":["Float64x2"],"_ListIterable":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"HideEfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"FixedLengthListMixin":["Float64x2"],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"TypedData":[]},"_UnmodifiableNativeByteBufferView":{"ByteBuffer":[]},"NativeByteData":{"NativeTypedData":[],"JavaScriptObject":[],"ByteData":[],"Interceptor":[],"JSObject":[],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"NativeTypedData":[],"JavaScriptIndexingBehavior":["1"],"JavaScriptObject":[],"JSMutableIndexable":["1"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"_ListIterable":["double"],"JavaScriptObject":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Float32List":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"_TypedFloatList":[],"ListBase":["double"],"TypedDataList":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"_ListIterable":["double"],"JavaScriptObject":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Float64List":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"_TypedFloatList":[],"ListBase":["double"],"TypedDataList":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"_ListIterable":["double"],"JavaScriptObject":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Int16List":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"_TypedIntList":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Int32List":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"_TypedIntList":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Int8List":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"_TypedIntList":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Uint16List":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"_TypedIntList":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Uint32List":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"_TypedIntList":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Uint8ClampedList":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"_TypedIntList":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"Uint8List":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"_TypedIntList":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeFloat32x4":{"Float32x4":[]},"NativeInt32x4":{"Int32x4":[]},"NativeFloat64x2":{"Float64x2":[]},"_NativeFloat32x4List_Object_ListMixin":{"ListBase":["Float32x4"],"List":["Float32x4"],"_ListIterable":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"HideEfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"]},"_NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin":{"_NativeFloat32x4List_Object_ListMixin":[],"ListBase":["Float32x4"],"List":["Float32x4"],"_ListIterable":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"HideEfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"FixedLengthListMixin":["Float32x4"]},"_NativeFloat64x2List_Object_ListMixin":{"ListBase":["Float64x2"],"List":["Float64x2"],"_ListIterable":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"HideEfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"]},"_NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin":{"_NativeFloat64x2List_Object_ListMixin":[],"ListBase":["Float64x2"],"List":["Float64x2"],"_ListIterable":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"HideEfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"FixedLengthListMixin":["Float64x2"]},"_NativeInt32x4List_Object_ListMixin":{"ListBase":["Int32x4"],"List":["Int32x4"],"_ListIterable":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"HideEfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"]},"_NativeInt32x4List_Object_ListMixin_FixedLengthListMixin":{"_NativeInt32x4List_Object_ListMixin":[],"ListBase":["Int32x4"],"List":["Int32x4"],"_ListIterable":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"HideEfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"FixedLengthListMixin":["Int32x4"]},"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"_ListIterable":["double"],"JavaScriptObject":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"]},"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":{"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"_ListIterable":["double"],"JavaScriptObject":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"]},"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":{"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"_ListIterable":["int"],"JavaScriptObject":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Interceptor":[],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"__UnmodifiableFloat32x4ListView_NativeFloat32x4List_UnmodifiableListMixin":{"NativeFloat32x4List":[],"_NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat32x4List_Object_ListMixin":[],"Float32x4List":[],"ListBase":["Float32x4"],"TypedDataList":["Float32x4"],"UnmodifiableListMixin":["Float32x4"],"List":["Float32x4"],"_ListIterable":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"HideEfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"FixedLengthListMixin":["Float32x4"],"TypedData":[],"TrustedGetRuntimeType":[]},"__UnmodifiableFloat64x2ListView_NativeFloat64x2List_UnmodifiableListMixin":{"NativeFloat64x2List":[],"_NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat64x2List_Object_ListMixin":[],"Float64x2List":[],"ListBase":["Float64x2"],"TypedDataList":["Float64x2"],"UnmodifiableListMixin":["Float64x2"],"List":["Float64x2"],"_ListIterable":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"HideEfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"FixedLengthListMixin":["Float64x2"],"TypedData":[],"TrustedGetRuntimeType":[]},"__UnmodifiableInt32x4ListView_NativeInt32x4List_UnmodifiableListMixin":{"NativeInt32x4List":[],"_NativeInt32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeInt32x4List_Object_ListMixin":[],"Int32x4List":[],"ListBase":["Int32x4"],"TypedDataList":["Int32x4"],"UnmodifiableListMixin":["Int32x4"],"List":["Int32x4"],"_ListIterable":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"HideEfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"FixedLengthListMixin":["Int32x4"],"TypedData":[],"TrustedGetRuntimeType":[]},"_InteropNullAssertionError":{"_Error":[],"TypeError":[],"Error":[]},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"_Error":[],"TypeError":[],"Error":[]},"_InconsistentSubtypingError":{"_Error":[],"TypeError":[],"Error":[]},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsBroadcastStreamController":{"_SyncBroadcastStreamController":["1"],"_BroadcastStreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"DeferredLoadException":{"Exception":[]},"TimeoutException":{"Exception":[]},"ParallelWaitError":{"Error":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_Future":{"Future":["1"]},"EventSink":{"Sink":["1"]},"StreamView":{"Stream":["1"]},"StreamSink":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_ControllerEventSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"MultiStreamController":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"StreamController":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"SynchronousStreamController":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_StreamControllerBase":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_StreamController":{"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamControllerDispatch":{"_StreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamControllerDispatch":{"_StreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamSinkWrapper":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_AsBroadcastStream":{"Stream":["1"]},"_BroadcastSubscriptionWrapper":{"StreamSubscription":["1"]},"_StreamIterator":{"StreamIterator":["1"]},"_EmptyStream":{"Stream":["1"]},"_MultiStream":{"Stream":["1"],"Stream.T":"1"},"_MultiStreamController":{"_AsyncStreamController":["1"],"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"MultiStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_WhereStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2"},"_ExpandStream":{"_ForwardingStream":["1","2"],"Stream":["2"]},"_HandleErrorStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_TakeStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_StateStreamSubscription":{"_ForwardingStreamSubscription":["2","2"],"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"]},"_TakeWhileStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_SkipStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_SkipWhileStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_DistinctStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_EventSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"_SinkTransformerStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_StreamSinkTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_BoundSinkStream":{"Stream":["2"],"Stream.T":"2"},"_HandlerEventSink":{"EventSink":["1"],"Sink":["1"]},"_StreamHandlerTransformer":{"_StreamSinkTransformer":["1","2"],"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_StreamBindTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_StreamSubscriptionTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_BoundSubscriptionStream":{"Stream":["2"]},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"_Zone":[],"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"]},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_CustomHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"]},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[]},"_HashSet":{"_SetBase":["1"],"SetBase":["1"],"HashSet":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_IdentityHashSet":{"_HashSet":["1"],"_SetBase":["1"],"SetBase":["1"],"HashSet":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_CustomHashSet":{"_HashSet":["1"],"_SetBase":["1"],"SetBase":["1"],"HashSet":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_HashSetIterator":{"Iterator":["1"]},"_LinkedHashSet":{"_SetBase":["1"],"SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedIdentityHashSet":{"_LinkedHashSet":["1"],"_SetBase":["1"],"SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedCustomHashSet":{"_LinkedHashSet":["1"],"_SetBase":["1"],"SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"UnmodifiableListView":{"UnmodifiableListBase":["1"],"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"HashMap":{"Map":["1","2"]},"HashSet":{"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"LinkedHashMap":{"Map":["1","2"]},"LinkedHashSet":{"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"LinkedList":{"Iterable":["1"],"Iterable.E":"1"},"_LinkedListIterator":{"Iterator":["1"]},"ListBase":{"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"_UnmodifiableMapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_QueueIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"Queue":{"_QueueIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_DoubleLinkedQueueElement":{"_DoubleLinkedQueueEntry":["1"],"DoubleLinkedQueueEntry":["1"]},"_DoubleLinkedQueueSentinel":{"_DoubleLinkedQueueEntry":["1"]},"DoubleLinkedQueue":{"Queue":["1"],"_QueueIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_DoubleLinkedQueueIterator":{"Iterator":["1"]},"ListQueue":{"Queue":["1"],"ListIterable":["1"],"_QueueIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_ListQueueIterator":{"Iterator":["1"]},"SetBase":{"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSetMixin":{"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":["1"],"_SetBase":["1"],"SetBase":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetView":{"_UnmodifiableSetView_SetBase__UnmodifiableSetMixin":["1"],"SetBase":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_SplayTreeSetNode":{"_SplayTreeNode":["1","_SplayTreeSetNode<1>"]},"_SplayTreeMapNode":{"_SplayTreeNode":["1","_SplayTreeMapNode<1,2>"]},"SplayTreeMap":{"_SplayTreeMap__SplayTree_MapMixin":["1","2"],"MapBase":["1","2"],"_SplayTree":["1","_SplayTreeMapNode<1,2>"],"Map":["1","2"]},"_SplayTreeIterator":{"Iterator":["3"]},"_SplayTreeKeyIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_SplayTreeValueIterable":{"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"_SplayTreeMapEntryIterable":{"EfficientLengthIterable":["MapEntry<1,2>"],"HideEfficientLengthIterable":["MapEntry<1,2>"],"Iterable":["MapEntry<1,2>"]},"_SplayTreeKeyIterator":{"_SplayTreeIterator":["1","2","1"],"Iterator":["1"]},"_SplayTreeValueIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","2"],"Iterator":["2"]},"_SplayTreeMapEntryIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","MapEntry<1,2>"],"Iterator":["MapEntry<1,2>"]},"SplayTreeSet":{"_SplayTreeSet__SplayTree_Iterable_SetMixin":["1"],"SetBase":["1"],"Set":["1"],"_SetIterable":["1"],"_SplayTreeSet__SplayTree_Iterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"_SplayTree":["1","_SplayTreeSetNode<1>"],"Iterable":["1"]},"_SplayTreeMap__SplayTree_MapMixin":{"MapBase":["1","2"],"_SplayTree":["1","_SplayTreeMapNode<1,2>"],"Map":["1","2"]},"_SplayTreeSet__SplayTree_Iterable":{"_SplayTree":["1","_SplayTreeSetNode<1>"],"Iterable":["1"]},"_SplayTreeSet__SplayTree_Iterable_SetMixin":{"SetBase":["1"],"Set":["1"],"_SetIterable":["1"],"_SplayTreeSet__SplayTree_Iterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"_SplayTree":["1","_SplayTreeSetNode<1>"],"Iterable":["1"]},"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":{"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_UnmodifiableSetView_SetBase__UnmodifiableSetMixin":{"SetBase":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":{"_SetBase":["1"],"SetBase":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_JsonMap":{"MapBase":["String","@"],"Map":["String","@"]},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Iterable":["String"]},"_JsonDecoderSink":{"_StringSinkConversionSink":["StringBuffer"],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String","Codec.T":"List<int>"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"AsciiEncoder":{"_UnicodeSubsetEncoder":[],"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"_UnicodeSubsetEncoderSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_UnicodeSubsetDecoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AsciiDecoder":{"_UnicodeSubsetDecoder":[],"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"_ErrorHandlingAsciiDecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_SimpleAsciiDecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>","Codec.T":"String"},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"_BufferCachingBase64Encoder":{"_Base64Encoder":[]},"_Base64EncoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_AsciiBase64EncoderSink":{"_Base64EncoderSink":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Utf8Base64EncoderSink":{"_Base64EncoderSink":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Base64Decoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"_Base64DecoderSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"ByteConversionSink":{"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ByteAdapterSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ByteCallbackSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ChunkedConversionSink":{"Sink":["1"]},"_SimpleCallbackSink":{"ChunkedConversionSink":["1"],"Sink":["1"]},"_ConverterStreamEventSink":{"EventSink":["1"],"Sink":["1"]},"_FusedCodec":{"Codec":["1","3"]},"_InvertedCodec":{"Codec":["1","2"]},"Converter":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_FusedConverter":{"Converter":["1","3"],"StreamTransformerBase":["1","3"],"StreamTransformer":["1","3"]},"Encoding":{"Codec":["String","List<int>"]},"HtmlEscape":{"Converter":["String","String"],"StreamTransformerBase":["String","String"],"StreamTransformer":["String","String"]},"_HtmlEscapeSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"JsonUnsupportedObjectError":[],"Error":[]},"JsonCodec":{"Codec":["Object?","String"]},"JsonEncoder":{"Converter":["Object?","String"],"StreamTransformerBase":["Object?","String"],"StreamTransformer":["Object?","String"]},"JsonUtf8Encoder":{"Converter":["Object?","List<int>"],"StreamTransformerBase":["Object?","List<int>"],"StreamTransformer":["Object?","List<int>"]},"_JsonEncoderSink":{"ChunkedConversionSink":["Object?"],"Sink":["Object?"]},"_JsonUtf8EncoderSink":{"ChunkedConversionSink":["Object?"],"Sink":["Object?"]},"JsonDecoder":{"Converter":["String","Object?"],"StreamTransformerBase":["String","Object?"],"StreamTransformer":["String","Object?"]},"_JsonPrettyPrintMixin":{"_JsonStringifier":[]},"_JsonStringStringifier":{"_JsonStringifier":[]},"_JsonStringStringifierPretty":{"__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin":[],"_JsonStringStringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"_JsonUtf8Stringifier":{"_JsonStringifier":[]},"_JsonUtf8StringifierPretty":{"__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin":[],"_JsonUtf8Stringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String","Codec.T":"List<int>"},"Latin1Encoder":{"_UnicodeSubsetEncoder":[],"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"Latin1Decoder":{"_UnicodeSubsetDecoder":[],"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"_Latin1DecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Latin1AllowInvalidDecoderSink":{"_Latin1DecoderSink":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"LineSplitter":{"StreamTransformerBase":["String","String"],"StreamTransformer":["String","String"]},"_LineSplitterSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_LineSplitterEventSink":{"_LineSplitterSink":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"EventSink":["String"],"Sink":["String"]},"_LineSplitIterable":{"Iterable":["String"]},"_LineSplitIterator":{"Iterator":["String"]},"StringConversionSink":{"ChunkedConversionSink":["String"],"Sink":["String"]},"ClosableStringSink":{"StringSink":[]},"_ClosableStringSink":{"ClosableStringSink":[],"StringSink":[]},"_StringConversionSinkAsStringSinkAdapter":{"ClosableStringSink":[],"StringSink":[]},"_StringSinkConversionSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_StringCallbackSink":{"_StringSinkConversionSink":["StringBuffer"],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_StringAdapterSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_Utf8StringSinkAdapter":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Utf8ConversionSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String","Codec.T":"List<int>"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"_Utf8EncoderSink":{"__Utf8EncoderSink__Utf8Encoder_StringConversionSink":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"_Utf8Encoder":[],"Sink":["String"]},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin":{"_JsonStringStringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin":{"_JsonUtf8Stringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"__Utf8EncoderSink__Utf8Encoder_StringConversionSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"_Utf8Encoder":[],"Sink":["String"]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"_BigIntClassic":{"_BigIntReduction":[]},"_WeakReferenceWrapper":{"WeakReference":["1"]},"_FinalizationRegistryWrapper":{"Finalizer":["1"]},"_CompileTimeError":{"Error":[]},"_DuplicatedFieldInitializerError":{"Error":[]},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"_Enum":{"Enum":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"ArgumentError":[],"Error":[]},"IndexError":{"RangeError":[],"ArgumentError":[],"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"UnsupportedError":[],"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"UnsupportedError":[],"Exception":[],"Error":[]},"int":{"num":[],"Comparable":["num"]},"_Invocation":{"Invocation":[]},"_GeneratorIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"List":{"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExp":{"Pattern":[]},"RegExpMatch":{"Match":[]},"_SetIterable":{"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"Set":{"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_StringStackTrace":{"StackTrace":[]},"String":{"Comparable":["String"],"Pattern":[]},"Runes":{"Iterable":["int"]},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_PlatformUri":{"Uri":[]},"_Uri":{"_PlatformUri":[],"Uri":[]},"_SimpleUri":{"_PlatformUri":[],"Uri":[]},"_DataUri":{"_Uri":[],"_PlatformUri":[],"Uri":[]},"NullRejectionException":{"Exception":[]},"_JSRandom":{"Random":[]},"_Random":{"Random":[]},"_JSSecureRandom":{"Random":[]},"Rectangle":{"_RectangleBase":["1"]},"MutableRectangle":{"Rectangle":["1"],"_RectangleBase":["1"]},"TypedDataList":{"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"TypedData":[],"Iterable":["1"]},"_TypedIntList":{"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"_TypedFloatList":{"TypedDataList":["double"],"List":["double"],"_ListIterable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"ByteData":{"TypedData":[]},"Int8List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8ClampedList":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int16List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint16List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int32List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint32List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int64List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint64List":{"_TypedIntList":[],"TypedDataList":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Float32List":{"_TypedFloatList":[],"TypedDataList":["double"],"List":["double"],"_ListIterable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"Float64List":{"_TypedFloatList":[],"TypedDataList":["double"],"List":["double"],"_ListIterable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"Float32x4List":{"TypedDataList":["Float32x4"],"List":["Float32x4"],"_ListIterable":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"HideEfficientLengthIterable":["Float32x4"],"TypedData":[],"Iterable":["Float32x4"]},"Int32x4List":{"TypedDataList":["Int32x4"],"List":["Int32x4"],"_ListIterable":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"HideEfficientLengthIterable":["Int32x4"],"TypedData":[],"Iterable":["Int32x4"]},"Float64x2List":{"TypedDataList":["Float64x2"],"List":["Float64x2"],"_ListIterable":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"HideEfficientLengthIterable":["Float64x2"],"TypedData":[],"Iterable":["Float64x2"]},"SingleSubscriptionTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"NonGrowableListView":{"_NonGrowableListView_DelegatingList_NonGrowableListMixin":["1"],"DelegatingList":["1"],"NonGrowableListMixin":["1"],"List":["1"],"_ListIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"NonGrowableListMixin":{"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetView0":{"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":["1"],"DelegatingSet":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetMixin":{"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableMapMixin":{"Map":["1","2"]},"_NonGrowableListView_DelegatingList_NonGrowableListMixin":{"DelegatingList":["1"],"NonGrowableListMixin":["1"],"List":["1"],"_ListIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":{"DelegatingSet":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"InternalStyle":{"Style":[]},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[],"Style":[]},"UrlStyle":{"InternalStyle":[],"Style":[]},"WindowsStyle":{"InternalStyle":[],"Style":[]},"SqliteUpdateKind":{"_Enum":[],"Enum":[]},"SqliteException":{"Exception":[]},"FinalizableDatabase":{"FinalizablePart":[]},"DatabaseImplementation":{"CommonDatabase":[]},"ValueList":{"ListBase":["Object?"],"List":["Object?"],"_ListIterable":["Object?"],"EfficientLengthIterable":["Object?"],"HideEfficientLengthIterable":["Object?"],"Iterable":["Object?"]},"DatabaseConfigImplementation":{"DatabaseConfig":[]},"Sqlite3Implementation":{"CommonSqlite3":[]},"FinalizableStatement":{"FinalizablePart":[]},"StatementImplementation":{"CommonPreparedStatement":[]},"_ActiveCursorIterator":{"IteratingCursor":[],"Cursor":[],"Iterator":["Row"]},"InMemoryFileSystem":{"BaseVirtualFileSystem":[],"VirtualFileSystem":[]},"_InMemoryFile":{"BaseVfsFile":[],"VirtualFileSystemFile":[]},"IteratingCursor":{"Cursor":[],"Iterator":["Row"]},"ResultSet":{"_ResultSet_Cursor_ListMixin_NonGrowableListMixin":[],"_ResultSet_Cursor_ListMixin":[],"ListBase":["Row"],"NonGrowableListMixin":["Row"],"List":["Row"],"_ListIterable":["Row"],"EfficientLengthIterable":["Row"],"HideEfficientLengthIterable":["Row"],"Cursor":[],"Iterable":["Row"],"ListBase.E":"Row","NonGrowableListMixin.E":"Row"},"Row":{"_Row_Object_UnmodifiableMapMixin_MapMixin":[],"_Row_Object_UnmodifiableMapMixin":[],"UnmodifiableMapMixin":["String","@"],"MapBase":["String","@"],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@","UnmodifiableMapMixin.K":"String","UnmodifiableMapMixin.V":"@"},"_ResultIterator":{"Iterator":["Row"]},"_ResultSet_Cursor_ListMixin":{"ListBase":["Row"],"List":["Row"],"_ListIterable":["Row"],"EfficientLengthIterable":["Row"],"HideEfficientLengthIterable":["Row"],"Cursor":[],"Iterable":["Row"]},"_ResultSet_Cursor_ListMixin_NonGrowableListMixin":{"_ResultSet_Cursor_ListMixin":[],"ListBase":["Row"],"NonGrowableListMixin":["Row"],"List":["Row"],"_ListIterable":["Row"],"EfficientLengthIterable":["Row"],"HideEfficientLengthIterable":["Row"],"Cursor":[],"Iterable":["Row"]},"_Row_Object_UnmodifiableMapMixin":{"UnmodifiableMapMixin":["String","@"],"Map":["String","@"]},"_Row_Object_UnmodifiableMapMixin_MapMixin":{"_Row_Object_UnmodifiableMapMixin":[],"UnmodifiableMapMixin":["String","@"],"MapBase":["String","@"],"Map":["String","@"]},"OpenMode":{"_Enum":[],"Enum":[]},"IndexedParameters":{"StatementParameters":[]},"NamedParameters":{"StatementParameters":[]},"CustomParameters":{"StatementParameters":[]},"VfsException":{"Exception":[]},"BaseVirtualFileSystem":{"VirtualFileSystem":[]},"BaseVfsFile":{"VirtualFileSystemFile":[]},"WasmSqliteBindings":{"RawSqliteBindings":[]},"WasmDatabase":{"RawSqliteDatabase":[]},"WasmStatementCompiler":{"RawStatementCompiler":[]},"WasmStatement":{"RawSqliteStatement":[]},"WasmContext":{"RawSqliteContext":[]},"WasmValue":{"RawSqliteValue":[]},"WasmValueList":{"ListBase":["WasmValue"],"List":["WasmValue"],"_ListIterable":["WasmValue"],"EfficientLengthIterable":["WasmValue"],"HideEfficientLengthIterable":["WasmValue"],"Iterable":["WasmValue"],"ListBase.E":"WasmValue"},"_CursorReader":{"StreamIterator":["1"]},"WasmSqlite3":{"Sqlite3Implementation":[],"CommonSqlite3":[]},"WasmVfs":{"BaseVirtualFileSystem":[],"VirtualFileSystem":[]},"WasmFile":{"BaseVfsFile":[],"VirtualFileSystemFile":[]},"WorkerOperation":{"_Enum":[],"Enum":[]},"EmptyMessage":{"Message":[]},"Flags":{"Message":[]},"NameAndInt32Flags":{"Flags":[],"Message":[]},"IndexedDbFileSystem":{"BaseVirtualFileSystem":[],"VirtualFileSystem":[]},"_IndexedDbFile":{"VirtualFileSystemFile":[]},"_IndexedDbWorkItem":{"LinkedListEntry":["_IndexedDbWorkItem"]},"_FunctionWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"_DeleteFileWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"_CreateFileWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"_WriteFileWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"FileType":{"_Enum":[],"Enum":[]},"SimpleOpfsFileSystem":{"BaseVirtualFileSystem":[],"VirtualFileSystem":[]},"_SimpleOpfsFile":{"BaseVfsFile":[],"VirtualFileSystemFile":[]},"_DefaultDatabaseController":{"DatabaseController":[]},"_DefaultWorkerDatabase":{"WorkerDatabase":[]},"MessageType":{"_Enum":[],"Enum":[]},"Notification":{"Message0":[]},"Request":{"Message0":[]},"Response":{"Message0":[]},"FileSystemImplementation":{"_Enum":[],"Enum":[]},"OpenRequest":{"Request":[],"Message0":[]},"ConnectRequest":{"Request":[],"Message0":[]},"StartFileSystemServer":{"Message0":[]},"CustomRequest":{"Request":[],"Message0":[]},"FileSystemExistsQuery":{"Request":[],"Message0":[]},"FileSystemFlushRequest":{"Request":[],"Message0":[]},"FileSystemAccess":{"Request":[],"Message0":[]},"RunQuery":{"Request":[],"Message0":[]},"CloseDatabase":{"Request":[],"Message0":[]},"OpenAdditonalConnection":{"Request":[],"Message0":[]},"SimpleSuccessResponse":{"Response":[],"Message0":[]},"EndpointResponse":{"Response":[],"Message0":[]},"RowsResponse":{"Response":[],"Message0":[]},"ErrorResponse":{"Response":[],"Message0":[]},"StreamRequest":{"Request":[],"Message0":[]},"CompatibilityCheck":{"Request":[],"Message0":[]},"UpdateNotification":{"Notification":[],"Message0":[]},"EmptyNotification":{"Notification":[],"Message0":[]},"FileType0":{"_Enum":[],"Enum":[]},"StorageMode":{"_Enum":[],"Enum":[]},"AccessMode":{"_Enum":[],"Enum":[]},"RemoteException":{"Exception":[]},"MissingBrowserFeature":{"_Enum":[],"Enum":[]},"Dedicated":{"WorkerEnvironment":[]},"Shared":{"WorkerEnvironment":[]},"Local":{"WorkerEnvironment":[]},"_ClientConnection":{"ProtocolChannel":[],"ClientConnection":[]},"CustomDatabaseMessageKind":{"_Enum":[],"Enum":[]},"ThrottledCommonDatabase":{"CommonDatabase":[]},"AsyncSqliteController":{"DatabaseController":[]},"AsyncSqliteDatabase":{"WorkerDatabase":[]},"GuaranteeChannel":{"StreamChannelMixin":["1"],"StreamChannel":["1"]},"_GuaranteeSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_StreamChannel":{"StreamChannelMixin":["1"],"StreamChannel":["1"]},"StreamChannelMixin":{"StreamChannel":["1"]},"TypedDataBuffer":{"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_IntBuffer":{"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"_FloatBuffer":{"TypedDataBuffer":["double"],"ListBase":["double"],"List":["double"],"_ListIterable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Iterable":["double"]},"Uint8Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","TypedDataBuffer.E":"int"},"Int8Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedBuffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Int16Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Int32Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Uint64Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Int64Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"_ListIterable":["int"],"EfficientLengthIterable":["int"],"HideEfficientLengthIterable":["int"],"Iterable":["int"]},"Float32Buffer":{"_FloatBuffer":[],"TypedDataBuffer":["double"],"ListBase":["double"],"List":["double"],"_ListIterable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Iterable":["double"]},"Float64Buffer":{"_FloatBuffer":[],"TypedDataBuffer":["double"],"ListBase":["double"],"List":["double"],"_ListIterable":["double"],"EfficientLengthIterable":["double"],"HideEfficientLengthIterable":["double"],"Iterable":["double"]},"Int32x4Buffer":{"TypedDataBuffer":["Int32x4"],"ListBase":["Int32x4"],"List":["Int32x4"],"_ListIterable":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"HideEfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"]},"Float32x4Buffer":{"TypedDataBuffer":["Float32x4"],"ListBase":["Float32x4"],"List":["Float32x4"],"_ListIterable":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"HideEfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"]},"ElementStream":{"Stream":["1"]},"_EventStream":{"Stream":["1"],"Stream.T":"1"},"_ElementEventStreamImpl":{"_EventStream":["1"],"ElementStream":["1"],"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"ElementEvents":{"Events":[]},"CustomStream":{"Stream":["1"]},"CustomEventStreamImpl":{"CustomStream":["1"],"Stream":["1"]},"CustomEventStreamProvider":{"EventStreamProvider":["1"]},"_MD5":{"_HashBase":[]},"_SHA1":{"_HashBase":[]},"HttpServer":{"Stream":["HttpRequest"]},"HttpSession":{"Map":["@","@"]},"ContentType":{"HeaderValue":[]},"HttpRequest":{"Stream":["Uint8List"]},"HttpResponse":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"HttpClientRequest":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"HttpClientResponse":{"Stream":["List<int>"]},"HttpClientResponseCompressionState":{"_Enum":[],"Enum":[]},"HttpClientBasicCredentials":{"HttpClientCredentials":[]},"HttpClientDigestCredentials":{"HttpClientCredentials":[]},"HttpException":{"IOException":[],"Exception":[]},"RedirectException":{"HttpException":[],"IOException":[],"Exception":[]},"_HttpHeaders":{"HttpHeaders":[]},"_HeaderValue":{"HeaderValue":[]},"_ContentType":{"_HeaderValue":[],"ContentType":[],"HeaderValue":[]},"_Cookie":{"Cookie":[]},"_CopyingBytesBuilder0":{"BytesBuilder":[]},"_HttpIncoming":{"Stream":["Uint8List"]},"_HttpInboundMessageListInt":{"Stream":["List<int>"]},"_HttpInboundMessage":{"Stream":["Uint8List"]},"_HttpRequest":{"_HttpInboundMessage":[],"HttpRequest":[],"Stream":["Uint8List"]},"_HttpClientResponse":{"_HttpInboundMessageListInt":[],"HttpClientResponse":[],"Stream":["List<int>"]},"_ToUint8List":{"Converter":["List<int>","Uint8List"],"StreamTransformerBase":["List<int>","Uint8List"],"StreamTransformer":["List<int>","Uint8List"]},"_Uint8ListConversionSink":{"Sink":["List<int>"]},"_StreamSinkImpl":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl":{"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpOutboundMessage":{"_IOSinkImpl":[],"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpResponse":{"_HttpOutboundMessage":["HttpResponse"],"_IOSinkImpl":[],"HttpResponse":[],"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpClientRequest":{"_HttpOutboundMessage":["HttpClientResponse"],"_IOSinkImpl":[],"HttpClientRequest":[],"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpGZipSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_HttpOutgoing":{"StreamConsumer":["List<int>"]},"_HttpClient":{"HttpClient":[]},"_HttpConnection":{"__HttpConnection_LinkedListEntry__ServiceObject":[],"LinkedListEntry":["_HttpConnection"],"_ServiceObject":[]},"ServerSocketBase":{"Stream":["1"]},"_HttpServer":{"__HttpServer_Stream__ServiceObject":[],"HttpServer":[],"Stream":["HttpRequest"],"_ServiceObject":[]},"_HttpConnectionInfo":{"HttpConnectionInfo":[]},"_DetachedSocket":{"Socket":[],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_SiteCredentials":{"_Credentials":[]},"_ProxyCredentials":{"_Credentials":[]},"_HttpClientCredentials":{"HttpClientCredentials":[]},"_HttpClientBasicCredentials":{"_HttpClientCredentials":[],"HttpClientBasicCredentials":[],"HttpClientCredentials":[]},"_HttpClientDigestCredentials":{"_HttpClientCredentials":[],"HttpClientDigestCredentials":[],"HttpClientCredentials":[]},"_RedirectInfo":{"RedirectInfo":[]},"_HttpDetachedStreamSubscription":{"StreamSubscription":["Uint8List"]},"_HttpDetachedIncoming":{"Stream":["Uint8List"]},"_HttpParser":{"Stream":["_HttpIncoming"]},"_HttpSession":{"HttpSession":[],"Map":["@","@"]},"_HttpOverridesScope":{"HttpOverrides":[]},"WebSocketTransformer":{"StreamTransformer":["HttpRequest","WebSocket"]},"WebSocket":{"StreamSink":["@"],"EventSink":["@"],"Stream":["@"],"Sink":["@"],"StreamConsumer":["@"]},"WebSocketException":{"IOException":[],"Exception":[]},"_WebSocketProtocolTransformer":{"StreamTransformerBase":["List<int>","@"],"EventSink":["List<int>"],"StreamTransformer":["List<int>","@"],"Sink":["List<int>"]},"_WebSocketTransformerImpl":{"StreamTransformerBase":["HttpRequest","WebSocket"],"WebSocketTransformer":[],"StreamTransformer":["HttpRequest","WebSocket"]},"_WebSocketOutgoingTransformer":{"StreamTransformerBase":["@","List<int>"],"EventSink":["@"],"StreamTransformer":["@","List<int>"],"Sink":["@"]},"_WebSocketConsumer":{"StreamConsumer":["@"]},"_WebSocketImpl":{"WebSocket":[],"StreamSink":["@"],"__WebSocketImpl_Stream__ServiceObject":[],"EventSink":["@"],"Stream":["@"],"_ServiceObject":[],"Sink":["@"],"StreamConsumer":["@"]},"__HttpConnection_LinkedListEntry__ServiceObject":{"LinkedListEntry":["_HttpConnection"],"_ServiceObject":[]},"__HttpServer_Stream__ServiceObject":{"Stream":["HttpRequest"],"_ServiceObject":[]},"__WebSocketImpl_Stream__ServiceObject":{"Stream":["@"],"_ServiceObject":[]},"JsGetName":{"_Enum":[],"Enum":[]},"JsBuiltin":{"_Enum":[],"Enum":[]},"_FakeUserTag":{"UserTag":[]},"HtmlElement":{"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AbortPaymentEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AbsoluteOrientationSensor":{"OrientationSensor":[],"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AbstractWorker":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Accelerometer":{"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AccessibleNode":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AccessibleNodeList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AmbientLightSensor":{"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnchorElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"HtmlHyperlinkElementUtils":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Animation":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationEffectReadOnly":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationEffectTiming":{"AnimationEffectTimingReadOnly":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationEffectTimingReadOnly":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationPlaybackEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationTimeline":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationWorkletGlobalScope":{"WorkletGlobalScope":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ApplicationCache":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ApplicationCacheErrorEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AreaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"HtmlHyperlinkElementUtils":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioElement":{"MediaElement":[],"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AuthenticatorAssertionResponse":{"AuthenticatorResponse":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AuthenticatorAttestationResponse":{"AuthenticatorResponse":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AuthenticatorResponse":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BRElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchClickEvent":{"BackgroundFetchEvent":[],"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchFailEvent":{"BackgroundFetchEvent":[],"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchFetch":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchManager":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchRegistration":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchSettledFetch":{"BackgroundFetchFetch":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BackgroundFetchedEvent":{"BackgroundFetchEvent":[],"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BarProp":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BarcodeDetector":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BaseElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BatteryManager":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BeforeInstallPromptEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BeforeUnloadEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Blob":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BlobEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BluetoothRemoteGattDescriptor":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Body":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BodyElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"WindowEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BroadcastChannel":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BudgetState":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ButtonElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CDataSection":{"Text":[],"CharacterData":[],"Node":[],"EventTarget":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CacheStorage":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CanMakePaymentEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CanvasCaptureMediaStreamTrack":{"MediaStreamTrack":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CanvasElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"CanvasImageSource":[]},"CanvasGradient":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CanvasPattern":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CanvasRenderingContext2D":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"CanvasRenderingContext":[]},"CharacterData":{"Node":[],"EventTarget":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ChildNode":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Client":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Clients":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ClipboardEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CloseEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Comment":{"CharacterData":[],"Node":[],"EventTarget":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompositionEvent":{"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ContentElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CookieStore":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Coordinates":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Credential":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CredentialUserData":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CredentialsContainer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Crypto":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CryptoKey":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Css":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssCharsetRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssConditionRule":{"CssGroupingRule":[],"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssFontFaceRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssGroupingRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssImageValue":{"CssResourceValue":[],"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssImportRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssKeyframeRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssKeyframesRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssKeywordValue":{"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssMatrixComponent":{"CssTransformComponent":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssMediaRule":{"CssConditionRule":[],"CssGroupingRule":[],"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssNamespaceRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssNumericValue":{"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssPageRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssPerspective":{"CssTransformComponent":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssPositionValue":{"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssResourceValue":{"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssRotation":{"CssTransformComponent":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssRule":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssScale":{"CssTransformComponent":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssSkew":{"CssTransformComponent":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssStyleDeclaration":{"_CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"CssStyleDeclarationBase":[]},"_CssStyleDeclarationSet":{"__CssStyleDeclarationSet_Object_CssStyleDeclarationBase":[],"CssStyleDeclarationBase":[]},"CssStyleRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssStyleSheet":{"StyleSheet":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssStyleValue":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssSupportsRule":{"CssConditionRule":[],"CssGroupingRule":[],"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssTransformComponent":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssTransformValue":{"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssTranslation":{"CssTransformComponent":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssUnitValue":{"CssNumericValue":[],"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssUnparsedValue":{"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssVariableReferenceValue":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssViewportRule":{"CssRule":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssurlImageValue":{"CssImageValue":[],"CssResourceValue":[],"CssStyleValue":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CustomElementRegistry":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CustomEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DataElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DataListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DataTransfer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DataTransferItem":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DataTransferItemList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DedicatedWorkerGlobalScope":{"WorkerGlobalScope":[],"EventTarget":[],"WindowBase64":[],"_WindowTimers":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DeprecatedStorageInfo":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DeprecatedStorageQuota":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DeprecationReport":{"ReportBody":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DetailsElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DetectedBarcode":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DetectedFace":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DetectedText":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DeviceAcceleration":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DeviceMotionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DeviceOrientationEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DeviceRotationRate":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DialogElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DirectoryEntry":{"Entry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DirectoryReader":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DivElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Document":{"Node":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DocumentFragment":{"Node":[],"EventTarget":[],"ParentNode":[],"NonElementParentNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DocumentOrShadowRoot":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DocumentTimeline":{"AnimationTimeline":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomError":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomException":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomImplementation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomIterator":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomMatrix":{"DomMatrixReadOnly":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomMatrixReadOnly":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomParser":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomPoint":{"DomPointReadOnly":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomPointReadOnly":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomQuad":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomRectList":{"_DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_DomRectList_JavaScriptObject_ListMixin":[],"ListBase":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"_ListIterable":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"JavaScriptObject":[],"EfficientLengthIterable":["Rectangle<num>"],"HideEfficientLengthIterable":["Rectangle<num>"],"JSMutableIndexable":["Rectangle<num>"],"Interceptor":[],"JSObject":[],"Iterable":["Rectangle<num>"],"JSIndexable":["Rectangle<num>"]},"DomRectReadOnly":{"JavaScriptObject":[],"Rectangle":["num"],"Interceptor":[],"JSObject":[],"_RectangleBase":["num"]},"DomStringList":{"_DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_DomStringList_JavaScriptObject_ListMixin":[],"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"_ListIterable":["String"],"JavaScriptIndexingBehavior":["String"],"JavaScriptObject":[],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"JSMutableIndexable":["String"],"Interceptor":[],"JSObject":[],"Iterable":["String"],"JSIndexable":["String"]},"DomStringMap":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DomTokenList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_ChildrenElementList":{"ListBase":["Element"],"List":["Element"],"_ListIterable":["Element"],"EfficientLengthIterable":["Element"],"HideEfficientLengthIterable":["Element"],"Iterable":["Element"],"NodeListWrapper":[]},"ElementList":{"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_FrozenElementList":{"ElementList":["1"],"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"NodeListWrapper":[]},"Element":{"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"EmbedElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Entry":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ErrorEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Event":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"EventSource":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ElementEvents0":{"Events0":[]},"EventTarget":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtendableEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtendableMessageEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"External":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FaceDetector":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FederatedCredential":{"Credential":[],"CredentialUserData":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FetchEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FieldSetElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"File":{"Blob":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FileEntry":{"Entry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FileList":{"_FileList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_FileList_JavaScriptObject_ListMixin":[],"ListBase":["File"],"ImmutableListMixin":["File"],"List":["File"],"_ListIterable":["File"],"JavaScriptIndexingBehavior":["File"],"JavaScriptObject":[],"EfficientLengthIterable":["File"],"HideEfficientLengthIterable":["File"],"JSMutableIndexable":["File"],"Interceptor":[],"JSObject":[],"Iterable":["File"],"JSIndexable":["File"]},"FileReader":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FileSystem":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FileWriter":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FocusEvent":{"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FontFace":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FontFaceSet":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FontFaceSetLoadEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FontFaceSource":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ForeignFetchEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FormData":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FormElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Gamepad":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GamepadButton":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GamepadEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GamepadPose":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Geolocation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_GeopositionWrapper":{"Geoposition":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Geoposition":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GlobalEventHandlers":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Gyroscope":{"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HRElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HashChangeEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HeadElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Headers":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HeadingElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"History":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"HistoryBase":[]},"HtmlCollection":{"_HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_HtmlCollection_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptIndexingBehavior":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"],"JSIndexable":["Node"]},"HtmlDocument":{"Document":[],"Node":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HtmlFormControlsCollection":{"HtmlCollection":[],"_HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_HtmlCollection_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptIndexingBehavior":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"],"JSIndexable":["Node"]},"HtmlHtmlElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HtmlHyperlinkElementUtils":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HtmlOptionsCollection":{"HtmlCollection":[],"_HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_HtmlCollection_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptIndexingBehavior":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"],"JSIndexable":["Node"]},"HttpRequest0":{"HttpRequestEventTarget":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HttpRequestEventTarget":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HttpRequestUpload":{"HttpRequestEventTarget":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"IFrameElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"IdleDeadline":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ImageBitmap":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ImageBitmapRenderingContext":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ImageCapture":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ImageData":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ImageElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"CanvasImageSource":[]},"InputDeviceCapabilities":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"InputElement":{"SearchInputElement":[],"TextInputElement":[],"UrlInputElement":[],"TelephoneInputElement":[],"EmailInputElement":[],"PasswordInputElement":[],"DateInputElement":[],"MonthInputElement":[],"WeekInputElement":[],"TimeInputElement":[],"LocalDateTimeInputElement":[],"NumberInputElement":[],"RangeInputElement":[],"HiddenInputElement":[],"TextInputElementBase":[],"RangeInputElementBase":[],"CheckboxInputElement":[],"RadioButtonInputElement":[],"FileUploadInputElement":[],"SubmitButtonInputElement":[],"ImageButtonInputElement":[],"ResetButtonInputElement":[],"ButtonInputElement":[],"HtmlElement":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"InputElementBase":{"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"HiddenInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextInputElementBase":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SearchInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UrlInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TelephoneInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"EmailInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PasswordInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RangeInputElementBase":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DateInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MonthInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WeekInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TimeInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LocalDateTimeInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NumberInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RangeInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CheckboxInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RadioButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FileUploadInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SubmitButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ImageButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ResetButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"InstallEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"IntersectionObserver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"IntersectionObserverEntry":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"InterventionReport":{"ReportBody":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"KeyboardEvent":{"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"KeyframeEffect":{"KeyframeEffectReadOnly":[],"AnimationEffectReadOnly":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"KeyframeEffectReadOnly":{"AnimationEffectReadOnly":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LIElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LabelElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LegendElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LinearAccelerationSensor":{"Accelerometer":[],"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LinkElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Location":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"LocationBase":[]},"Magnetometer":{"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MapElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MathMLElement":{"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaCapabilities":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaCapabilitiesInfo":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaDeviceInfo":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaDevices":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaEncryptedEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaError":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaKeyMessageEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaKeySession":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaKeyStatusMap":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaKeySystemAccess":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaKeys":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaKeysPolicy":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaMetadata":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaQueryList":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaQueryListEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaRecorder":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaSession":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaSettingsRange":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaSource":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaStream":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaStreamEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaStreamTrack":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaStreamTrackEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MemoryInfo":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MenuElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MessageChannel":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MessageEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MessagePort":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MetaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Metadata":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MeterElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MidiAccess":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MidiConnectionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MidiInput":{"MidiPort":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MidiInputMap":{"_MidiInputMap_JavaScriptObject_MapMixin":[],"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"MidiMessageEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MidiOutput":{"MidiPort":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MidiOutputMap":{"_MidiOutputMap_JavaScriptObject_MapMixin":[],"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"MidiPort":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MimeType":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MimeTypeArray":{"_MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_MimeTypeArray_JavaScriptObject_ListMixin":[],"ListBase":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"_ListIterable":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"JavaScriptObject":[],"EfficientLengthIterable":["MimeType"],"HideEfficientLengthIterable":["MimeType"],"JSMutableIndexable":["MimeType"],"Interceptor":[],"JSObject":[],"Iterable":["MimeType"],"JSIndexable":["MimeType"]},"ModElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MouseEvent":{"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MutationEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MutationObserver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MutationRecord":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigationPreloadManager":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Navigator":{"NavigatorConcurrentHardware":[],"NavigatorCookies":[],"NavigatorID":[],"NavigatorLanguage":[],"NavigatorOnLine":[],"NavigatorAutomationInformation":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigatorAutomationInformation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigatorConcurrentHardware":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigatorCookies":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigatorID":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigatorLanguage":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigatorOnLine":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NavigatorUserMediaError":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NetworkInformation":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_ChildNodeListLazy":{"ListBase":["Node"],"List":["Node"],"_ListIterable":["Node"],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"Iterable":["Node"],"NodeListWrapper":[]},"Node":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NodeFilter":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NodeIterator":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NodeList":{"_NodeList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_NodeList_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptIndexingBehavior":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"],"JSIndexable":["Node"]},"NonDocumentTypeChildNode":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NonElementParentNode":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NoncedElement":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Notification0":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NotificationEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ObjectElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OffscreenCanvas":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OffscreenCanvasRenderingContext2D":{"_CanvasPath":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OptGroupElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OptionElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OrientationSensor":{"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OutputElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OverconstrainedError":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PageTransitionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaintRenderingContext2D":{"_CanvasPath":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaintSize":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaintWorkletGlobalScope":{"WorkletGlobalScope":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ParagraphElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ParamElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ParentNode":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PasswordCredential":{"Credential":[],"CredentialUserData":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Path2D":{"_CanvasPath":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaymentAddress":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaymentInstruments":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaymentManager":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaymentRequest":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaymentRequestEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaymentRequestUpdateEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PaymentResponse":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Performance":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceEntry":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceLongTaskTiming":{"PerformanceEntry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceMark":{"PerformanceEntry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceMeasure":{"PerformanceEntry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceNavigation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceNavigationTiming":{"PerformanceResourceTiming":[],"PerformanceEntry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceObserver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceObserverEntryList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformancePaintTiming":{"PerformanceEntry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceResourceTiming":{"PerformanceEntry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceServerTiming":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PerformanceTiming":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PermissionStatus":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Permissions":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PhotoCapabilities":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PictureElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Plugin":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PluginArray":{"_PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_PluginArray_JavaScriptObject_ListMixin":[],"ListBase":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"_ListIterable":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"JavaScriptObject":[],"EfficientLengthIterable":["Plugin"],"HideEfficientLengthIterable":["Plugin"],"JSMutableIndexable":["Plugin"],"Interceptor":[],"JSObject":[],"Iterable":["Plugin"],"JSIndexable":["Plugin"]},"PointerEvent":{"MouseEvent":[],"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PopStateEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PositionError":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PreElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Presentation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PresentationAvailability":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PresentationConnection":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PresentationConnectionAvailableEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PresentationConnectionCloseEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PresentationConnectionList":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PresentationReceiver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PresentationRequest":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ProcessingInstruction":{"CharacterData":[],"Node":[],"EventTarget":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ProgressElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ProgressEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PromiseRejectionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PublicKeyCredential":{"Credential":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PushEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PushManager":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PushMessageData":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PushSubscription":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PushSubscriptionOptions":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"QuoteElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Range":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RelatedApplication":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RelativeOrientationSensor":{"OrientationSensor":[],"Sensor":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RemotePlayback":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ReportBody":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ReportingObserver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ResizeObserver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ResizeObserverEntry":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcCertificate":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcDataChannel":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcDataChannelEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcDtmfSender":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcDtmfToneChangeEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcIceCandidate":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcLegacyStatsReport":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcPeerConnection":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcPeerConnectionIceEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcRtpContributingSource":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcRtpReceiver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcRtpSender":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcSessionDescription":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcStatsReport":{"_RtcStatsReport_JavaScriptObject_MapMixin":[],"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"RtcStatsResponse":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RtcTrackEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Screen":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ScreenOrientation":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ScriptElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ScrollState":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ScrollTimeline":{"AnimationTimeline":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SecurityPolicyViolationEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SelectElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Selection":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Sensor":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SensorErrorEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ServiceWorker":{"AbstractWorker":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ServiceWorkerContainer":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ServiceWorkerGlobalScope":{"WorkerGlobalScope":[],"EventTarget":[],"WindowBase64":[],"_WindowTimers":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ServiceWorkerRegistration":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ShadowElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ShadowRoot":{"DocumentFragment":[],"Node":[],"EventTarget":[],"ParentNode":[],"NonElementParentNode":[],"DocumentOrShadowRoot":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SharedArrayBuffer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SharedWorker":{"AbstractWorker":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SharedWorkerGlobalScope":{"WorkerGlobalScope":[],"EventTarget":[],"WindowBase64":[],"_WindowTimers":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SlotElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SourceBuffer":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SourceBufferList":{"_SourceBufferList_EventTarget_ListMixin_ImmutableListMixin":[],"_SourceBufferList_EventTarget_ListMixin":[],"ListBase":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"EventTarget":[],"_ListIterable":["SourceBuffer"],"JavaScriptIndexingBehavior":["SourceBuffer"],"JavaScriptObject":[],"EfficientLengthIterable":["SourceBuffer"],"HideEfficientLengthIterable":["SourceBuffer"],"JSMutableIndexable":["SourceBuffer"],"Interceptor":[],"JSObject":[],"Iterable":["SourceBuffer"],"JSIndexable":["SourceBuffer"]},"SourceElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpanElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechGrammar":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechGrammarList":{"_SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_SpeechGrammarList_JavaScriptObject_ListMixin":[],"ListBase":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"_ListIterable":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"JavaScriptObject":[],"EfficientLengthIterable":["SpeechGrammar"],"HideEfficientLengthIterable":["SpeechGrammar"],"JSMutableIndexable":["SpeechGrammar"],"Interceptor":[],"JSObject":[],"Iterable":["SpeechGrammar"],"JSIndexable":["SpeechGrammar"]},"SpeechRecognition":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechRecognitionAlternative":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechRecognitionError":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechRecognitionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechRecognitionResult":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechSynthesis":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechSynthesisEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechSynthesisUtterance":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SpeechSynthesisVoice":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StaticRange":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Storage":{"_Storage_JavaScriptObject_MapMixin":[],"JavaScriptObject":[],"MapBase":["String","String"],"Interceptor":[],"JSObject":[],"Map":["String","String"]},"StorageEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StorageManager":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StyleElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StyleMedia":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StylePropertyMap":{"StylePropertyMapReadonly":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StylePropertyMapReadonly":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StyleSheet":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SyncEvent":{"ExtendableEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SyncManager":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TableCaptionElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TableCellElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TableColElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TableElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TableRowElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TableSectionElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TaskAttributionTiming":{"PerformanceEntry":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TemplateElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Text":{"CharacterData":[],"Node":[],"EventTarget":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextAreaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextDetector":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextEvent":{"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextMetrics":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextTrack":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextTrackCue":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextTrackCueList":{"_TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_TextTrackCueList_JavaScriptObject_ListMixin":[],"ListBase":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"_ListIterable":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"JavaScriptObject":[],"EfficientLengthIterable":["TextTrackCue"],"HideEfficientLengthIterable":["TextTrackCue"],"JSMutableIndexable":["TextTrackCue"],"Interceptor":[],"JSObject":[],"Iterable":["TextTrackCue"],"JSIndexable":["TextTrackCue"]},"TextTrackList":{"_TextTrackList_EventTarget_ListMixin_ImmutableListMixin":[],"_TextTrackList_EventTarget_ListMixin":[],"ListBase":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"EventTarget":[],"_ListIterable":["TextTrack"],"JavaScriptIndexingBehavior":["TextTrack"],"JavaScriptObject":[],"EfficientLengthIterable":["TextTrack"],"HideEfficientLengthIterable":["TextTrack"],"JSMutableIndexable":["TextTrack"],"Interceptor":[],"JSObject":[],"Iterable":["TextTrack"],"JSIndexable":["TextTrack"]},"TimeElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TimeRanges":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TitleElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Touch":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TouchEvent":{"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TouchList":{"_TouchList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_TouchList_JavaScriptObject_ListMixin":[],"ListBase":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"_ListIterable":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"JavaScriptObject":[],"EfficientLengthIterable":["Touch"],"HideEfficientLengthIterable":["Touch"],"JSMutableIndexable":["Touch"],"Interceptor":[],"JSObject":[],"Iterable":["Touch"],"JSIndexable":["Touch"]},"TrackDefault":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TrackDefaultList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TrackElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TrackEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TransitionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TreeWalker":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TrustedHtml":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TrustedScriptUrl":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TrustedUrl":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UIEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UnderlyingSourceBase":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UnknownElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Url":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UrlSearchParams":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UrlUtilsReadOnly":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VR":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRCoordinateSystem":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRDevice":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRDeviceEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRDisplay":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRDisplayCapabilities":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRDisplayEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VREyeParameters":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRFrameData":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRFrameOfReference":{"VRCoordinateSystem":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRPose":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRSession":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRSessionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRStageBounds":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRStageBoundsPoint":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VRStageParameters":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ValidityState":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VideoElement":{"MediaElement":[],"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"CanvasImageSource":[]},"VideoPlaybackQuality":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VideoTrack":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VideoTrackList":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VisualViewport":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VttCue":{"TextTrackCue":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VttRegion":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WebSocket0":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WheelEvent":{"MouseEvent":[],"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Window":{"GlobalEventHandlers":[],"WindowEventHandlers":[],"WindowBase":[],"EventTarget":[],"WindowBase64":[],"_WindowTimers":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NullWindowException":{"Exception":[]},"WindowBase64":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WindowClient":{"Client":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WindowEventHandlers":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Worker":{"AbstractWorker":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WorkerGlobalScope":{"EventTarget":[],"WindowBase64":[],"_WindowTimers":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WorkerPerformance":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WorkletAnimation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WorkletGlobalScope":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"XPathEvaluator":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"XPathExpression":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"XPathNSResolver":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"XPathResult":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"XmlDocument":{"Document":[],"Node":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"XmlSerializer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"XsltProcessor":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Attr":{"Node":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Bluetooth":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_BluetoothCharacteristicProperties":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_BluetoothDevice":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_BluetoothRemoteGATTCharacteristic":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_BluetoothRemoteGATTServer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_BluetoothRemoteGATTService":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_BluetoothUUID":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_BudgetService":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Cache":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_CanvasPath":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Clipboard":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_CssRuleList":{"__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"__CssRuleList_JavaScriptObject_ListMixin":[],"ListBase":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"_ListIterable":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"JavaScriptObject":[],"EfficientLengthIterable":["CssRule"],"HideEfficientLengthIterable":["CssRule"],"JSMutableIndexable":["CssRule"],"Interceptor":[],"JSObject":[],"Iterable":["CssRule"],"JSIndexable":["CssRule"]},"_DOMFileSystemSync":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_DirectoryEntrySync":{"_EntrySync":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_DirectoryReaderSync":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_DocumentType":{"Node":[],"EventTarget":[],"ChildNode":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_DomRect":{"DomRectReadOnly":[],"JavaScriptObject":[],"Rectangle":["num"],"Interceptor":[],"JSObject":[],"_RectangleBase":["num"]},"_EntrySync":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_FileEntrySync":{"_EntrySync":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_FileReaderSync":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_FileWriterSync":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_GamepadList":{"__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"__GamepadList_JavaScriptObject_ListMixin":[],"ListBase":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"_ListIterable":["Gamepad?"],"JavaScriptIndexingBehavior":["Gamepad?"],"JavaScriptObject":[],"EfficientLengthIterable":["Gamepad?"],"HideEfficientLengthIterable":["Gamepad?"],"JSMutableIndexable":["Gamepad?"],"Interceptor":[],"JSObject":[],"Iterable":["Gamepad?"],"JSIndexable":["Gamepad?"]},"_HTMLAllCollection":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_HTMLDirectoryElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_HTMLFontElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_HTMLFrameElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_HTMLFrameSetElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"WindowEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_HTMLMarqueeElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Mojo":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_MojoHandle":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_MojoInterfaceInterceptor":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_MojoInterfaceRequestEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_MojoWatcher":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_NFC":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_NamedNodeMap":{"__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin":[],"__NamedNodeMap_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptIndexingBehavior":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"],"JSIndexable":["Node"]},"_PagePopupController":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Report":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Request":{"Body":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_ResourceProgressEvent":{"ProgressEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Response":{"Body":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_SpeechRecognitionResultList":{"__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"__SpeechRecognitionResultList_JavaScriptObject_ListMixin":[],"ListBase":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"_ListIterable":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"JavaScriptObject":[],"EfficientLengthIterable":["SpeechRecognitionResult"],"HideEfficientLengthIterable":["SpeechRecognitionResult"],"JSMutableIndexable":["SpeechRecognitionResult"],"Interceptor":[],"JSObject":[],"Iterable":["SpeechRecognitionResult"],"JSIndexable":["SpeechRecognitionResult"]},"_StyleSheetList":{"__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"__StyleSheetList_JavaScriptObject_ListMixin":[],"ListBase":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"_ListIterable":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"JavaScriptObject":[],"EfficientLengthIterable":["StyleSheet"],"HideEfficientLengthIterable":["StyleSheet"],"JSMutableIndexable":["StyleSheet"],"Interceptor":[],"JSObject":[],"Iterable":["StyleSheet"],"JSIndexable":["StyleSheet"]},"_SubtleCrypto":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USB":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBAlternateInterface":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBConfiguration":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBConnectionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBDevice":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBEndpoint":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBInTransferResult":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBInterface":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBIsochronousInTransferPacket":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBIsochronousInTransferResult":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBIsochronousOutTransferPacket":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBIsochronousOutTransferResult":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_USBOutTransferResult":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_WindowTimers":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_WorkerLocation":{"UrlUtilsReadOnly":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_WorkerNavigator":{"NavigatorConcurrentHardware":[],"NavigatorID":[],"NavigatorOnLine":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_Worklet":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_AttributeMap":{"MapBase":["String","String"],"Map":["String","String"]},"_ElementAttributeMap":{"_AttributeMap":[],"MapBase":["String","String"],"Map":["String","String"]},"_NamespacedAttributeMap":{"_AttributeMap":[],"MapBase":["String","String"],"Map":["String","String"]},"_DataAttributeMap":{"MapBase":["String","String"],"Map":["String","String"]},"WindowBase":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CssClassSet":{"Set":["String"],"_SetIterable":["String"],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Iterable":["String"]},"_ContentCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_ContentCssListRect":{"_ContentCssRect":[],"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_PaddingCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_BorderCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_MarginCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"CssRect":{"Rectangle":["num"],"_RectangleBase":["num"]},"_MultiElementCssClassSet":{"CssClassSetImpl":[],"SetBase":["String"],"CssClassSet":[],"Set":["String"],"_SetIterable":["String"],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Iterable":["String"]},"_ElementCssClassSet":{"CssClassSetImpl":[],"SetBase":["String"],"CssClassSet":[],"Set":["String"],"_SetIterable":["String"],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Iterable":["String"]},"ElementStream0":{"Stream":["1"]},"_EventStream0":{"Stream":["1"]},"_ElementEventStreamImpl0":{"_EventStream0":["1"],"ElementStream0":["1"],"Stream":["1"]},"_ElementListEventStreamImpl":{"ElementStream0":["1"],"Stream":["1"]},"_EventStreamSubscription0":{"StreamSubscription":["1"]},"CustomStream0":{"Stream":["1"]},"_CustomEventStreamImpl":{"CustomStream0":["1"],"Stream":["1"]},"_CustomKeyEventStreamImpl":{"_CustomEventStreamImpl":["KeyEvent"],"CustomStream0":["KeyEvent"],"Stream":["KeyEvent"]},"_CustomEventStreamProvider":{"EventStreamProvider0":["1"]},"_Html5NodeValidator":{"NodeValidator":[]},"ImmutableListMixin":{"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_KeyboardEventHandler":{"EventStreamProvider0":["KeyEvent"]},"NodeValidatorBuilder":{"NodeValidator":[]},"_SimpleNodeValidator":{"NodeValidator":[]},"_CustomElementNodeValidator":{"_SimpleNodeValidator":[],"NodeValidator":[]},"_TemplatingNodeValidator":{"_SimpleNodeValidator":[],"NodeValidator":[]},"_SvgNodeValidator":{"NodeValidator":[]},"_WrappedList":{"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"],"NodeListWrapper":[]},"_WrappedIterator":{"Iterator":["1"]},"FixedSizeListIterator":{"Iterator":["1"]},"_VariableSizeListIterator":{"Iterator":["1"]},"_JSElementUpgrader":{"ElementUpgrader":[]},"_DOMWindowCrossFrame":{"WindowBase":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_LocationCrossFrame":{"LocationBase":[]},"_HistoryCrossFrame":{"HistoryBase":[]},"KeyEvent":{"KeyboardEvent":[],"_WrappedEvent":[],"UIEvent":[],"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_WrappedEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_TrustedHtmlTreeSanitizer":{"NodeTreeSanitizer":[]},"_SameOriginUriPolicy":{"UriPolicy":[]},"_ThrowsNodeValidator":{"NodeValidator":[]},"_ValidatingTreeSanitizer":{"NodeTreeSanitizer":[]},"_CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"CssStyleDeclarationBase":[]},"_DomRectList_JavaScriptObject_ListMixin":{"ListBase":["Rectangle<num>"],"List":["Rectangle<num>"],"_ListIterable":["Rectangle<num>"],"JavaScriptObject":[],"EfficientLengthIterable":["Rectangle<num>"],"HideEfficientLengthIterable":["Rectangle<num>"],"Interceptor":[],"JSObject":[],"Iterable":["Rectangle<num>"]},"_DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_DomRectList_JavaScriptObject_ListMixin":[],"ListBase":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"_ListIterable":["Rectangle<num>"],"JavaScriptObject":[],"EfficientLengthIterable":["Rectangle<num>"],"HideEfficientLengthIterable":["Rectangle<num>"],"Interceptor":[],"JSObject":[],"Iterable":["Rectangle<num>"]},"_DomStringList_JavaScriptObject_ListMixin":{"ListBase":["String"],"List":["String"],"_ListIterable":["String"],"JavaScriptObject":[],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Interceptor":[],"JSObject":[],"Iterable":["String"]},"_DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_DomStringList_JavaScriptObject_ListMixin":[],"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"_ListIterable":["String"],"JavaScriptObject":[],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Interceptor":[],"JSObject":[],"Iterable":["String"]},"_FileList_JavaScriptObject_ListMixin":{"ListBase":["File"],"List":["File"],"_ListIterable":["File"],"JavaScriptObject":[],"EfficientLengthIterable":["File"],"HideEfficientLengthIterable":["File"],"Interceptor":[],"JSObject":[],"Iterable":["File"]},"_FileList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_FileList_JavaScriptObject_ListMixin":[],"ListBase":["File"],"ImmutableListMixin":["File"],"List":["File"],"_ListIterable":["File"],"JavaScriptObject":[],"EfficientLengthIterable":["File"],"HideEfficientLengthIterable":["File"],"Interceptor":[],"JSObject":[],"Iterable":["File"]},"_HtmlCollection_JavaScriptObject_ListMixin":{"ListBase":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"]},"_HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin":{"_HtmlCollection_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"]},"_MidiInputMap_JavaScriptObject_MapMixin":{"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"_MidiOutputMap_JavaScriptObject_MapMixin":{"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"_MimeTypeArray_JavaScriptObject_ListMixin":{"ListBase":["MimeType"],"List":["MimeType"],"_ListIterable":["MimeType"],"JavaScriptObject":[],"EfficientLengthIterable":["MimeType"],"HideEfficientLengthIterable":["MimeType"],"Interceptor":[],"JSObject":[],"Iterable":["MimeType"]},"_MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin":{"_MimeTypeArray_JavaScriptObject_ListMixin":[],"ListBase":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"_ListIterable":["MimeType"],"JavaScriptObject":[],"EfficientLengthIterable":["MimeType"],"HideEfficientLengthIterable":["MimeType"],"Interceptor":[],"JSObject":[],"Iterable":["MimeType"]},"_NodeList_JavaScriptObject_ListMixin":{"ListBase":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"]},"_NodeList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_NodeList_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"]},"_PluginArray_JavaScriptObject_ListMixin":{"ListBase":["Plugin"],"List":["Plugin"],"_ListIterable":["Plugin"],"JavaScriptObject":[],"EfficientLengthIterable":["Plugin"],"HideEfficientLengthIterable":["Plugin"],"Interceptor":[],"JSObject":[],"Iterable":["Plugin"]},"_PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin":{"_PluginArray_JavaScriptObject_ListMixin":[],"ListBase":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"_ListIterable":["Plugin"],"JavaScriptObject":[],"EfficientLengthIterable":["Plugin"],"HideEfficientLengthIterable":["Plugin"],"Interceptor":[],"JSObject":[],"Iterable":["Plugin"]},"_RtcStatsReport_JavaScriptObject_MapMixin":{"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"_SourceBufferList_EventTarget_ListMixin":{"ListBase":["SourceBuffer"],"List":["SourceBuffer"],"EventTarget":[],"_ListIterable":["SourceBuffer"],"JavaScriptObject":[],"EfficientLengthIterable":["SourceBuffer"],"HideEfficientLengthIterable":["SourceBuffer"],"Interceptor":[],"JSObject":[],"Iterable":["SourceBuffer"]},"_SourceBufferList_EventTarget_ListMixin_ImmutableListMixin":{"_SourceBufferList_EventTarget_ListMixin":[],"ListBase":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"EventTarget":[],"_ListIterable":["SourceBuffer"],"JavaScriptObject":[],"EfficientLengthIterable":["SourceBuffer"],"HideEfficientLengthIterable":["SourceBuffer"],"Interceptor":[],"JSObject":[],"Iterable":["SourceBuffer"]},"_SpeechGrammarList_JavaScriptObject_ListMixin":{"ListBase":["SpeechGrammar"],"List":["SpeechGrammar"],"_ListIterable":["SpeechGrammar"],"JavaScriptObject":[],"EfficientLengthIterable":["SpeechGrammar"],"HideEfficientLengthIterable":["SpeechGrammar"],"Interceptor":[],"JSObject":[],"Iterable":["SpeechGrammar"]},"_SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_SpeechGrammarList_JavaScriptObject_ListMixin":[],"ListBase":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"_ListIterable":["SpeechGrammar"],"JavaScriptObject":[],"EfficientLengthIterable":["SpeechGrammar"],"HideEfficientLengthIterable":["SpeechGrammar"],"Interceptor":[],"JSObject":[],"Iterable":["SpeechGrammar"]},"_Storage_JavaScriptObject_MapMixin":{"JavaScriptObject":[],"MapBase":["String","String"],"Interceptor":[],"JSObject":[],"Map":["String","String"]},"_TextTrackCueList_JavaScriptObject_ListMixin":{"ListBase":["TextTrackCue"],"List":["TextTrackCue"],"_ListIterable":["TextTrackCue"],"JavaScriptObject":[],"EfficientLengthIterable":["TextTrackCue"],"HideEfficientLengthIterable":["TextTrackCue"],"Interceptor":[],"JSObject":[],"Iterable":["TextTrackCue"]},"_TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_TextTrackCueList_JavaScriptObject_ListMixin":[],"ListBase":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"_ListIterable":["TextTrackCue"],"JavaScriptObject":[],"EfficientLengthIterable":["TextTrackCue"],"HideEfficientLengthIterable":["TextTrackCue"],"Interceptor":[],"JSObject":[],"Iterable":["TextTrackCue"]},"_TextTrackList_EventTarget_ListMixin":{"ListBase":["TextTrack"],"List":["TextTrack"],"EventTarget":[],"_ListIterable":["TextTrack"],"JavaScriptObject":[],"EfficientLengthIterable":["TextTrack"],"HideEfficientLengthIterable":["TextTrack"],"Interceptor":[],"JSObject":[],"Iterable":["TextTrack"]},"_TextTrackList_EventTarget_ListMixin_ImmutableListMixin":{"_TextTrackList_EventTarget_ListMixin":[],"ListBase":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"EventTarget":[],"_ListIterable":["TextTrack"],"JavaScriptObject":[],"EfficientLengthIterable":["TextTrack"],"HideEfficientLengthIterable":["TextTrack"],"Interceptor":[],"JSObject":[],"Iterable":["TextTrack"]},"_TouchList_JavaScriptObject_ListMixin":{"ListBase":["Touch"],"List":["Touch"],"_ListIterable":["Touch"],"JavaScriptObject":[],"EfficientLengthIterable":["Touch"],"HideEfficientLengthIterable":["Touch"],"Interceptor":[],"JSObject":[],"Iterable":["Touch"]},"_TouchList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_TouchList_JavaScriptObject_ListMixin":[],"ListBase":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"_ListIterable":["Touch"],"JavaScriptObject":[],"EfficientLengthIterable":["Touch"],"HideEfficientLengthIterable":["Touch"],"Interceptor":[],"JSObject":[],"Iterable":["Touch"]},"__CssRuleList_JavaScriptObject_ListMixin":{"ListBase":["CssRule"],"List":["CssRule"],"_ListIterable":["CssRule"],"JavaScriptObject":[],"EfficientLengthIterable":["CssRule"],"HideEfficientLengthIterable":["CssRule"],"Interceptor":[],"JSObject":[],"Iterable":["CssRule"]},"__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin":{"__CssRuleList_JavaScriptObject_ListMixin":[],"ListBase":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"_ListIterable":["CssRule"],"JavaScriptObject":[],"EfficientLengthIterable":["CssRule"],"HideEfficientLengthIterable":["CssRule"],"Interceptor":[],"JSObject":[],"Iterable":["CssRule"]},"__CssStyleDeclarationSet_Object_CssStyleDeclarationBase":{"CssStyleDeclarationBase":[]},"__GamepadList_JavaScriptObject_ListMixin":{"ListBase":["Gamepad?"],"List":["Gamepad?"],"_ListIterable":["Gamepad?"],"JavaScriptObject":[],"EfficientLengthIterable":["Gamepad?"],"HideEfficientLengthIterable":["Gamepad?"],"Interceptor":[],"JSObject":[],"Iterable":["Gamepad?"]},"__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin":{"__GamepadList_JavaScriptObject_ListMixin":[],"ListBase":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"_ListIterable":["Gamepad?"],"JavaScriptObject":[],"EfficientLengthIterable":["Gamepad?"],"HideEfficientLengthIterable":["Gamepad?"],"Interceptor":[],"JSObject":[],"Iterable":["Gamepad?"]},"__NamedNodeMap_JavaScriptObject_ListMixin":{"ListBase":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"]},"__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin":{"__NamedNodeMap_JavaScriptObject_ListMixin":[],"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"_ListIterable":["Node"],"JavaScriptObject":[],"EfficientLengthIterable":["Node"],"HideEfficientLengthIterable":["Node"],"Interceptor":[],"JSObject":[],"Iterable":["Node"]},"__SpeechRecognitionResultList_JavaScriptObject_ListMixin":{"ListBase":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"_ListIterable":["SpeechRecognitionResult"],"JavaScriptObject":[],"EfficientLengthIterable":["SpeechRecognitionResult"],"HideEfficientLengthIterable":["SpeechRecognitionResult"],"Interceptor":[],"JSObject":[],"Iterable":["SpeechRecognitionResult"]},"__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin":{"__SpeechRecognitionResultList_JavaScriptObject_ListMixin":[],"ListBase":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"_ListIterable":["SpeechRecognitionResult"],"JavaScriptObject":[],"EfficientLengthIterable":["SpeechRecognitionResult"],"HideEfficientLengthIterable":["SpeechRecognitionResult"],"Interceptor":[],"JSObject":[],"Iterable":["SpeechRecognitionResult"]},"__StyleSheetList_JavaScriptObject_ListMixin":{"ListBase":["StyleSheet"],"List":["StyleSheet"],"_ListIterable":["StyleSheet"],"JavaScriptObject":[],"EfficientLengthIterable":["StyleSheet"],"HideEfficientLengthIterable":["StyleSheet"],"Interceptor":[],"JSObject":[],"Iterable":["StyleSheet"]},"__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin":{"__StyleSheetList_JavaScriptObject_ListMixin":[],"ListBase":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"_ListIterable":["StyleSheet"],"JavaScriptObject":[],"EfficientLengthIterable":["StyleSheet"],"HideEfficientLengthIterable":["StyleSheet"],"Interceptor":[],"JSObject":[],"Iterable":["StyleSheet"]},"_TypedImageData":{"ImageData":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_StructuredCloneDart2Js":{"_StructuredClone":[]},"_AcceptStructuredCloneDart2Js":{"_AcceptStructuredClone":[]},"CssClassSetImpl":{"SetBase":["String"],"CssClassSet":[],"Set":["String"],"_SetIterable":["String"],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Iterable":["String"]},"FilteredElementList":{"ListBase":["Element"],"List":["Element"],"_ListIterable":["Element"],"EfficientLengthIterable":["Element"],"HideEfficientLengthIterable":["Element"],"Iterable":["Element"],"NodeListWrapper":[]},"Cursor0":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CursorWithValue":{"Cursor0":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Database":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"IdbFactory":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Index":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"KeyRange":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ObjectStore":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Observation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Observer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ObserverChanges":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OpenDBRequest":{"Request0":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Request0":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Transaction":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VersionChangeEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"IOException":{"Exception":[]},"OSError":{"Exception":[]},"ZLibCodec":{"Codec":["List<int>","List<int>"]},"GZipCodec":{"Codec":["List<int>","List<int>"]},"ZLibEncoder":{"Converter":["List<int>","List<int>"],"StreamTransformerBase":["List<int>","List<int>"],"StreamTransformer":["List<int>","List<int>"]},"ZLibDecoder":{"Converter":["List<int>","List<int>"],"StreamTransformerBase":["List<int>","List<int>"],"StreamTransformer":["List<int>","List<int>"]},"_BufferSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ZLibEncoderSink":{"_FilterSink":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ZLibDecoderSink":{"_FilterSink":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_FilterSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Directory":{"FileSystemEntity":[]},"_Directory":{"Directory":[],"FileSystemEntity":[]},"File0":{"FileSystemEntity":[]},"FileSystemException":{"IOException":[],"Exception":[]},"PathAccessException":{"FileSystemException":[],"IOException":[],"Exception":[]},"PathExistsException":{"FileSystemException":[],"IOException":[],"Exception":[]},"PathNotFoundException":{"FileSystemException":[],"IOException":[],"Exception":[]},"ReadPipe":{"Stream":["List<int>"]},"WritePipe":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_FileStream":{"Stream":["List<int>"]},"_FileStreamConsumer":{"StreamConsumer":["List<int>"]},"_File":{"File0":[],"FileSystemEntity":[]},"_RandomAccessFile":{"RandomAccessFile":[]},"_ReadPipe":{"_FileStream":[],"ReadPipe":[],"Stream":["List<int>"]},"_WritePipe":{"_IOSinkImpl0":[],"WritePipe":[],"_StreamSinkImpl0":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_Pipe":{"Pipe":[]},"FileSystemCreateEvent":{"FileSystemEvent":[]},"FileSystemModifyEvent":{"FileSystemEvent":[]},"FileSystemDeleteEvent":{"FileSystemEvent":[]},"FileSystemMoveEvent":{"FileSystemEvent":[]},"_ReadWriteResourceInfo":{"_IOResourceInfo":[]},"_FileResourceInfo":{"_ReadWriteResourceInfo":[],"_IOResourceInfo":[]},"_Process":{"Process":[]},"_SpawnedProcessResourceInfo":{"_IOResourceInfo":[]},"IOSink":{"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_StreamSinkImpl0":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl0":{"_StreamSinkImpl0":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"Link":{"FileSystemEntity":[]},"_Link":{"Link":[],"FileSystemEntity":[]},"_SocketProfileType":{"_Enum":[],"Enum":[]},"_IOOverridesScope":{"IOOverrides":[]},"_CaseInsensitiveStringMap":{"MapBase":["String","1"],"Map":["String","1"]},"SignalException":{"IOException":[],"Exception":[]},"ProcessException":{"IOException":[],"Exception":[]},"SecureServerSocket":{"ServerSocketBase":["SecureSocket"],"Stream":["SecureSocket"]},"RawSecureServerSocket":{"Stream":["RawSecureSocket"]},"SecureSocket":{"Socket":[],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"RawSecureSocket":{"RawSocket":[],"Stream":["RawSocketEvent"]},"_RawSecureSocket":{"RawSecureSocket":[],"RawSocket":[],"Stream":["RawSocketEvent"],"_RawSocketBase":[]},"TlsException":{"IOException":[],"Exception":[]},"HandshakeException":{"TlsException":[],"IOException":[],"Exception":[]},"CertificateException":{"TlsException":[],"IOException":[],"Exception":[]},"RawServerSocket":{"Stream":["RawSocket"]},"ServerSocket":{"ServerSocketBase":["Socket"],"Stream":["Socket"]},"_RawSocketOptions":{"_Enum":[],"Enum":[]},"RawSocket":{"Stream":["RawSocketEvent"]},"Socket":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"RawDatagramSocket":{"Stream":["RawSocketEvent"]},"SocketException":{"IOException":[],"Exception":[]},"_StdStream":{"Stream":["List<int>"]},"Stdin":{"_StdStream":[],"Stream":["List<int>"]},"Stdout":{"_StdSink":[],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"StdoutException":{"IOException":[],"Exception":[]},"StdinException":{"IOException":[],"Exception":[]},"_StdConsumer":{"StreamConsumer":["List<int>"]},"_StdSink":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"SystemEncoding":{"Encoding":[],"Codec":["String","List<int>"]},"_WindowsCodePageEncoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_WindowsCodePageEncoderSink":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_WindowsCodePageDecoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"_WindowsCodePageDecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ReceivePortImpl":{"ReceivePort":[],"Stream":["@"]},"IsolateSpawnException":{"Exception":[]},"SendPort":{"Capability":[]},"ReceivePort":{"Stream":["@"]},"RemoteError":{"Error":[]},"JsFunction":{"JsObject":[]},"JsArray":{"_JsArray_JsObject_ListMixin":["1"],"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"JsObject":[],"Iterable":["1"]},"_JsArray_JsObject_ListMixin":{"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"JsObject":[],"Iterable":["1"]},"AElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Angle":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimateElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimateMotionElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimateTransformElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedAngle":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedBoolean":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedEnumeration":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedInteger":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedLength":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedLengthList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedNumber":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedNumberList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedPreserveAspectRatio":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedRect":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedString":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimatedTransformList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AnimationElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CircleElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ClipPathElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DefsElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DescElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DiscardElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"EllipseElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEBlendElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEColorMatrixElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEComponentTransferElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FECompositeElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEConvolveMatrixElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEDiffuseLightingElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEDisplacementMapElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEDistantLightElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEFloodElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEFuncAElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEFuncBElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEFuncGElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEFuncRElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEGaussianBlurElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEImageElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEMergeElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEMergeNodeElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEMorphologyElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEOffsetElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FEPointLightElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FESpecularLightingElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FESpotLightElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FETileElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FETurbulenceElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FilterElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FilterPrimitiveStandardAttributes":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"FitToViewBox":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ForeignObjectElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GeometryElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GraphicsElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ImageElement0":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Length":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LengthList":{"_LengthList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_LengthList_JavaScriptObject_ListMixin":[],"ListBase":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"_ListIterable":["Length"],"JavaScriptObject":[],"EfficientLengthIterable":["Length"],"HideEfficientLengthIterable":["Length"],"Interceptor":[],"JSObject":[],"Iterable":["Length"]},"LineElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LinearGradientElement":{"_GradientElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MarkerElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FitToViewBox":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MaskElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Matrix":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MetadataElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Number":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"NumberList":{"_NumberList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_NumberList_JavaScriptObject_ListMixin":[],"ListBase":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"_ListIterable":["Number"],"JavaScriptObject":[],"EfficientLengthIterable":["Number"],"HideEfficientLengthIterable":["Number"],"Interceptor":[],"JSObject":[],"Iterable":["Number"]},"PathElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PatternElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FitToViewBox":[],"UriReference":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Point":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PointList":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PolygonElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PolylineElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PreserveAspectRatio":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RadialGradientElement":{"_GradientElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Rect":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RectElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ScriptElement0":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SetElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StopElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StringList":{"_StringList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_StringList_JavaScriptObject_ListMixin":[],"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"_ListIterable":["String"],"JavaScriptObject":[],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Interceptor":[],"JSObject":[],"Iterable":["String"]},"StyleElement0":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AttributeClassSet":{"CssClassSetImpl":[],"SetBase":["String"],"CssClassSet":[],"Set":["String"],"_SetIterable":["String"],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Iterable":["String"]},"SvgElement":{"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SvgSvgElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"FitToViewBox":[],"ZoomAndPan":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SwitchElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"SymbolElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FitToViewBox":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TSpanElement":{"TextPositioningElement":[],"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Tests":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextContentElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextElement":{"TextPositioningElement":[],"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextPathElement":{"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TextPositioningElement":{"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TitleElement0":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Transform":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TransformList":{"_TransformList_JavaScriptObject_ListMixin_ImmutableListMixin":[],"_TransformList_JavaScriptObject_ListMixin":[],"ListBase":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"_ListIterable":["Transform"],"JavaScriptObject":[],"EfficientLengthIterable":["Transform"],"HideEfficientLengthIterable":["Transform"],"Interceptor":[],"JSObject":[],"Iterable":["Transform"]},"UnitTypes":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UriReference":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UseElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ViewElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FitToViewBox":[],"ZoomAndPan":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ZoomAndPan":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_GradientElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_SVGComponentTransferFunctionElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_SVGFEDropShadowElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_SVGMPathElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"ParentNode":[],"ChildNode":[],"NonDocumentTypeChildNode":[],"NoncedElement":[],"UriReference":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_LengthList_JavaScriptObject_ListMixin":{"ListBase":["Length"],"List":["Length"],"_ListIterable":["Length"],"JavaScriptObject":[],"EfficientLengthIterable":["Length"],"HideEfficientLengthIterable":["Length"],"Interceptor":[],"JSObject":[],"Iterable":["Length"]},"_LengthList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_LengthList_JavaScriptObject_ListMixin":[],"ListBase":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"_ListIterable":["Length"],"JavaScriptObject":[],"EfficientLengthIterable":["Length"],"HideEfficientLengthIterable":["Length"],"Interceptor":[],"JSObject":[],"Iterable":["Length"]},"_NumberList_JavaScriptObject_ListMixin":{"ListBase":["Number"],"List":["Number"],"_ListIterable":["Number"],"JavaScriptObject":[],"EfficientLengthIterable":["Number"],"HideEfficientLengthIterable":["Number"],"Interceptor":[],"JSObject":[],"Iterable":["Number"]},"_NumberList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_NumberList_JavaScriptObject_ListMixin":[],"ListBase":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"_ListIterable":["Number"],"JavaScriptObject":[],"EfficientLengthIterable":["Number"],"HideEfficientLengthIterable":["Number"],"Interceptor":[],"JSObject":[],"Iterable":["Number"]},"_StringList_JavaScriptObject_ListMixin":{"ListBase":["String"],"List":["String"],"_ListIterable":["String"],"JavaScriptObject":[],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Interceptor":[],"JSObject":[],"Iterable":["String"]},"_StringList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_StringList_JavaScriptObject_ListMixin":[],"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"_ListIterable":["String"],"JavaScriptObject":[],"EfficientLengthIterable":["String"],"HideEfficientLengthIterable":["String"],"Interceptor":[],"JSObject":[],"Iterable":["String"]},"_TransformList_JavaScriptObject_ListMixin":{"ListBase":["Transform"],"List":["Transform"],"_ListIterable":["Transform"],"JavaScriptObject":[],"EfficientLengthIterable":["Transform"],"HideEfficientLengthIterable":["Transform"],"Interceptor":[],"JSObject":[],"Iterable":["Transform"]},"_TransformList_JavaScriptObject_ListMixin_ImmutableListMixin":{"_TransformList_JavaScriptObject_ListMixin":[],"ListBase":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"_ListIterable":["Transform"],"JavaScriptObject":[],"EfficientLengthIterable":["Transform"],"HideEfficientLengthIterable":["Transform"],"Interceptor":[],"JSObject":[],"Iterable":["Transform"]},"AnalyserNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioBuffer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioBufferSourceNode":{"AudioScheduledSourceNode":[],"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioContext":{"BaseAudioContext":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioDestinationNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioListener":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioNode":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioParam":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioParamMap":{"_AudioParamMap_JavaScriptObject_MapMixin":[],"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"AudioProcessingEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioScheduledSourceNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioTrack":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioTrackList":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioWorkletGlobalScope":{"WorkletGlobalScope":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioWorkletNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AudioWorkletProcessor":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BaseAudioContext":{"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"BiquadFilterNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ChannelMergerNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ChannelSplitterNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ConstantSourceNode":{"AudioScheduledSourceNode":[],"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ConvolverNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DelayNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DynamicsCompressorNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GainNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"IirFilterNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaElementAudioSourceNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaStreamAudioDestinationNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"MediaStreamAudioSourceNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OfflineAudioCompletionEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OfflineAudioContext":{"BaseAudioContext":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OscillatorNode":{"AudioScheduledSourceNode":[],"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PannerNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"PeriodicWave":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ScriptProcessorNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"StereoPannerNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"WaveShaperNode":{"AudioNode":[],"EventTarget":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_AudioParamMap_JavaScriptObject_MapMixin":{"JavaScriptObject":[],"MapBase":["String","@"],"Interceptor":[],"JSObject":[],"Map":["String","@"]},"ActiveInfo":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"AngleInstancedArrays":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Buffer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Canvas":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ColorBufferFloat":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompressedTextureAstc":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompressedTextureAtc":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompressedTextureETC1":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompressedTextureEtc":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompressedTexturePvrtc":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompressedTextureS3TC":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"CompressedTextureS3TCsRgb":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ContextEvent":{"Event":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DebugRendererInfo":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DebugShaders":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DepthTexture":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DrawBuffers":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"EXTsRgb":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtBlendMinMax":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtColorBufferFloat":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtColorBufferHalfFloat":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtDisjointTimerQuery":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtDisjointTimerQueryWebGL2":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtFragDepth":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtShaderTextureLod":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ExtTextureFilterAnisotropic":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Framebuffer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"GetBufferSubDataAsync":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"LoseContext":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OesElementIndexUint":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OesStandardDerivatives":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OesTextureFloat":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OesTextureFloatLinear":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OesTextureHalfFloat":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OesTextureHalfFloatLinear":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"OesVertexArrayObject":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Program":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Query":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Renderbuffer":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"RenderingContext":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[],"CanvasRenderingContext":[]},"RenderingContext2":{"_WebGL2RenderingContextBase":[],"_WebGLRenderingContextBase":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Sampler":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Shader":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"ShaderPrecisionFormat":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Sync":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"Texture":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TimerQueryExt":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"TransformFeedback":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"UniformLocation":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VertexArrayObject":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"VertexArrayObjectOes":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_WebGL2RenderingContextBase":{"_WebGLRenderingContextBase":[],"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"_WebGLRenderingContextBase":{"JavaScriptObject":[],"Interceptor":[],"JSObject":[]},"DelegatingEventSink":{"EventSink":["1"],"Sink":["1"]},"DelegatingFuture":{"Future":["1"]},"DelegatingSink":{"Sink":["1"]},"DelegatingStream":{"StreamView":["1"],"Stream":["1"]},"DelegatingStreamConsumer":{"StreamConsumer":["1"]},"DelegatingStreamSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"DelegatingStreamSubscription":{"StreamSubscription":["1"]},"FutureGroup":{"Sink":["Future<1>"]},"LazyStream":{"Stream":["1"]},"NullStreamSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"RestartableTimer":{"Timer":[]},"CaptureSink":{"EventSink":["1"],"Sink":["1"]},"CaptureStreamTransformer":{"StreamTransformerBase":["1","Result<1>"],"StreamTransformer":["1","Result<1>"]},"ErrorResult":{"Result":["0&"]},"ResultFuture":{"DelegatingFuture":["1"],"Future":["1"]},"ReleaseSink":{"EventSink":["Result<1>"],"Sink":["Result<1>"]},"ReleaseStreamTransformer":{"StreamTransformerBase":["Result<1>","1"],"StreamTransformer":["Result<1>","1"]},"ValueResult":{"Result":["1"]},"EventSinkBase":{"EventSink":["1"],"Sink":["1"]},"StreamSinkBase":{"EventSinkBase":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"IOSinkBase":{"StreamSinkBase":["List<int>"],"EventSinkBase":["List<int>"],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"]},"StreamCloser":{"StreamTransformerBase":["1","1"],"StreamTransformer":["1","1"]},"_CompleterStream":{"Stream":["1"]},"StreamGroup":{"Sink":["Stream<1>"]},"_NextRequest":{"_EventRequest":["1"]},"_PeekRequest":{"_EventRequest":["1"]},"_SkipRequest":{"_EventRequest":["1"]},"_ListRequest":{"_EventRequest":["1"]},"_TakeRequest":{"_ListRequest":["1"],"_EventRequest":["1"]},"_LookAheadRequest":{"_ListRequest":["1"],"_EventRequest":["1"]},"_CancelRequest":{"_EventRequest":["1"]},"_RestRequest":{"_EventRequest":["1"]},"_HasNextRequest":{"_EventRequest":["1"]},"_TransactionRequest":{"_EventRequest":["1"]},"_CompleterSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"HandlerTransformer":{"StreamSinkTransformer":["1","2"]},"_HandlerSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_SafeCloseSink":{"DelegatingStreamSink":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"RejectErrorsSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"StreamTransformerWrapper":{"StreamSinkTransformer":["1","2"]},"_StreamTransformerWrapperSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"TypeSafeStreamSinkTransformer":{"StreamSinkTransformer":["1","2"]},"_TransformedSubscription":{"StreamSubscription":["1"]},"StreamZip":{"Stream":["List<1>"]},"SubscriptionStream":{"Stream":["1"]},"_CancelOnErrorSubscriptionWrapper":{"DelegatingStreamSubscription":["1"],"StreamSubscription":["1"]},"TypeSafeStreamSubscription":{"StreamSubscription":["1"]},"_TypeSafeStreamTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"BoolList":{"_BoolList_Object_ListMixin":[],"ListBase":["bool"],"List":["bool"],"_ListIterable":["bool"],"EfficientLengthIterable":["bool"],"HideEfficientLengthIterable":["bool"],"Iterable":["bool"]},"_GrowableBoolList":{"BoolList":[],"_BoolList_Object_ListMixin":[],"ListBase":["bool"],"List":["bool"],"_ListIterable":["bool"],"EfficientLengthIterable":["bool"],"HideEfficientLengthIterable":["bool"],"Iterable":["bool"]},"_NonGrowableBoolList":{"__NonGrowableBoolList_BoolList_NonGrowableListMixin":[],"BoolList":[],"_BoolList_Object_ListMixin":[],"ListBase":["bool"],"NonGrowableListMixin":["bool"],"List":["bool"],"_ListIterable":["bool"],"EfficientLengthIterable":["bool"],"HideEfficientLengthIterable":["bool"],"Iterable":["bool"]},"_BoolListIterator":{"Iterator":["bool"]},"_BoolList_Object_ListMixin":{"ListBase":["bool"],"List":["bool"],"_ListIterable":["bool"],"EfficientLengthIterable":["bool"],"HideEfficientLengthIterable":["bool"],"Iterable":["bool"]},"__NonGrowableBoolList_BoolList_NonGrowableListMixin":{"BoolList":[],"_BoolList_Object_ListMixin":[],"ListBase":["bool"],"NonGrowableListMixin":["bool"],"List":["bool"],"_ListIterable":["bool"],"EfficientLengthIterable":["bool"],"HideEfficientLengthIterable":["bool"],"Iterable":["bool"]},"CanonicalizedMap":{"Map":["2","3"]},"CombinedIterableView":{"Iterable":["1"]},"CombinedIterator":{"Iterator":["1"]},"CombinedListView":{"UnmodifiableListView":["1"],"UnmodifiableListBase":["1"],"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"CombinedMapView":{"UnmodifiableMapBase":["1","2"],"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_DeduplicatingIterableView":{"Iterable":["1"]},"_DeduplicatingIterator":{"Iterator":["1"]},"EmptyUnmodifiableSet":{"UnmodifiableSetView0":["1"],"_EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin":["1"],"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":["1"],"UnmodifiableSetMixin":["1"],"DelegatingSet":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"_DelegatingIterableBase":["1"],"Iterable":["1"]},"_EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin":{"UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"EqualityBy":{"Equality":["1"]},"DefaultEquality":{"Equality":["1"]},"IdentityEquality":{"Equality":["1"]},"IterableEquality":{"Equality":["Iterable<1>"]},"ListEquality":{"Equality":["List<1>"]},"_UnorderedEquality":{"Equality":["2"]},"UnorderedIterableEquality":{"_UnorderedEquality":["1","Iterable<1>"],"Equality":["Iterable<1>"]},"SetEquality":{"_UnorderedEquality":["1","Set<1>"],"Equality":["Set<1>"]},"MapEquality":{"Equality":["Map<1,2>"]},"MultiEquality":{"Equality":["1"]},"DeepCollectionEquality":{"Equality":["@"]},"CaseInsensitiveEquality":{"Equality":["String"]},"EqualityMap":{"DelegatingMap":["1","2"],"Map":["1","2"]},"EqualitySet":{"DelegatingSet":["1"],"Set":["1"],"_SetIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"IterableZip":{"Iterable":["List<1>"]},"_IteratorZip":{"Iterator":["List<1>"]},"ListSlice":{"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"HeapPriorityQueue":{"PriorityQueue":["1"]},"_UnorderedElementsIterable":{"Iterable":["1"]},"_UnorderedElementsIterator":{"Iterator":["1"]},"QueueList":{"_QueueList_Object_ListMixin":["1"],"ListBase":["1"],"List":["1"],"Queue":["1"],"_ListIterable":["1"],"_QueueIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_CastQueueList":{"QueueList":["2"],"_QueueList_Object_ListMixin":["2"],"ListBase":["2"],"List":["2"],"Queue":["2"],"_ListIterable":["2"],"_QueueIterable":["2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"_QueueList_Object_ListMixin":{"ListBase":["1"],"List":["1"],"_ListIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"UnionSet":{"_UnionSet_SetBase_UnmodifiableSetMixin":["1"],"SetBase":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_UnionSet_SetBase_UnmodifiableSetMixin":{"SetBase":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingIterable":{"_DelegatingIterableBase":["1"],"Iterable":["1"]},"DelegatingList":{"List":["1"],"_ListIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"DelegatingSet":{"Set":["1"],"_SetIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"DelegatingQueue":{"Queue":["1"],"_QueueIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"DelegatingMap":{"Map":["1","2"]},"MapKeySet":{"_MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"MapValueSet":{"Set":["2"],"_SetIterable":["2"],"_DelegatingIterableBase":["2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"_MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin":{"UnmodifiableSetMixin":["1"],"Set":["1"],"_SetIterable":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"HideEfficientLengthIterable":["1"],"Iterable":["1"]},"PathMap":{"MapView":["String?","1"],"Map":["String?","1"]},"PathSet":{"Set":["String?"],"_SetIterable":["String?"],"EfficientLengthIterable":["String?"],"HideEfficientLengthIterable":["String?"],"Iterable":["String?"]},"WindowFunction":{"AggregateFunction":["1"]},"_JsonbCodec":{"Codec":["Object?","Uint8List"]},"_ElementType":{"_Enum":[],"Enum":[]},"_JsonbDecoder":{"Converter":["Uint8List","Object?"],"StreamTransformerBase":["Uint8List","Object?"],"StreamTransformer":["Uint8List","Object?"]},"_JsonbEncoder":{"Converter":["Object?","Uint8List"],"StreamTransformerBase":["Object?","Uint8List"],"StreamTransformer":["Object?","Uint8List"]},"AsyncJavaScriptIteratable":{"Stream":["1"]},"RemoteDatabase":{"Database0":[]},"RemoteFileSystem":{"FileSystem0":[]},"WorkerConnection":{"ProtocolChannel":[]},"DatabaseClient":{"WebSqlite":[]},"CloseGuaranteeChannel":{"StreamChannelMixin":["1"],"StreamChannel":["1"]},"_CloseGuaranteeStream":{"Stream":["1"]},"_CloseGuaranteeSink":{"DelegatingStreamSink":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"DelegatingStreamChannel":{"StreamChannelMixin":["1"],"StreamChannel":["1"]},"Disconnector":{"StreamChannelTransformer":["1","1"]},"_DisconnectorSink":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_JsonDocument":{"StreamChannelTransformer":["Object?","String"]},"MultiChannel":{"StreamChannel":["1"]},"_MultiChannel":{"StreamChannelMixin":["1"],"MultiChannel":["1"],"StreamChannel":["1"]},"VirtualChannel":{"StreamChannelMixin":["1"],"MultiChannel":["1"],"StreamChannel":["1"]},"TouchListWrapper":{"JSImmutableListWrapper":["JSObject","JSObject"],"_JSImmutableListWrapper_Object_ListMixin":["JSObject","JSObject"],"ListBase":["JSObject"],"List":["JSObject"],"_ListIterable":["JSObject"],"EfficientLengthIterable":["JSObject"],"HideEfficientLengthIterable":["JSObject"],"Iterable":["JSObject"]},"JSImmutableListWrapper":{"_JSImmutableListWrapper_Object_ListMixin":["1","2"],"ListBase":["2"],"List":["2"],"_ListIterable":["2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]},"_JSImmutableListWrapper_Object_ListMixin":{"ListBase":["2"],"List":["2"],"_ListIterable":["2"],"EfficientLengthIterable":["2"],"HideEfficientLengthIterable":["2"],"Iterable":["2"]}}'));
  var string$ = {
    ABCDEFx2b: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    ABCDEFx2d: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    Cannotc: "Cannot change the length of a fixed-length list",
    Cannoteff: "Cannot extract a file path from a URI with a fragment component",
    Cannotefq: "Cannot extract a file path from a URI with a query component",
    Cannoten: "Cannot extract a non-Windows file path from a file URI with an authority",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Transa: "Transaction rolled back by earlier statement. Cannot execute: ",
    max_mu: "max must be in range 0 < max \u2264 2^32, was "
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      AggregateContext_nullable_Object: findType("AggregateContext<Object?>"),
      AsyncError: findType("AsyncError"),
      BigInt: findType("BigInt"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      ClientConnection: findType("ClientConnection"),
      Comparable_dynamic: findType("Comparable<@>"),
      CompatibilityCheck: findType("CompatibilityCheck"),
      CompatibilityResult: findType("CompatibilityResult"),
      Completer_Response: findType("Completer<Response>"),
      CustomDatabaseMessageKind: findType("CustomDatabaseMessageKind"),
      DatabaseState: findType("DatabaseState"),
      DateTime: findType("DateTime"),
      Dedicated: findType("Dedicated"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      EmptyMessage: findType("EmptyMessage"),
      Error: findType("Error"),
      EventSink_dynamic: findType("EventSink<@>"),
      EventStreamProvider_JSObject: findType("EventStreamProvider<JSObject>"),
      Exception: findType("Exception"),
      FileSystemImplementation: findType("FileSystemImplementation"),
      FileType: findType("FileType"),
      FinalizablePart: findType("FinalizablePart"),
      Flags: findType("Flags"),
      Float32List: findType("Float32List"),
      Float64List: findType("Float64List"),
      Function: findType("Function"),
      Future_StreamSubscription_void_Function: findType("Future<StreamSubscription<~>>()"),
      Future_dynamic: findType("Future<@>"),
      Future_void: findType("Future<~>"),
      HeldLock: findType("HeldLock"),
      IndexedDbFileSystem: findType("IndexedDbFileSystem"),
      Int16List: findType("Int16List"),
      Int32List: findType("Int32List"),
      Int8List: findType("Int8List"),
      InternalStyle: findType("InternalStyle"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      Iterable_nullable_Object: findType("Iterable<Object?>"),
      JSArray_FinalizableStatement: findType("JSArray<FinalizableStatement>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_JSArray_nullable_Object: findType("JSArray<JSArray<Object?>>"),
      JSArray_JSObject: findType("JSArray<JSObject>"),
      JSArray_List_nullable_Object: findType("JSArray<List<Object?>>"),
      JSArray_NativeByteBuffer: findType("JSArray<NativeByteBuffer>"),
      JSArray_NativeUint8List: findType("JSArray<NativeUint8List>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_Record_2_StorageMode_and_String: findType("JSArray<+(StorageMode,String)>"),
      JSArray_StatementImplementation: findType("JSArray<StatementImplementation>"),
      JSArray_StreamSubscription_dynamic: findType("JSArray<StreamSubscription<@>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray__ClientConnection: findType("JSArray<_ClientConnection>"),
      JSArray__ConnectionDatabase: findType("JSArray<_ConnectionDatabase>"),
      JSArray__OffsetAndBuffer: findType("JSArray<_OffsetAndBuffer>"),
      JSArray__ReadWriteMutexRequest: findType("JSArray<_ReadWriteMutexRequest>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptBigInt: findType("JavaScriptBigInt"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JavaScriptObject: findType("JavaScriptObject"),
      LinkedHashMapCell: findType("LinkedHashMapCell"),
      LinkedList__IndexedDbWorkItem: findType("LinkedList<_IndexedDbWorkItem>"),
      List_JSObject: findType("List<JSObject>"),
      List_String: findType("List<String>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_Object: findType("List<Object?>"),
      Map_String_JSObject: findType("Map<String,JSObject>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_int: findType("Map<String,int>"),
      Map_of_String_and_List_String: findType("Map<String,List<String>>"),
      Map_of_String_and_Map_String_JSObject: findType("Map<String,Map<String,JSObject>>"),
      Map_of_String_and_nullable_Object: findType("Map<String,Object?>"),
      Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>"),
      Message: findType("Message"),
      MessageSerializer: findType("MessageSerializer"),
      MessageType_CompatibilityCheck: findType("MessageType<CompatibilityCheck>"),
      MessageType_EmptyNotification: findType("MessageType<EmptyNotification>"),
      MessageType_StreamRequest: findType("MessageType<StreamRequest>"),
      Message_2: findType("Message0"),
      MultiStreamController_Message: findType("MultiStreamController<Message0>"),
      NameAndInt32Flags: findType("NameAndInt32Flags"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeByteData: findType("NativeByteData"),
      NativeInt32List: findType("NativeInt32List"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedArray_dynamic: findType("NativeTypedArray<@>"),
      NativeUint8List: findType("NativeUint8List"),
      Notification: findType("Notification"),
      Null: findType("Null"),
      Object: findType("Object"),
      Pattern: findType("Pattern"),
      RawSqliteDatabase: findType("RawSqliteDatabase"),
      RawSqliteStatement: findType("RawSqliteStatement"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_JSObject_and_StreamChannel_Message: findType("+(JSObject,StreamChannel<Message0>)"),
      Record_2_nullable_JSObject_and_JSObject: findType("+(JSObject?,JSObject)"),
      RegExpMatch: findType("RegExpMatch"),
      RegisteredFunctionSet: findType("RegisteredFunctionSet"),
      Request: findType("Request"),
      Response: findType("Response"),
      ResultSet: findType("ResultSet"),
      Row: findType("Row"),
      SimpleOpfsFileSystem: findType("SimpleOpfsFileSystem"),
      Sink_List_int: findType("Sink<List<int>>"),
      Sink_String: findType("Sink<String>"),
      Sqlite3Filename: findType("Sqlite3Filename"),
      SqliteUpdate: findType("SqliteUpdate"),
      StackTrace: findType("StackTrace"),
      StatementImplementation: findType("StatementImplementation"),
      StatementParameters: findType("StatementParameters"),
      StorageMode: findType("StorageMode"),
      StreamChannel_Message: findType("StreamChannel<Message0>"),
      StreamRequest: findType("StreamRequest"),
      StreamSubscription_SqliteUpdate: findType("StreamSubscription<SqliteUpdate>"),
      StreamSubscription_dynamic: findType("StreamSubscription<@>"),
      StreamSubscription_void: findType("StreamSubscription<~>"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_String: findType("Stream<String>"),
      String: findType("String"),
      StringConversionSink: findType("StringConversionSink"),
      StringSink: findType("StringSink"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      TypeError: findType("TypeError"),
      TypeErrorDecoder: findType("TypeErrorDecoder"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8ClampedList: findType("Uint8ClampedList"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      Uri: findType("Uri"),
      VfsWorker: findType("VfsWorker"),
      VirtualFileSystem: findType("VirtualFileSystem"),
      VirtualFileSystemFile: findType("VirtualFileSystemFile"),
      WasmBindings: findType("WasmBindings"),
      WasmInstance: findType("WasmInstance"),
      WasmSqlite3: findType("WasmSqlite3"),
      WasmValue: findType("WasmValue"),
      WorkerDatabase: findType("WorkerDatabase"),
      WorkerOperation_Flags_EmptyMessage: findType("WorkerOperation<Flags,EmptyMessage>"),
      WorkerOperation_Flags_Flags: findType("WorkerOperation<Flags,Flags>"),
      WorkerOperation_NameAndInt32Flags_Flags: findType("WorkerOperation<NameAndInt32Flags,Flags>"),
      Zone: findType("Zone"),
      _BigIntImpl: findType("_BigIntImpl"),
      _ConnectionDatabase: findType("_ConnectionDatabase"),
      _DelayedEvent_dynamic: findType("_DelayedEvent<@>"),
      _EventDispatch_dynamic: findType("_EventDispatch<@>"),
      _FileWriteRequest: findType("_FileWriteRequest"),
      _FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _IndexedDbWorkItem: findType("_IndexedDbWorkItem"),
      _LinkedHashSetCell: findType("_LinkedHashSetCell"),
      _OpenedFileHandle: findType("_OpenedFileHandle"),
      _PlatformUri: findType("_PlatformUri"),
      _ReadWriteMutexRequest: findType("_ReadWriteMutexRequest"),
      _Record: findType("_Record"),
      _Record2: findType("_Record2"),
      _ResolvedPath: findType("_ResolvedPath"),
      _SimpleUri: findType("_SimpleUri"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _StreamState: findType("_StreamState"),
      bool: findType("bool"),
      bool_Function: findType("bool()"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Function: findType("Function?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Future_WasmSqlite3: findType("Future<WasmSqlite3>?"),
      nullable_Future_WorkerDatabase: findType("Future<WorkerDatabase>?"),
      nullable_Future_void: findType("Future<~>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_JavaScriptFunction: findType("JavaScriptFunction?"),
      nullable_LinkedHashMapCell: findType("LinkedHashMapCell?"),
      nullable_List_nullable_Object: findType("List<Object?>?"),
      nullable_NativeByteBuffer: findType("NativeByteBuffer?"),
      nullable_Object: findType("Object?"),
      nullable_RawSqliteStatement: findType("RawSqliteStatement?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_StreamSubscription_void: findType("StreamSubscription<~>?"),
      nullable_String: findType("String?"),
      nullable_Uint8Buffer: findType("Uint8Buffer?"),
      nullable_VirtualFileSystem: findType("VirtualFileSystem?"),
      nullable_WasmSqlite3: findType("WasmSqlite3?"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable__AsyncCallbackEntry: findType("_AsyncCallbackEntry?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__Future_void: findType("_Future<~>?"),
      nullable__IndexedDbWorkItem: findType("_IndexedDbWorkItem?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable__StreamHandlers_of_SqliteUpdate_and_void_Function: findType("_StreamHandlers<SqliteUpdate,~()>?"),
      nullable__StreamHandlers_of_void_and_bool_Function: findType("_StreamHandlers<~,bool()>?"),
      nullable__StreamHandlers_of_void_and_void_Function: findType("_StreamHandlers<~,~()>?"),
      nullable_int: findType("int?"),
      nullable_int_Function: findType("int()?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_int_String_int: findType("~(int,String,int)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_$opt_void: findType("~([~])"),
      void_Function_2_nullable_Object_and_JSObject: findType("~(Object?,JSObject)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.AsciiDecoder_false_127 = new A.AsciiDecoder(false, 127);
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_Base64Decoder = new A.Base64Decoder();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_EmptyMessage = new A.EmptyMessage();
    B.C_Endian = new A.Endian();
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_Latin1Codec = new A.Latin1Codec();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__JSRandom = new A._JSRandom();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.C__ZoneFunction = new A._ZoneFunction(A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
    B.CustomDatabaseMessageKind_0 = new A.CustomDatabaseMessageKind(0, "requestSharedLock");
    B.CustomDatabaseMessageKind_1 = new A.CustomDatabaseMessageKind(1, "requestExclusiveLock");
    B.CustomDatabaseMessageKind_2 = new A.CustomDatabaseMessageKind(2, "releaseLock");
    B.CustomDatabaseMessageKind_3 = new A.CustomDatabaseMessageKind(3, "lockObtained");
    B.CustomDatabaseMessageKind_4 = new A.CustomDatabaseMessageKind(4, "getAutoCommit");
    B.CustomDatabaseMessageKind_5 = new A.CustomDatabaseMessageKind(5, "executeInTransaction");
    B.CustomDatabaseMessageKind_6 = new A.CustomDatabaseMessageKind(6, "executeBatchInTransaction");
    B.Duration_0 = new A.Duration(0);
    B.Duration_1000 = new A.Duration(1000);
    B.EventStreamProvider_blocked = new A.EventStreamProvider("blocked", type$.EventStreamProvider_JSObject);
    B.EventStreamProvider_connect = new A.EventStreamProvider("connect", type$.EventStreamProvider_JSObject);
    B.EventStreamProvider_error = new A.EventStreamProvider("error", type$.EventStreamProvider_JSObject);
    B.EventStreamProvider_message = new A.EventStreamProvider("message", type$.EventStreamProvider_JSObject);
    B.EventStreamProvider_success = new A.EventStreamProvider("success", type$.EventStreamProvider_JSObject);
    B.FileSystemImplementation_i_2_indexedDb = new A.FileSystemImplementation("i", 2, "indexedDb");
    B.FileSystemImplementation_l_1_opfsLocks = new A.FileSystemImplementation("l", 1, "opfsLocks");
    B.FileSystemImplementation_m_3_inMemory = new A.FileSystemImplementation("m", 3, "inMemory");
    B.FileSystemImplementation_s_0_opfsShared = new A.FileSystemImplementation("s", 0, "opfsShared");
    B.Latin1Decoder_false_255 = new A.Latin1Decoder(false, 255);
    B.Latin1Encoder_255 = new A.Latin1Encoder(255);
    B.List_239_191_189 = A._setArrayType(makeConstList([239, 191, 189]), type$.JSArray_int);
    B.List_2jN = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_42A = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_4AN = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_65533 = A._setArrayType(makeConstList([65533]), type$.JSArray_int);
    B.StorageMode_0 = new A.StorageMode(0, "opfs");
    B.StorageMode_1 = new A.StorageMode(1, "indexedDb");
    B.StorageMode_2 = new A.StorageMode(2, "inMemory");
    B.List_AmO = A._setArrayType(makeConstList([B.StorageMode_0, B.StorageMode_1, B.StorageMode_2]), A.findType("JSArray<StorageMode>"));
    B.FileType_0 = new A.FileType0(0, "database");
    B.FileType_1 = new A.FileType0(1, "journal");
    B.List_FileType_0_FileType_1 = A._setArrayType(makeConstList([B.FileType_0, B.FileType_1]), A.findType("JSArray<FileType0>"));
    B.List_GVy = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.SqliteUpdateKind_0 = new A.SqliteUpdateKind(0, "insert");
    B.SqliteUpdateKind_1 = new A.SqliteUpdateKind(1, "update");
    B.SqliteUpdateKind_2 = new A.SqliteUpdateKind(2, "delete");
    B.List_IYL = A._setArrayType(makeConstList([B.SqliteUpdateKind_0, B.SqliteUpdateKind_1, B.SqliteUpdateKind_2]), A.findType("JSArray<SqliteUpdateKind>"));
    B.List_IqE = A._setArrayType(makeConstList([B.CustomDatabaseMessageKind_0, B.CustomDatabaseMessageKind_1, B.CustomDatabaseMessageKind_2, B.CustomDatabaseMessageKind_3, B.CustomDatabaseMessageKind_4, B.CustomDatabaseMessageKind_5, B.CustomDatabaseMessageKind_6]), A.findType("JSArray<CustomDatabaseMessageKind>"));
    B.List_M2I0 = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_M2I = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_VOY = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.WorkerOperation_Gkh = new A.WorkerOperation(A.sync_channel_MessageSerializer_readNameAndFlags$closure(), A.sync_channel_MessageSerializer_readFlags$closure(), 0, "xAccess", type$.WorkerOperation_NameAndInt32Flags_Flags);
    B.WorkerOperation_AxI = new A.WorkerOperation(A.sync_channel_MessageSerializer_readNameAndFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 1, "xDelete", A.findType("WorkerOperation<NameAndInt32Flags,EmptyMessage>"));
    B.WorkerOperation_readNameAndFlags_readFlags_2_xOpen = new A.WorkerOperation(A.sync_channel_MessageSerializer_readNameAndFlags$closure(), A.sync_channel_MessageSerializer_readFlags$closure(), 2, "xOpen", type$.WorkerOperation_NameAndInt32Flags_Flags);
    B.WorkerOperation_readFlags_readFlags_3_xRead = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readFlags$closure(), 3, "xRead", type$.WorkerOperation_Flags_Flags);
    B.WorkerOperation_readFlags_readEmpty_4_xWrite = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 4, "xWrite", type$.WorkerOperation_Flags_EmptyMessage);
    B.WorkerOperation_readFlags_readEmpty_5_xSleep = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 5, "xSleep", type$.WorkerOperation_Flags_EmptyMessage);
    B.WorkerOperation_readFlags_readEmpty_6_xClose = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 6, "xClose", type$.WorkerOperation_Flags_EmptyMessage);
    B.WorkerOperation_readFlags_readFlags_7_xFileSize = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readFlags$closure(), 7, "xFileSize", type$.WorkerOperation_Flags_Flags);
    B.WorkerOperation_readFlags_readEmpty_8_xSync = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 8, "xSync", type$.WorkerOperation_Flags_EmptyMessage);
    B.WorkerOperation_readFlags_readEmpty_9_xTruncate = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 9, "xTruncate", type$.WorkerOperation_Flags_EmptyMessage);
    B.WorkerOperation_readFlags_readEmpty_10_xLock = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 10, "xLock", type$.WorkerOperation_Flags_EmptyMessage);
    B.WorkerOperation_readFlags_readEmpty_11_xUnlock = new A.WorkerOperation(A.sync_channel_MessageSerializer_readFlags$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 11, "xUnlock", type$.WorkerOperation_Flags_EmptyMessage);
    B.WorkerOperation_readEmpty_readEmpty_12_stopServer = new A.WorkerOperation(A.sync_channel_MessageSerializer_readEmpty$closure(), A.sync_channel_MessageSerializer_readEmpty$closure(), 12, "stopServer", A.findType("WorkerOperation<EmptyMessage,EmptyMessage>"));
    B.List_ckn = A._setArrayType(makeConstList([B.WorkerOperation_Gkh, B.WorkerOperation_AxI, B.WorkerOperation_readNameAndFlags_readFlags_2_xOpen, B.WorkerOperation_readFlags_readFlags_3_xRead, B.WorkerOperation_readFlags_readEmpty_4_xWrite, B.WorkerOperation_readFlags_readEmpty_5_xSleep, B.WorkerOperation_readFlags_readEmpty_6_xClose, B.WorkerOperation_readFlags_readFlags_7_xFileSize, B.WorkerOperation_readFlags_readEmpty_8_xSync, B.WorkerOperation_readFlags_readEmpty_9_xTruncate, B.WorkerOperation_readFlags_readEmpty_10_xLock, B.WorkerOperation_readFlags_readEmpty_11_xUnlock, B.WorkerOperation_readEmpty_readEmpty_12_stopServer]), A.findType("JSArray<WorkerOperation<Message,Message>>"));
    B.List_empty3 = A._setArrayType(makeConstList([]), type$.JSArray_Object);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.List_empty2 = A._setArrayType(makeConstList([]), type$.JSArray_nullable_Object);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_Record_2_StorageMode_and_String);
    B.MessageType_0 = new A.MessageType(0, "dedicatedCompatibilityCheck", type$.MessageType_CompatibilityCheck);
    B.MessageType_1 = new A.MessageType(1, "sharedCompatibilityCheck", type$.MessageType_CompatibilityCheck);
    B.MessageType_2 = new A.MessageType(2, "dedicatedInSharedCompatibilityCheck", type$.MessageType_CompatibilityCheck);
    B.MessageType_3 = new A.MessageType(3, "custom", A.findType("MessageType<CustomRequest>"));
    B.MessageType_4 = new A.MessageType(4, "open", A.findType("MessageType<OpenRequest>"));
    B.MessageType_5 = new A.MessageType(5, "runQuery", A.findType("MessageType<RunQuery>"));
    B.MessageType_6 = new A.MessageType(6, "fileSystemExists", A.findType("MessageType<FileSystemExistsQuery>"));
    B.MessageType_7 = new A.MessageType(7, "fileSystemAccess", A.findType("MessageType<FileSystemAccess>"));
    B.MessageType_8 = new A.MessageType(8, "fileSystemFlush", A.findType("MessageType<FileSystemFlushRequest>"));
    B.MessageType_9 = new A.MessageType(9, "connect", A.findType("MessageType<ConnectRequest>"));
    B.MessageType_10 = new A.MessageType(10, "startFileSystemServer", A.findType("MessageType<StartFileSystemServer>"));
    B.MessageType_11 = new A.MessageType(11, "updateRequest", type$.MessageType_StreamRequest);
    B.MessageType_12 = new A.MessageType(12, "rollbackRequest", type$.MessageType_StreamRequest);
    B.MessageType_13 = new A.MessageType(13, "commitRequest", type$.MessageType_StreamRequest);
    B.MessageType_14 = new A.MessageType(14, "simpleSuccessResponse", A.findType("MessageType<SimpleSuccessResponse>"));
    B.MessageType_15 = new A.MessageType(15, "rowsResponse", A.findType("MessageType<RowsResponse>"));
    B.MessageType_16 = new A.MessageType(16, "errorResponse", A.findType("MessageType<ErrorResponse>"));
    B.MessageType_17 = new A.MessageType(17, "endpointResponse", A.findType("MessageType<EndpointResponse>"));
    B.MessageType_18 = new A.MessageType(18, "closeDatabase", A.findType("MessageType<CloseDatabase>"));
    B.MessageType_19 = new A.MessageType(19, "openAdditionalConnection", A.findType("MessageType<OpenAdditonalConnection>"));
    B.MessageType_20 = new A.MessageType(20, "notifyUpdate", A.findType("MessageType<UpdateNotification>"));
    B.MessageType_21 = new A.MessageType(21, "notifyRollback", type$.MessageType_EmptyNotification);
    B.MessageType_22 = new A.MessageType(22, "notifyCommit", type$.MessageType_EmptyNotification);
    B.List_gr0 = A._setArrayType(makeConstList([B.MessageType_0, B.MessageType_1, B.MessageType_2, B.MessageType_3, B.MessageType_4, B.MessageType_5, B.MessageType_6, B.MessageType_7, B.MessageType_8, B.MessageType_9, B.MessageType_10, B.MessageType_11, B.MessageType_12, B.MessageType_13, B.MessageType_14, B.MessageType_15, B.MessageType_16, B.MessageType_17, B.MessageType_18, B.MessageType_19, B.MessageType_20, B.MessageType_21, B.MessageType_22]), A.findType("JSArray<MessageType<Message0>>"));
    B.FileType_s7J = new A.FileType("/database", 0, "database");
    B.FileType_ADx = new A.FileType("/database-journal", 1, "journal");
    B.List_oyU = A._setArrayType(makeConstList([B.FileType_s7J, B.FileType_ADx]), A.findType("JSArray<FileType>"));
    B.List_piR = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_s2g = A._setArrayType(makeConstList([B.FileSystemImplementation_s_0_opfsShared, B.FileSystemImplementation_l_1_opfsLocks, B.FileSystemImplementation_i_2_indexedDb, B.FileSystemImplementation_m_3_inMemory]), A.findType("JSArray<FileSystemImplementation>"));
    B.Object_empty = {};
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,int>"));
    B.OpenMode_2 = new A.OpenMode(2, "readWriteCreate");
    B.Type_ByteBuffer_EOZ = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_mF8 = A.typeLiteral("ByteData");
    B.Type_Float32List_Ymk = A.typeLiteral("Float32List");
    B.Type_Float64List_Ymk = A.typeLiteral("Float64List");
    B.Type_Int16List_cot = A.typeLiteral("Int16List");
    B.Type_Int32List_m1p = A.typeLiteral("Int32List");
    B.Type_Int8List_woc = A.typeLiteral("Int8List");
    B.Type_Object_QJv = A.typeLiteral("Object");
    B.Type_Uint16List_2mh = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2mh = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_9Bb = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_CSc = A.typeLiteral("Uint8List");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.VfsException_10 = new A.VfsException(10);
    B.VfsException_12 = new A.VfsException(12);
    B.VfsException_14 = new A.VfsException(14);
    B.VfsException_2570 = new A.VfsException(2570);
    B.VfsException_3850 = new A.VfsException(3850);
    B.VfsException_522 = new A.VfsException(522);
    B.VfsException_778 = new A.VfsException(778);
    B.VfsException_8 = new A.VfsException(8);
    B._PathDirection_3KU = new A._PathDirection("above root");
    B._PathDirection_8OV = new A._PathDirection("at root");
    B._PathDirection_e7w = new A._PathDirection("reaches root");
    B._PathDirection_yLX = new A._PathDirection("below root");
    B._PathRelation_different = new A._PathRelation("different");
    B._PathRelation_equal = new A._PathRelation("equal");
    B._PathRelation_inconclusive = new A._PathRelation("inconclusive");
    B._PathRelation_within = new A._PathRelation("within");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $.Uri__cachedBaseString = "";
    $.Uri__cachedBaseUri = null;
    $._currentUriBase = null;
    $._current = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), type$.Future_void));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(A.TypeErrorDecoder_buildJavaScriptObject()))));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(A.TypeErrorDecoder_buildJavaScriptObjectWithNonClosure()))));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null))));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOnNull())));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0))));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOnUndefined())));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null))));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOnNull())));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0))));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => type$.TypeErrorDecoder._as(A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOnUndefined())));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<~>")._as($.$get$nullFuture()));
    _lazyFinal($, "Future__falseFuture", "$get$Future__falseFuture", () => A._Future$zoneValue(false, B.C__RootZone, type$.bool));
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List_NativeInt8List$fromList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int)));
    _lazy($, "_Base64Decoder__emptyBuffer", "$get$_Base64Decoder__emptyBuffer", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => J.$negate$in($.$get$_BigIntImpl_one()));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false));
    _lazyFinal($, "_FinalizationRegistryWrapper__finalizationRegistryConstructor", "$get$_FinalizationRegistryWrapper__finalizationRegistryConstructor", () => typeof FinalizationRegistry == "function" ? FinalizationRegistry : null);
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true));
    _lazyFinal($, "_Uri__useURLSearchParams", "$get$_Uri__useURLSearchParams", () => typeof URLSearchParams == "function");
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.identityHashCode(B.Type_Object_QJv));
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "_jsBoxedDartObjectProperty", "$get$_jsBoxedDartObjectProperty", () => Symbol("jsBoxedDartObjectProperty"));
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => A._JSSecureRandom$());
    _lazyFinal($, "url", "$get$url", () => A.Context_Context(null, $.$get$Style_url()));
    _lazyFinal($, "context", "$get$context", () => A.createInternal());
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => A.PosixStyle$());
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => A.WindowsStyle$());
    _lazyFinal($, "Style_url", "$get$Style_url", () => A.UrlStyle$());
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "bigIntMinValue64", "$get$bigIntMinValue64", () => A.BigInt_parse("-9223372036854775808"));
    _lazyFinal($, "bigIntMaxValue64", "$get$bigIntMaxValue64", () => A.BigInt_parse("9223372036854775807"));
    _lazyFinal($, "disposeFinalizer", "$get$disposeFinalizer", () => A.Finalizer_Finalizer(new A.disposeFinalizer_closure(), type$.FinalizablePart));
    _lazyFinal($, "BaseVirtualFileSystem__fallbackRandom", "$get$BaseVirtualFileSystem__fallbackRandom", () => A.Random_Random$secure());
    _lazyFinal($, "AsynchronousIndexedDbFileSystem__storesJs", "$get$AsynchronousIndexedDbFileSystem__storesJs", () => A.ListToJSArray_get_toJS(A._setArrayType([A.StringToJSString_get_toJS("files"), A.StringToJSString_get_toJS("blocks")], type$.JSArray_String), type$.String));
    _lazyFinal($, "FileType_byName", "$get$FileType_byName", () => {
      var t2, t3,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.FileType);
      for (t2 = B.JSArray_methods.get$iterator(B.List_oyU); A.boolConversionCheck(t2.moveNext$0());) {
        t3 = t2.get$current();
        t1.$indexSet(0, t3.filePath, t3);
      }
      return t1;
    });
    _lazyFinal($, "DartCallbacks_sqliteVfsPointer", "$get$DartCallbacks_sqliteVfsPointer", () => A.Expando$(type$.int));
    _lazyFinal($, "_random", "$get$_random", () => A.Random_Random());
    _lazy($, "WebLocks_instance", "$get$WebLocks_instance", () => {
      var _s9_ = "navigator",
        t1 = type$.JSObject;
      return A.boolConversionCheck(A.JSBooleanToBool_get_toDart(A.JSObjectUnsafeUtilExtension_hasProperty(A.getProperty(A.staticInteropGlobalContext(), _s9_, t1), A.StringToJSString_get_toJS("locks")))) ? A.WebLocks$_(A.getProperty(A.getProperty(A.staticInteropGlobalContext(), _s9_, t1), "locks", t1)) : null;
    });
    _lazyFinal($, "MessageType_byName", "$get$MessageType_byName", () => A.EnumByName_asNameMap(B.List_gr0, A.findType("MessageType<Message0>")));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$2$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=db_worker.js.map
